 -n
WARNING: Set --only-test and --skip-build may lead to inconsistent results
(--only-test renumbers executables)
Loading specifications...
Synthesizing...
Starting synthesis!
Generated the dimensions
Have 1 possible annotated typemaps
Looking at intput type array(COMPLEX: with dims N (=) ), with inpname x
Looking at intput type COMPLEX, with inpname None
Looking at intput type float32, with inpname real
Generated result types SFloat(real)
Looking at intput type float32, with inpname imag
Generated result types SFloat(imag)
Generated result types STypes(SFloat(real), SFloat(imag))
Generated result types SArray(x: STypes(SFloat(real), SFloat(imag)): with lenvar N (=) )
Looking at intput type int32, with inpname N
Generated result types SInt(N)
Looking at intput type array(complex_type: with dims power_quad_acc_n (=) ), with inpname power_quad_acc_input
Looking at intput type complex_type, with inpname None
Looking at intput type float32, with inpname re
Generated result types SFloat(re)
Looking at intput type float32, with inpname im
Generated result types SFloat(im)
Generated result types STypes(SFloat(re), SFloat(im))
Generated result types SArray(power_quad_acc_input: STypes(SFloat(re), SFloat(im)): with lenvar power_quad_acc_n (=) )
Looking at intput type int32, with inpname power_quad_acc_n
Generated result types SInt(power_quad_acc_n)
Looking at intput type array(complex_type: with dims power_quad_acc_n (=) ), with inpname power_quad_acc_output
Looking at intput type complex_type, with inpname None
Looking at intput type float32, with inpname re
Generated result types SFloat(re)
Looking at intput type float32, with inpname im
Generated result types SFloat(im)
Generated result types STypes(SFloat(re), SFloat(im))
Generated result types SArray(power_quad_acc_output: STypes(SFloat(re), SFloat(im)): with lenvar power_quad_acc_n (=) )
Looking at intput type array(COMPLEX: with dims N (=) ), with inpname x
Looking at intput type COMPLEX, with inpname None
Looking at intput type float32, with inpname real
Generated result types SFloat(real)
Looking at intput type float32, with inpname imag
Generated result types SFloat(imag)
Generated result types STypes(SFloat(real), SFloat(imag))
Generated result types SArray(x: STypes(SFloat(real), SFloat(imag)): with lenvar N (=) )
Liveout types are SArray(x: STypes(SFloat(real), SFloat(imag)): with lenvar N (=) )
Looking at intput type array(complex_type: with dims power_quad_acc_n (=) ), with inpname power_quad_acc_output
Looking at intput type complex_type, with inpname None
Looking at intput type float32, with inpname re
Generated result types SFloat(re)
Looking at intput type float32, with inpname im
Generated result types SFloat(im)
Generated result types STypes(SFloat(re), SFloat(im))
Generated result types SArray(power_quad_acc_output: STypes(SFloat(re), SFloat(im)): with lenvar power_quad_acc_n (=) )
Variable name is SArray(x: STypes(SFloat(real), SFloat(imag)): with lenvar N (=) ) (probability1.) 
Variable name is SInt(N) (probability1.) 
Got potential dimvars N (=) 
Variable name is SArray(power_quad_acc_output: STypes(SFloat(re), SFloat(im)): with lenvar power_quad_acc_n (=) ) (probability1.) 
Variable name is SArray(x: STypes(SFloat(real), SFloat(imag)): with lenvar N (=) ) (probability0.5) 
Variable name is SInt(N) (probability0.5) 
Types are: 
(postbind: SArray(power_quad_acc_output: STypes(SFloat(re), SFloat(im)): with lenvar power_quad_acc_n (=) ) (probability1.) 
SArray(x: STypes(SFloat(real), SFloat(imag)): with lenvar N (=) ) (probability0.5) 
SInt(N) (probability0.5) )
(prebind: SArray(x: STypes(SFloat(real), SFloat(imag)): with lenvar N (=) ) (probability1.) 
SInt(N) (probability1.) )
Keys in typemap are N, power_quad_acc_n, x, power_quad_acc_output, power_quad_acc_input
N, power_quad_acc_n, x, power_quad_acc_output, power_quad_acc_input
N, power_quad_acc_n, x, power_quad_acc_output, power_quad_acc_input
N, power_quad_acc_n, x, power_quad_acc_output, power_quad_acc_input
Keys in typemap are N, power_quad_acc_n, x, power_quad_acc_output, power_quad_acc_input
Looking at tovar x, real
Keys in typemap are N, power_quad_acc_n, x, power_quad_acc_output, power_quad_acc_input
Looking at tovar x, imag
Keys in typemap are N, power_quad_acc_n, x, power_quad_acc_output, power_quad_acc_input
Looking at tovar power_quad_acc_output, Annon
Keys in typemap are N, power_quad_acc_n, x, power_quad_acc_output, power_quad_acc_input
Looking at tovar power_quad_acc_n
Keys in typemap are N, power_quad_acc_n, x, power_quad_acc_output, power_quad_acc_input
Looking at tovar power_quad_acc_input, im
Keys in typemap are N, power_quad_acc_n, x, power_quad_acc_output, power_quad_acc_input
Looking at tovar power_quad_acc_input, re
Keys in typemap are N, power_quad_acc_n, x, power_quad_acc_output, power_quad_acc_input
Looking at tovar x, real
Keys in typemap are N, power_quad_acc_n, x, power_quad_acc_output, power_quad_acc_input
Looking at tovar x, imag
Keys in typemap are N, power_quad_acc_n, x, power_quad_acc_output, power_quad_acc_input
Looking at tovar power_quad_acc_output, Annon
Keys in typemap are N, power_quad_acc_n, x, power_quad_acc_output, power_quad_acc_input
Looking at tovar power_quad_acc_n
Keys in typemap are N, power_quad_acc_n, x, power_quad_acc_output, power_quad_acc_input
Looking at tovar power_quad_acc_input, im
Keys in typemap are N, power_quad_acc_n, x, power_quad_acc_output, power_quad_acc_input
Looking at tovar power_quad_acc_input, re
Keys in typemap are N, power_quad_acc_n, x, power_quad_acc_output, power_quad_acc_input
Looking at tovar x, real
Keys in typemap are N, power_quad_acc_n, x, power_quad_acc_output, power_quad_acc_input
Looking at tovar x, imag
Keys in typemap are N, power_quad_acc_n, x, power_quad_acc_output, power_quad_acc_input
Looking at tovar power_quad_acc_output, Annon
Keys in typemap are N, power_quad_acc_n, x, power_quad_acc_output, power_quad_acc_input
Looking at tovar power_quad_acc_n
Keys in typemap are N, power_quad_acc_n, x, power_quad_acc_output, power_quad_acc_input
Looking at tovar power_quad_acc_input, im
Keys in typemap are N, power_quad_acc_n, x, power_quad_acc_output, power_quad_acc_input
Looking at tovar power_quad_acc_input, re
Keys in typemap are N, power_quad_acc_n, x, power_quad_acc_output, power_quad_acc_input
Looking at tovar x, real
Keys in typemap are N, power_quad_acc_n, x, power_quad_acc_output, power_quad_acc_input
Looking at tovar x, imag
Keys in typemap are N, power_quad_acc_n, x, power_quad_acc_output, power_quad_acc_input
Looking at tovar power_quad_acc_output, Annon
Keys in typemap are N, power_quad_acc_n, x, power_quad_acc_output, power_quad_acc_input
Looking at tovar power_quad_acc_n
Keys in typemap are N, power_quad_acc_n, x, power_quad_acc_output, power_quad_acc_input
Looking at tovar power_quad_acc_input, im
Keys in typemap are N, power_quad_acc_n, x, power_quad_acc_output, power_quad_acc_input
Looking at tovar power_quad_acc_input, re
Number of skeletons generated is 4
Getting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeNumber of conversion pairs generated is 4
Looking at GIR GIR: Define power_quad_acc_output
Uses: power_quad_acc_n
Defs: power_quad_acc_output.re,power_quad_acc_output.im
Assigns: 

Has unassed use power_quad_acc_n
Looking at GIR GIR: Define power_quad_acc_n
Uses: 
Defs: power_quad_acc_n
Assigns: 

Looking at GIR GIR: power_quad_acc_n = N
Uses: N
Defs: 
Assigns: power_quad_acc_n

Has undefed ass power_quad_acc_n
Looking at GIR GIR: Define power_quad_acc_input
Uses: power_quad_acc_n
Defs: power_quad_acc_input.re,power_quad_acc_input.im
Assigns: 

Has unassed use power_quad_acc_n
Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i2{
power_quad_acc_input[i2].im = x[i2].imag}
Uses: power_quad_acc_n,x.imag
Defs: 
Assigns: power_quad_acc_input.im

Has unassed use power_quad_acc_n
Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i3{
power_quad_acc_input[i3].re = x[i3].real}
Uses: power_quad_acc_n,x.real
Defs: 
Assigns: power_quad_acc_input.re

Has unassed use power_quad_acc_n
Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i4{
x[i4].real = power_quad_acc_output[i4].im}
Uses: power_quad_acc_n,power_quad_acc_output.im
Defs: 
Assigns: x.real

Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i5{
x[i5].imag = power_quad_acc_output[i5].re}
Uses: power_quad_acc_n,power_quad_acc_output.re
Defs: 
Assigns: x.imag

Looking at GIR GIR: free power_quad_acc_input
Uses: 
Defs: 
Assigns: 

Looking at GIR GIR: free power_quad_acc_output
Uses: 
Defs: 
Assigns: 

Looking at GIR GIR: free power_quad_acc_n
Uses: 
Defs: 
Assigns: 

Looking at GIR GIR: Define power_quad_acc_output
Uses: power_quad_acc_n
Defs: power_quad_acc_output.re,power_quad_acc_output.im
Assigns: 

Has unassed use power_quad_acc_n
Looking at GIR GIR: Define power_quad_acc_n
Uses: 
Defs: power_quad_acc_n
Assigns: 

Looking at GIR GIR: power_quad_acc_n = N
Uses: N
Defs: 
Assigns: power_quad_acc_n

Has undefed ass power_quad_acc_n
Looking at GIR GIR: Define power_quad_acc_input
Uses: power_quad_acc_n
Defs: power_quad_acc_input.re,power_quad_acc_input.im
Assigns: 

Has unassed use power_quad_acc_n
Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i7{
power_quad_acc_input[i7].im = x[i7].imag}
Uses: power_quad_acc_n,x.imag
Defs: 
Assigns: power_quad_acc_input.im

Has unassed use power_quad_acc_n
Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i8{
power_quad_acc_input[i8].re = x[i8].real}
Uses: power_quad_acc_n,x.real
Defs: 
Assigns: power_quad_acc_input.re

Has unassed use power_quad_acc_n
Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i9{
x[i9].real = power_quad_acc_output[i9].re}
Uses: power_quad_acc_n,power_quad_acc_output.re
Defs: 
Assigns: x.real

Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i10{
x[i10].imag = power_quad_acc_output[i10].im}
Uses: power_quad_acc_n,power_quad_acc_output.im
Defs: 
Assigns: x.imag

Looking at GIR GIR: free power_quad_acc_input
Uses: 
Defs: 
Assigns: 

Looking at GIR GIR: free power_quad_acc_output
Uses: 
Defs: 
Assigns: 

Looking at GIR GIR: free power_quad_acc_n
Uses: 
Defs: 
Assigns: 

Looking at GIR GIR: Define power_quad_acc_output
Uses: power_quad_acc_n
Defs: power_quad_acc_output.re,power_quad_acc_output.im
Assigns: 

Has unassed use power_quad_acc_n
Looking at GIR GIR: Define power_quad_acc_n
Uses: 
Defs: power_quad_acc_n
Assigns: 

Looking at GIR GIR: power_quad_acc_n = N
Uses: N
Defs: 
Assigns: power_quad_acc_n

Has undefed ass power_quad_acc_n
Looking at GIR GIR: Define power_quad_acc_input
Uses: power_quad_acc_n
Defs: power_quad_acc_input.re,power_quad_acc_input.im
Assigns: 

Has unassed use power_quad_acc_n
Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i12{
power_quad_acc_input[i12].im = x[i12].real}
Uses: power_quad_acc_n,x.real
Defs: 
Assigns: power_quad_acc_input.im

Has unassed use power_quad_acc_n
Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i13{
power_quad_acc_input[i13].re = x[i13].imag}
Uses: power_quad_acc_n,x.imag
Defs: 
Assigns: power_quad_acc_input.re

Has unassed use power_quad_acc_n
Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i14{
x[i14].real = power_quad_acc_output[i14].im}
Uses: power_quad_acc_n,power_quad_acc_output.im
Defs: 
Assigns: x.real

Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i15{
x[i15].imag = power_quad_acc_output[i15].re}
Uses: power_quad_acc_n,power_quad_acc_output.re
Defs: 
Assigns: x.imag

Looking at GIR GIR: free power_quad_acc_input
Uses: 
Defs: 
Assigns: 

Looking at GIR GIR: free power_quad_acc_output
Uses: 
Defs: 
Assigns: 

Looking at GIR GIR: free power_quad_acc_n
Uses: 
Defs: 
Assigns: 

Looking at GIR GIR: Define power_quad_acc_output
Uses: power_quad_acc_n
Defs: power_quad_acc_output.re,power_quad_acc_output.im
Assigns: 

Has unassed use power_quad_acc_n
Looking at GIR GIR: Define power_quad_acc_n
Uses: 
Defs: power_quad_acc_n
Assigns: 

Looking at GIR GIR: power_quad_acc_n = N
Uses: N
Defs: 
Assigns: power_quad_acc_n

Has undefed ass power_quad_acc_n
Looking at GIR GIR: Define power_quad_acc_input
Uses: power_quad_acc_n
Defs: power_quad_acc_input.re,power_quad_acc_input.im
Assigns: 

Has unassed use power_quad_acc_n
Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i17{
power_quad_acc_input[i17].im = x[i17].real}
Uses: power_quad_acc_n,x.real
Defs: 
Assigns: power_quad_acc_input.im

Has unassed use power_quad_acc_n
Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i18{
power_quad_acc_input[i18].re = x[i18].imag}
Uses: power_quad_acc_n,x.imag
Defs: 
Assigns: power_quad_acc_input.re

Has unassed use power_quad_acc_n
Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i19{
x[i19].real = power_quad_acc_output[i19].re}
Uses: power_quad_acc_n,power_quad_acc_output.re
Defs: 
Assigns: x.real

Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i20{
x[i20].imag = power_quad_acc_output[i20].im}
Uses: power_quad_acc_n,power_quad_acc_output.im
Defs: 
Assigns: x.imag

Looking at GIR GIR: free power_quad_acc_input
Uses: 
Defs: 
Assigns: 

Looking at GIR GIR: free power_quad_acc_output
Uses: 
Defs: 
Assigns: 

Looking at GIR GIR: free power_quad_acc_n
Uses: 
Defs: 
Assigns: 

Number of programs from these pairs is 4
Doing sub-struct assignment for member re
Doing sub-struct assignment for member im
Context is 
Dim length is power_quad_acc_n
Doing sub-struct assignment for member re
Doing sub-struct assignment for member im
Context is 
Dim length is power_quad_acc_n
Number of codes generated is 1
Number of codes built is 1
Generating tests for the 1 programs
Number of IO tests generated is 1
Time: 1.5e-05
AccTime: 0
Real responses generated
Warning: Accelerator failed on input (input file synthethizer_temps/io/1//1.json): accelerator bounds should be specified for better performance. 
For executable synthethizer_temps/1_exec, passed cound is 0 of 1 tests (0 are vacuous: luck pass is false) 
Starting post synthesis (1 programs)
===============================================
Working tests are in the source files for executables 
There were 0 working in total
Required compiler flags to build are: libs/clib/fft_synth_lib.co libs/clib/synthesizer.co -Ilibs -fsanitize=address -lfftw3 -lfftw3f
Done!
WARNING: Set --only-test and --skip-build may lead to inconsistent results
(--only-test renumbers executables)
Loading specifications...
Synthesizing...
Starting synthesis!
Generated the dimensions
Have 1 possible annotated typemaps
Looking at intput type int32, with inpname nfft
Generated result types SInt(nfft)
Looking at intput type array(kiss_fft_cpx: with dims nfft (=) ), with inpname fin
Looking at intput type kiss_fft_cpx, with inpname None
Looking at intput type float32, with inpname r
Generated result types SFloat(r)
Looking at intput type float32, with inpname i
Generated result types SFloat(i)
Generated result types STypes(SFloat(r), SFloat(i))
Generated result types SArray(fin: STypes(SFloat(r), SFloat(i)): with lenvar nfft (=) )
Looking at intput type array(complex_type: with dims power_quad_acc_n (=) ), with inpname power_quad_acc_input
Looking at intput type complex_type, with inpname None
Looking at intput type float32, with inpname re
Generated result types SFloat(re)
Looking at intput type float32, with inpname im
Generated result types SFloat(im)
Generated result types STypes(SFloat(re), SFloat(im))
Generated result types SArray(power_quad_acc_input: STypes(SFloat(re), SFloat(im)): with lenvar power_quad_acc_n (=) )
Looking at intput type int32, with inpname power_quad_acc_n
Generated result types SInt(power_quad_acc_n)
Looking at intput type array(complex_type: with dims power_quad_acc_n (=) ), with inpname power_quad_acc_output
Looking at intput type complex_type, with inpname None
Looking at intput type float32, with inpname re
Generated result types SFloat(re)
Looking at intput type float32, with inpname im
Generated result types SFloat(im)
Generated result types STypes(SFloat(re), SFloat(im))
Generated result types SArray(power_quad_acc_output: STypes(SFloat(re), SFloat(im)): with lenvar power_quad_acc_n (=) )
Looking at intput type array(kiss_fft_cpx: with dims nfft (=) ), with inpname fout
Looking at intput type kiss_fft_cpx, with inpname None
Looking at intput type float32, with inpname r
Generated result types SFloat(r)
Looking at intput type float32, with inpname i
Generated result types SFloat(i)
Generated result types STypes(SFloat(r), SFloat(i))
Generated result types SArray(fout: STypes(SFloat(r), SFloat(i)): with lenvar nfft (=) )
Liveout types are SArray(fout: STypes(SFloat(r), SFloat(i)): with lenvar nfft (=) )
Looking at intput type array(complex_type: with dims power_quad_acc_n (=) ), with inpname power_quad_acc_output
Looking at intput type complex_type, with inpname None
Looking at intput type float32, with inpname re
Generated result types SFloat(re)
Looking at intput type float32, with inpname im
Generated result types SFloat(im)
Generated result types STypes(SFloat(re), SFloat(im))
Generated result types SArray(power_quad_acc_output: STypes(SFloat(re), SFloat(im)): with lenvar power_quad_acc_n (=) )
Variable name is SInt(nfft) (probability1.) 
Variable name is SArray(fin: STypes(SFloat(r), SFloat(i)): with lenvar nfft (=) ) (probability1.) 
Got potential dimvars nfft (=) 
Variable name is SArray(power_quad_acc_output: STypes(SFloat(re), SFloat(im)): with lenvar power_quad_acc_n (=) ) (probability1.) 
Variable name is SInt(nfft) (probability0.5) 
Variable name is SArray(fin: STypes(SFloat(r), SFloat(i)): with lenvar nfft (=) ) (probability0.5) 
Types are: 
(postbind: SArray(power_quad_acc_output: STypes(SFloat(re), SFloat(im)): with lenvar power_quad_acc_n (=) ) (probability1.) 
SInt(nfft) (probability0.5) 
SArray(fin: STypes(SFloat(r), SFloat(i)): with lenvar nfft (=) ) (probability0.5) )
(prebind: SInt(nfft) (probability1.) 
SArray(fin: STypes(SFloat(r), SFloat(i)): with lenvar nfft (=) ) (probability1.) )
Keys in typemap are fout, power_quad_acc_n, power_quad_acc_output, power_quad_acc_input, nfft, fin
fout, power_quad_acc_n, power_quad_acc_output, power_quad_acc_input, nfft, fin
fout, power_quad_acc_n, power_quad_acc_output, power_quad_acc_input, nfft, fin
fout, power_quad_acc_n, power_quad_acc_output, power_quad_acc_input, nfft, fin
Keys in typemap are fout, power_quad_acc_n, power_quad_acc_output, power_quad_acc_input, nfft, fin
Looking at tovar fout, r
Keys in typemap are fout, power_quad_acc_n, power_quad_acc_output, power_quad_acc_input, nfft, fin
Looking at tovar fout, i
Keys in typemap are fout, power_quad_acc_n, power_quad_acc_output, power_quad_acc_input, nfft, fin
Looking at tovar power_quad_acc_output, Annon
Keys in typemap are fout, power_quad_acc_n, power_quad_acc_output, power_quad_acc_input, nfft, fin
Looking at tovar power_quad_acc_n
Keys in typemap are fout, power_quad_acc_n, power_quad_acc_output, power_quad_acc_input, nfft, fin
Looking at tovar power_quad_acc_input, im
Keys in typemap are fout, power_quad_acc_n, power_quad_acc_output, power_quad_acc_input, nfft, fin
Looking at tovar power_quad_acc_input, re
Keys in typemap are fout, power_quad_acc_n, power_quad_acc_output, power_quad_acc_input, nfft, fin
Looking at tovar fout, r
Keys in typemap are fout, power_quad_acc_n, power_quad_acc_output, power_quad_acc_input, nfft, fin
Looking at tovar fout, i
Keys in typemap are fout, power_quad_acc_n, power_quad_acc_output, power_quad_acc_input, nfft, fin
Looking at tovar power_quad_acc_output, Annon
Keys in typemap are fout, power_quad_acc_n, power_quad_acc_output, power_quad_acc_input, nfft, fin
Looking at tovar power_quad_acc_n
Keys in typemap are fout, power_quad_acc_n, power_quad_acc_output, power_quad_acc_input, nfft, fin
Looking at tovar power_quad_acc_input, im
Keys in typemap are fout, power_quad_acc_n, power_quad_acc_output, power_quad_acc_input, nfft, fin
Looking at tovar power_quad_acc_input, re
Keys in typemap are fout, power_quad_acc_n, power_quad_acc_output, power_quad_acc_input, nfft, fin
Looking at tovar fout, r
Keys in typemap are fout, power_quad_acc_n, power_quad_acc_output, power_quad_acc_input, nfft, fin
Looking at tovar fout, i
Keys in typemap are fout, power_quad_acc_n, power_quad_acc_output, power_quad_acc_input, nfft, fin
Looking at tovar power_quad_acc_output, Annon
Keys in typemap are fout, power_quad_acc_n, power_quad_acc_output, power_quad_acc_input, nfft, fin
Looking at tovar power_quad_acc_n
Keys in typemap are fout, power_quad_acc_n, power_quad_acc_output, power_quad_acc_input, nfft, fin
Looking at tovar power_quad_acc_input, im
Keys in typemap are fout, power_quad_acc_n, power_quad_acc_output, power_quad_acc_input, nfft, fin
Looking at tovar power_quad_acc_input, re
Keys in typemap are fout, power_quad_acc_n, power_quad_acc_output, power_quad_acc_input, nfft, fin
Looking at tovar fout, r
Keys in typemap are fout, power_quad_acc_n, power_quad_acc_output, power_quad_acc_input, nfft, fin
Looking at tovar fout, i
Keys in typemap are fout, power_quad_acc_n, power_quad_acc_output, power_quad_acc_input, nfft, fin
Looking at tovar power_quad_acc_output, Annon
Keys in typemap are fout, power_quad_acc_n, power_quad_acc_output, power_quad_acc_input, nfft, fin
Looking at tovar power_quad_acc_n
Keys in typemap are fout, power_quad_acc_n, power_quad_acc_output, power_quad_acc_input, nfft, fin
Looking at tovar power_quad_acc_input, im
Keys in typemap are fout, power_quad_acc_n, power_quad_acc_output, power_quad_acc_input, nfft, fin
Looking at tovar power_quad_acc_input, re
Number of skeletons generated is 4
Getting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeNumber of conversion pairs generated is 4
Looking at GIR GIR: Define power_quad_acc_output
Uses: power_quad_acc_n
Defs: power_quad_acc_output.re,power_quad_acc_output.im
Assigns: 

Has unassed use power_quad_acc_n
Looking at GIR GIR: Define power_quad_acc_n
Uses: 
Defs: power_quad_acc_n
Assigns: 

Looking at GIR GIR: power_quad_acc_n = nfft
Uses: nfft
Defs: 
Assigns: power_quad_acc_n

Has undefed ass power_quad_acc_n
Looking at GIR GIR: Define power_quad_acc_input
Uses: power_quad_acc_n
Defs: power_quad_acc_input.re,power_quad_acc_input.im
Assigns: 

Has unassed use power_quad_acc_n
Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i2{
power_quad_acc_input[i2].im = fin[i2].i}
Uses: power_quad_acc_n,fin.i
Defs: 
Assigns: power_quad_acc_input.im

Has unassed use power_quad_acc_n
Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i3{
power_quad_acc_input[i3].re = fin[i3].r}
Uses: power_quad_acc_n,fin.r
Defs: 
Assigns: power_quad_acc_input.re

Has unassed use power_quad_acc_n
Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i4{
fout[i4].r = power_quad_acc_output[i4].im}
Uses: power_quad_acc_n,power_quad_acc_output.im
Defs: 
Assigns: fout.r

Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i5{
fout[i5].i = power_quad_acc_output[i5].re}
Uses: power_quad_acc_n,power_quad_acc_output.re
Defs: 
Assigns: fout.i

Looking at GIR GIR: free power_quad_acc_input
Uses: 
Defs: 
Assigns: 

Looking at GIR GIR: free power_quad_acc_output
Uses: 
Defs: 
Assigns: 

Looking at GIR GIR: free power_quad_acc_n
Uses: 
Defs: 
Assigns: 

Looking at GIR GIR: Define power_quad_acc_output
Uses: power_quad_acc_n
Defs: power_quad_acc_output.re,power_quad_acc_output.im
Assigns: 

Has unassed use power_quad_acc_n
Looking at GIR GIR: Define power_quad_acc_n
Uses: 
Defs: power_quad_acc_n
Assigns: 

Looking at GIR GIR: power_quad_acc_n = nfft
Uses: nfft
Defs: 
Assigns: power_quad_acc_n

Has undefed ass power_quad_acc_n
Looking at GIR GIR: Define power_quad_acc_input
Uses: power_quad_acc_n
Defs: power_quad_acc_input.re,power_quad_acc_input.im
Assigns: 

Has unassed use power_quad_acc_n
Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i7{
power_quad_acc_input[i7].im = fin[i7].i}
Uses: power_quad_acc_n,fin.i
Defs: 
Assigns: power_quad_acc_input.im

Has unassed use power_quad_acc_n
Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i8{
power_quad_acc_input[i8].re = fin[i8].r}
Uses: power_quad_acc_n,fin.r
Defs: 
Assigns: power_quad_acc_input.re

Has unassed use power_quad_acc_n
Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i9{
fout[i9].r = power_quad_acc_output[i9].re}
Uses: power_quad_acc_n,power_quad_acc_output.re
Defs: 
Assigns: fout.r

Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i10{
fout[i10].i = power_quad_acc_output[i10].im}
Uses: power_quad_acc_n,power_quad_acc_output.im
Defs: 
Assigns: fout.i

Looking at GIR GIR: free power_quad_acc_input
Uses: 
Defs: 
Assigns: 

Looking at GIR GIR: free power_quad_acc_output
Uses: 
Defs: 
Assigns: 

Looking at GIR GIR: free power_quad_acc_n
Uses: 
Defs: 
Assigns: 

Looking at GIR GIR: Define power_quad_acc_output
Uses: power_quad_acc_n
Defs: power_quad_acc_output.re,power_quad_acc_output.im
Assigns: 

Has unassed use power_quad_acc_n
Looking at GIR GIR: Define power_quad_acc_n
Uses: 
Defs: power_quad_acc_n
Assigns: 

Looking at GIR GIR: power_quad_acc_n = nfft
Uses: nfft
Defs: 
Assigns: power_quad_acc_n

Has undefed ass power_quad_acc_n
Looking at GIR GIR: Define power_quad_acc_input
Uses: power_quad_acc_n
Defs: power_quad_acc_input.re,power_quad_acc_input.im
Assigns: 

Has unassed use power_quad_acc_n
Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i12{
power_quad_acc_input[i12].im = fin[i12].r}
Uses: power_quad_acc_n,fin.r
Defs: 
Assigns: power_quad_acc_input.im

Has unassed use power_quad_acc_n
Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i13{
power_quad_acc_input[i13].re = fin[i13].i}
Uses: power_quad_acc_n,fin.i
Defs: 
Assigns: power_quad_acc_input.re

Has unassed use power_quad_acc_n
Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i14{
fout[i14].r = power_quad_acc_output[i14].im}
Uses: power_quad_acc_n,power_quad_acc_output.im
Defs: 
Assigns: fout.r

Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i15{
fout[i15].i = power_quad_acc_output[i15].re}
Uses: power_quad_acc_n,power_quad_acc_output.re
Defs: 
Assigns: fout.i

Looking at GIR GIR: free power_quad_acc_input
Uses: 
Defs: 
Assigns: 

Looking at GIR GIR: free power_quad_acc_output
Uses: 
Defs: 
Assigns: 

Looking at GIR GIR: free power_quad_acc_n
Uses: 
Defs: 
Assigns: 

Looking at GIR GIR: Define power_quad_acc_output
Uses: power_quad_acc_n
Defs: power_quad_acc_output.re,power_quad_acc_output.im
Assigns: 

Has unassed use power_quad_acc_n
Looking at GIR GIR: Define power_quad_acc_n
Uses: 
Defs: power_quad_acc_n
Assigns: 

Looking at GIR GIR: power_quad_acc_n = nfft
Uses: nfft
Defs: 
Assigns: power_quad_acc_n

Has undefed ass power_quad_acc_n
Looking at GIR GIR: Define power_quad_acc_input
Uses: power_quad_acc_n
Defs: power_quad_acc_input.re,power_quad_acc_input.im
Assigns: 

Has unassed use power_quad_acc_n
Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i17{
power_quad_acc_input[i17].im = fin[i17].r}
Uses: power_quad_acc_n,fin.r
Defs: 
Assigns: power_quad_acc_input.im

Has unassed use power_quad_acc_n
Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i18{
power_quad_acc_input[i18].re = fin[i18].i}
Uses: power_quad_acc_n,fin.i
Defs: 
Assigns: power_quad_acc_input.re

Has unassed use power_quad_acc_n
Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i19{
fout[i19].r = power_quad_acc_output[i19].re}
Uses: power_quad_acc_n,power_quad_acc_output.re
Defs: 
Assigns: fout.r

Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i20{
fout[i20].i = power_quad_acc_output[i20].im}
Uses: power_quad_acc_n,power_quad_acc_output.im
Defs: 
Assigns: fout.i

Looking at GIR GIR: free power_quad_acc_input
Uses: 
Defs: 
Assigns: 

Looking at GIR GIR: free power_quad_acc_output
Uses: 
Defs: 
Assigns: 

Looking at GIR GIR: free power_quad_acc_n
Uses: 
Defs: 
Assigns: 

Number of programs from these pairs is 4
Doing sub-struct assignment for member re
Doing sub-struct assignment for member im
Context is 
Dim length is power_quad_acc_n
Doing sub-struct assignment for member re
Doing sub-struct assignment for member im
Context is 
Dim length is power_quad_acc_n
Doing sub-struct assignment for member r
Doing sub-struct assignment for member i
Context is 
Dim length is nfft
Number of codes generated is 1
Number of codes built is 1
Generating tests for the 1 programs
Number of IO tests generated is 1
Time: 0.000181
AccTime: 0
Real responses generated
Warning: Accelerator failed on input (input file synthethizer_temps/io/1//1.json): accelerator bounds should be specified for better performance. 
For executable synthethizer_temps/1_exec, passed cound is 0 of 1 tests (0 are vacuous: luck pass is false) 
Starting post synthesis (1 programs)
===============================================
Working tests are in the source files for executables 
There were 0 working in total
Required compiler flags to build are: libs/clib/fft_synth_lib.co libs/clib/synthesizer.co -Ilibs -fsanitize=address -lfftw3 -lfftw3f
Done!
WARNING: Set --only-test and --skip-build may lead to inconsistent results
(--only-test renumbers executables)
Loading specifications...
Synthesizing...
Starting synthesis!
Generated the dimensions
Have 1 possible annotated typemaps
Looking at intput type array(cmplx: with dims n (=) ), with inpname input
Looking at intput type cmplx, with inpname None
Looking at intput type float32, with inpname real
Generated result types SFloat(real)
Looking at intput type float32, with inpname imag
Generated result types SFloat(imag)
Generated result types STypes(SFloat(real), SFloat(imag))
Generated result types SArray(input: STypes(SFloat(real), SFloat(imag)): with lenvar n (=) )
Looking at intput type int32, with inpname n
Generated result types SInt(n)
Looking at intput type array(complex_type: with dims power_quad_acc_n (=) ), with inpname power_quad_acc_input
Looking at intput type complex_type, with inpname None
Looking at intput type float32, with inpname re
Generated result types SFloat(re)
Looking at intput type float32, with inpname im
Generated result types SFloat(im)
Generated result types STypes(SFloat(re), SFloat(im))
Generated result types SArray(power_quad_acc_input: STypes(SFloat(re), SFloat(im)): with lenvar power_quad_acc_n (=) )
Looking at intput type int32, with inpname power_quad_acc_n
Generated result types SInt(power_quad_acc_n)
Looking at intput type array(complex_type: with dims power_quad_acc_n (=) ), with inpname power_quad_acc_output
Looking at intput type complex_type, with inpname None
Looking at intput type float32, with inpname re
Generated result types SFloat(re)
Looking at intput type float32, with inpname im
Generated result types SFloat(im)
Generated result types STypes(SFloat(re), SFloat(im))
Generated result types SArray(power_quad_acc_output: STypes(SFloat(re), SFloat(im)): with lenvar power_quad_acc_n (=) )
Looking at intput type array(cmplx: with dims n (=) ), with inpname output
Looking at intput type cmplx, with inpname None
Looking at intput type float32, with inpname real
Generated result types SFloat(real)
Looking at intput type float32, with inpname imag
Generated result types SFloat(imag)
Generated result types STypes(SFloat(real), SFloat(imag))
Generated result types SArray(output: STypes(SFloat(real), SFloat(imag)): with lenvar n (=) )
Liveout types are SArray(output: STypes(SFloat(real), SFloat(imag)): with lenvar n (=) )
Looking at intput type array(complex_type: with dims power_quad_acc_n (=) ), with inpname power_quad_acc_output
Looking at intput type complex_type, with inpname None
Looking at intput type float32, with inpname re
Generated result types SFloat(re)
Looking at intput type float32, with inpname im
Generated result types SFloat(im)
Generated result types STypes(SFloat(re), SFloat(im))
Generated result types SArray(power_quad_acc_output: STypes(SFloat(re), SFloat(im)): with lenvar power_quad_acc_n (=) )
Variable name is SArray(input: STypes(SFloat(real), SFloat(imag)): with lenvar n (=) ) (probability1.) 
Variable name is SInt(n) (probability1.) 
Got potential dimvars n (=) 
Variable name is SArray(power_quad_acc_output: STypes(SFloat(re), SFloat(im)): with lenvar power_quad_acc_n (=) ) (probability1.) 
Variable name is SArray(input: STypes(SFloat(real), SFloat(imag)): with lenvar n (=) ) (probability0.5) 
Variable name is SInt(n) (probability0.5) 
Types are: 
(postbind: SArray(power_quad_acc_output: STypes(SFloat(re), SFloat(im)): with lenvar power_quad_acc_n (=) ) (probability1.) 
SArray(input: STypes(SFloat(real), SFloat(imag)): with lenvar n (=) ) (probability0.5) 
SInt(n) (probability0.5) )
(prebind: SArray(input: STypes(SFloat(real), SFloat(imag)): with lenvar n (=) ) (probability1.) 
SInt(n) (probability1.) )
Keys in typemap are output, power_quad_acc_n, n, power_quad_acc_output, power_quad_acc_input, input
output, power_quad_acc_n, n, power_quad_acc_output, power_quad_acc_input, input
output, power_quad_acc_n, n, power_quad_acc_output, power_quad_acc_input, input
output, power_quad_acc_n, n, power_quad_acc_output, power_quad_acc_input, input
Keys in typemap are output, power_quad_acc_n, n, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar output, imag
Keys in typemap are output, power_quad_acc_n, n, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar output, real
Keys in typemap are output, power_quad_acc_n, n, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_output, Annon
Keys in typemap are output, power_quad_acc_n, n, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_n
Keys in typemap are output, power_quad_acc_n, n, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_input, im
Keys in typemap are output, power_quad_acc_n, n, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_input, re
Keys in typemap are output, power_quad_acc_n, n, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar output, imag
Keys in typemap are output, power_quad_acc_n, n, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar output, real
Keys in typemap are output, power_quad_acc_n, n, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_output, Annon
Keys in typemap are output, power_quad_acc_n, n, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_n
Keys in typemap are output, power_quad_acc_n, n, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_input, im
Keys in typemap are output, power_quad_acc_n, n, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_input, re
Keys in typemap are output, power_quad_acc_n, n, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar output, imag
Keys in typemap are output, power_quad_acc_n, n, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar output, real
Keys in typemap are output, power_quad_acc_n, n, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_output, Annon
Keys in typemap are output, power_quad_acc_n, n, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_n
Keys in typemap are output, power_quad_acc_n, n, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_input, im
Keys in typemap are output, power_quad_acc_n, n, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_input, re
Keys in typemap are output, power_quad_acc_n, n, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar output, imag
Keys in typemap are output, power_quad_acc_n, n, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar output, real
Keys in typemap are output, power_quad_acc_n, n, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_output, Annon
Keys in typemap are output, power_quad_acc_n, n, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_n
Keys in typemap are output, power_quad_acc_n, n, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_input, im
Keys in typemap are output, power_quad_acc_n, n, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_input, re
Number of skeletons generated is 4
Getting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeNumber of conversion pairs generated is 4
Looking at GIR GIR: Define power_quad_acc_output
Uses: power_quad_acc_n
Defs: power_quad_acc_output.re,power_quad_acc_output.im
Assigns: 

Has unassed use power_quad_acc_n
Looking at GIR GIR: Define power_quad_acc_n
Uses: 
Defs: power_quad_acc_n
Assigns: 

Looking at GIR GIR: power_quad_acc_n = n
Uses: n
Defs: 
Assigns: power_quad_acc_n

Has undefed ass power_quad_acc_n
Looking at GIR GIR: Define power_quad_acc_input
Uses: power_quad_acc_n
Defs: power_quad_acc_input.re,power_quad_acc_input.im
Assigns: 

Has unassed use power_quad_acc_n
Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i2{
power_quad_acc_input[i2].im = input[i2].imag}
Uses: power_quad_acc_n,input.imag
Defs: 
Assigns: power_quad_acc_input.im

Has unassed use power_quad_acc_n
Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i3{
power_quad_acc_input[i3].re = input[i3].real}
Uses: power_quad_acc_n,input.real
Defs: 
Assigns: power_quad_acc_input.re

Has unassed use power_quad_acc_n
Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i4{
output[i4].imag = power_quad_acc_output[i4].im}
Uses: power_quad_acc_n,power_quad_acc_output.im
Defs: 
Assigns: output.imag

Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i5{
output[i5].real = power_quad_acc_output[i5].re}
Uses: power_quad_acc_n,power_quad_acc_output.re
Defs: 
Assigns: output.real

Looking at GIR GIR: free power_quad_acc_input
Uses: 
Defs: 
Assigns: 

Looking at GIR GIR: free power_quad_acc_output
Uses: 
Defs: 
Assigns: 

Looking at GIR GIR: free power_quad_acc_n
Uses: 
Defs: 
Assigns: 

Looking at GIR GIR: Define power_quad_acc_output
Uses: power_quad_acc_n
Defs: power_quad_acc_output.re,power_quad_acc_output.im
Assigns: 

Has unassed use power_quad_acc_n
Looking at GIR GIR: Define power_quad_acc_n
Uses: 
Defs: power_quad_acc_n
Assigns: 

Looking at GIR GIR: power_quad_acc_n = n
Uses: n
Defs: 
Assigns: power_quad_acc_n

Has undefed ass power_quad_acc_n
Looking at GIR GIR: Define power_quad_acc_input
Uses: power_quad_acc_n
Defs: power_quad_acc_input.re,power_quad_acc_input.im
Assigns: 

Has unassed use power_quad_acc_n
Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i7{
power_quad_acc_input[i7].im = input[i7].imag}
Uses: power_quad_acc_n,input.imag
Defs: 
Assigns: power_quad_acc_input.im

Has unassed use power_quad_acc_n
Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i8{
power_quad_acc_input[i8].re = input[i8].real}
Uses: power_quad_acc_n,input.real
Defs: 
Assigns: power_quad_acc_input.re

Has unassed use power_quad_acc_n
Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i9{
output[i9].imag = power_quad_acc_output[i9].re}
Uses: power_quad_acc_n,power_quad_acc_output.re
Defs: 
Assigns: output.imag

Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i10{
output[i10].real = power_quad_acc_output[i10].im}
Uses: power_quad_acc_n,power_quad_acc_output.im
Defs: 
Assigns: output.real

Looking at GIR GIR: free power_quad_acc_input
Uses: 
Defs: 
Assigns: 

Looking at GIR GIR: free power_quad_acc_output
Uses: 
Defs: 
Assigns: 

Looking at GIR GIR: free power_quad_acc_n
Uses: 
Defs: 
Assigns: 

Looking at GIR GIR: Define power_quad_acc_output
Uses: power_quad_acc_n
Defs: power_quad_acc_output.re,power_quad_acc_output.im
Assigns: 

Has unassed use power_quad_acc_n
Looking at GIR GIR: Define power_quad_acc_n
Uses: 
Defs: power_quad_acc_n
Assigns: 

Looking at GIR GIR: power_quad_acc_n = n
Uses: n
Defs: 
Assigns: power_quad_acc_n

Has undefed ass power_quad_acc_n
Looking at GIR GIR: Define power_quad_acc_input
Uses: power_quad_acc_n
Defs: power_quad_acc_input.re,power_quad_acc_input.im
Assigns: 

Has unassed use power_quad_acc_n
Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i12{
power_quad_acc_input[i12].im = input[i12].real}
Uses: power_quad_acc_n,input.real
Defs: 
Assigns: power_quad_acc_input.im

Has unassed use power_quad_acc_n
Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i13{
power_quad_acc_input[i13].re = input[i13].imag}
Uses: power_quad_acc_n,input.imag
Defs: 
Assigns: power_quad_acc_input.re

Has unassed use power_quad_acc_n
Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i14{
output[i14].imag = power_quad_acc_output[i14].im}
Uses: power_quad_acc_n,power_quad_acc_output.im
Defs: 
Assigns: output.imag

Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i15{
output[i15].real = power_quad_acc_output[i15].re}
Uses: power_quad_acc_n,power_quad_acc_output.re
Defs: 
Assigns: output.real

Looking at GIR GIR: free power_quad_acc_input
Uses: 
Defs: 
Assigns: 

Looking at GIR GIR: free power_quad_acc_output
Uses: 
Defs: 
Assigns: 

Looking at GIR GIR: free power_quad_acc_n
Uses: 
Defs: 
Assigns: 

Looking at GIR GIR: Define power_quad_acc_output
Uses: power_quad_acc_n
Defs: power_quad_acc_output.re,power_quad_acc_output.im
Assigns: 

Has unassed use power_quad_acc_n
Looking at GIR GIR: Define power_quad_acc_n
Uses: 
Defs: power_quad_acc_n
Assigns: 

Looking at GIR GIR: power_quad_acc_n = n
Uses: n
Defs: 
Assigns: power_quad_acc_n

Has undefed ass power_quad_acc_n
Looking at GIR GIR: Define power_quad_acc_input
Uses: power_quad_acc_n
Defs: power_quad_acc_input.re,power_quad_acc_input.im
Assigns: 

Has unassed use power_quad_acc_n
Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i17{
power_quad_acc_input[i17].im = input[i17].real}
Uses: power_quad_acc_n,input.real
Defs: 
Assigns: power_quad_acc_input.im

Has unassed use power_quad_acc_n
Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i18{
power_quad_acc_input[i18].re = input[i18].imag}
Uses: power_quad_acc_n,input.imag
Defs: 
Assigns: power_quad_acc_input.re

Has unassed use power_quad_acc_n
Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i19{
output[i19].imag = power_quad_acc_output[i19].re}
Uses: power_quad_acc_n,power_quad_acc_output.re
Defs: 
Assigns: output.imag

Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i20{
output[i20].real = power_quad_acc_output[i20].im}
Uses: power_quad_acc_n,power_quad_acc_output.im
Defs: 
Assigns: output.real

Looking at GIR GIR: free power_quad_acc_input
Uses: 
Defs: 
Assigns: 

Looking at GIR GIR: free power_quad_acc_output
Uses: 
Defs: 
Assigns: 

Looking at GIR GIR: free power_quad_acc_n
Uses: 
Defs: 
Assigns: 

Number of programs from these pairs is 4
Doing sub-struct assignment for member re
Doing sub-struct assignment for member im
Context is 
Dim length is power_quad_acc_n
Doing sub-struct assignment for member re
Doing sub-struct assignment for member im
Context is 
Dim length is power_quad_acc_n
Doing sub-struct assignment for member real
Doing sub-struct assignment for member imag
Context is 
Dim length is n
Number of codes generated is 1
Number of codes built is 1
Generating tests for the 1 programs
Number of IO tests generated is 1
Time: 8.7e-05
AccTime: 0
Real responses generated
Warning: Accelerator failed on input (input file synthethizer_temps/io/1//1.json): accelerator bounds should be specified for better performance. 
For executable synthethizer_temps/1_exec, passed cound is 0 of 1 tests (0 are vacuous: luck pass is false) 
Starting post synthesis (1 programs)
===============================================
Working tests are in the source files for executables 
There were 0 working in total
Required compiler flags to build are: libs/clib/fft_synth_lib.co libs/clib/synthesizer.co -Ilibs -fsanitize=address -lfftw3 -lfftw3f
Done!
WARNING: Set --only-test and --skip-build may lead to inconsistent results
(--only-test renumbers executables)
Loading specifications...
Synthesizing...
Starting synthesis!
Generated the dimensions
Have 1 possible annotated typemaps
Looking at intput type array(complex: with dims N (=) ), with inpname x
Looking at intput type complex, with inpname None
Looking at intput type float64, with inpname re
Generated result types SFloat(re)
Looking at intput type float64, with inpname im
Generated result types SFloat(im)
Generated result types STypes(SFloat(re), SFloat(im))
Generated result types SArray(x: STypes(SFloat(re), SFloat(im)): with lenvar N (=) )
Looking at intput type int32, with inpname N
Generated result types SInt(N)
Looking at intput type array(complex_type: with dims power_quad_acc_n (=) ), with inpname power_quad_acc_input
Looking at intput type complex_type, with inpname None
Looking at intput type float32, with inpname re
Generated result types SFloat(re)
Looking at intput type float32, with inpname im
Generated result types SFloat(im)
Generated result types STypes(SFloat(re), SFloat(im))
Generated result types SArray(power_quad_acc_input: STypes(SFloat(re), SFloat(im)): with lenvar power_quad_acc_n (=) )
Looking at intput type int32, with inpname power_quad_acc_n
Generated result types SInt(power_quad_acc_n)
Looking at intput type array(complex_type: with dims power_quad_acc_n (=) ), with inpname power_quad_acc_output
Looking at intput type complex_type, with inpname None
Looking at intput type float32, with inpname re
Generated result types SFloat(re)
Looking at intput type float32, with inpname im
Generated result types SFloat(im)
Generated result types STypes(SFloat(re), SFloat(im))
Generated result types SArray(power_quad_acc_output: STypes(SFloat(re), SFloat(im)): with lenvar power_quad_acc_n (=) )
Looking at intput type array(complex: with dims N (=) ), with inpname returnv
Looking at intput type complex, with inpname None
Looking at intput type float64, with inpname re
Generated result types SFloat(re)
Looking at intput type float64, with inpname im
Generated result types SFloat(im)
Generated result types STypes(SFloat(re), SFloat(im))
Generated result types SArray(returnv: STypes(SFloat(re), SFloat(im)): with lenvar N (=) )
Liveout types are SArray(returnv: STypes(SFloat(re), SFloat(im)): with lenvar N (=) )
Looking at intput type array(complex_type: with dims power_quad_acc_n (=) ), with inpname power_quad_acc_output
Looking at intput type complex_type, with inpname None
Looking at intput type float32, with inpname re
Generated result types SFloat(re)
Looking at intput type float32, with inpname im
Generated result types SFloat(im)
Generated result types STypes(SFloat(re), SFloat(im))
Generated result types SArray(power_quad_acc_output: STypes(SFloat(re), SFloat(im)): with lenvar power_quad_acc_n (=) )
Variable name is SArray(x: STypes(SFloat(re), SFloat(im)): with lenvar N (=) ) (probability1.) 
Variable name is SInt(N) (probability1.) 
Got potential dimvars N (=) 
Variable name is SArray(power_quad_acc_output: STypes(SFloat(re), SFloat(im)): with lenvar power_quad_acc_n (=) ) (probability1.) 
Variable name is SArray(x: STypes(SFloat(re), SFloat(im)): with lenvar N (=) ) (probability0.5) 
Variable name is SInt(N) (probability0.5) 
Types are: 
(postbind: SArray(power_quad_acc_output: STypes(SFloat(re), SFloat(im)): with lenvar power_quad_acc_n (=) ) (probability1.) 
SArray(x: STypes(SFloat(re), SFloat(im)): with lenvar N (=) ) (probability0.5) 
SInt(N) (probability0.5) )
(prebind: SArray(x: STypes(SFloat(re), SFloat(im)): with lenvar N (=) ) (probability1.) 
SInt(N) (probability1.) )
Keys in typemap are returnv, N, power_quad_acc_n, x, power_quad_acc_output, power_quad_acc_input
returnv, N, power_quad_acc_n, x, power_quad_acc_output, power_quad_acc_input
returnv, N, power_quad_acc_n, x, power_quad_acc_output, power_quad_acc_input
returnv, N, power_quad_acc_n, x, power_quad_acc_output, power_quad_acc_input
Keys in typemap are returnv, N, power_quad_acc_n, x, power_quad_acc_output, power_quad_acc_input
Looking at tovar returnv, im
Keys in typemap are returnv, N, power_quad_acc_n, x, power_quad_acc_output, power_quad_acc_input
Looking at tovar returnv, re
Keys in typemap are returnv, N, power_quad_acc_n, x, power_quad_acc_output, power_quad_acc_input
Looking at tovar power_quad_acc_output, Annon
Keys in typemap are returnv, N, power_quad_acc_n, x, power_quad_acc_output, power_quad_acc_input
Looking at tovar power_quad_acc_n
Keys in typemap are returnv, N, power_quad_acc_n, x, power_quad_acc_output, power_quad_acc_input
Looking at tovar power_quad_acc_input, im
Keys in typemap are returnv, N, power_quad_acc_n, x, power_quad_acc_output, power_quad_acc_input
Looking at tovar power_quad_acc_input, re
Keys in typemap are returnv, N, power_quad_acc_n, x, power_quad_acc_output, power_quad_acc_input
Looking at tovar returnv, im
Keys in typemap are returnv, N, power_quad_acc_n, x, power_quad_acc_output, power_quad_acc_input
Looking at tovar returnv, re
Keys in typemap are returnv, N, power_quad_acc_n, x, power_quad_acc_output, power_quad_acc_input
Looking at tovar power_quad_acc_output, Annon
Keys in typemap are returnv, N, power_quad_acc_n, x, power_quad_acc_output, power_quad_acc_input
Looking at tovar power_quad_acc_n
Keys in typemap are returnv, N, power_quad_acc_n, x, power_quad_acc_output, power_quad_acc_input
Looking at tovar power_quad_acc_input, im
Keys in typemap are returnv, N, power_quad_acc_n, x, power_quad_acc_output, power_quad_acc_input
Looking at tovar power_quad_acc_input, re
Keys in typemap are returnv, N, power_quad_acc_n, x, power_quad_acc_output, power_quad_acc_input
Looking at tovar returnv, im
Keys in typemap are returnv, N, power_quad_acc_n, x, power_quad_acc_output, power_quad_acc_input
Looking at tovar returnv, re
Keys in typemap are returnv, N, power_quad_acc_n, x, power_quad_acc_output, power_quad_acc_input
Looking at tovar power_quad_acc_output, Annon
Keys in typemap are returnv, N, power_quad_acc_n, x, power_quad_acc_output, power_quad_acc_input
Looking at tovar power_quad_acc_n
Keys in typemap are returnv, N, power_quad_acc_n, x, power_quad_acc_output, power_quad_acc_input
Looking at tovar power_quad_acc_input, im
Keys in typemap are returnv, N, power_quad_acc_n, x, power_quad_acc_output, power_quad_acc_input
Looking at tovar power_quad_acc_input, re
Keys in typemap are returnv, N, power_quad_acc_n, x, power_quad_acc_output, power_quad_acc_input
Looking at tovar returnv, im
Keys in typemap are returnv, N, power_quad_acc_n, x, power_quad_acc_output, power_quad_acc_input
Looking at tovar returnv, re
Keys in typemap are returnv, N, power_quad_acc_n, x, power_quad_acc_output, power_quad_acc_input
Looking at tovar power_quad_acc_output, Annon
Keys in typemap are returnv, N, power_quad_acc_n, x, power_quad_acc_output, power_quad_acc_input
Looking at tovar power_quad_acc_n
Keys in typemap are returnv, N, power_quad_acc_n, x, power_quad_acc_output, power_quad_acc_input
Looking at tovar power_quad_acc_input, im
Keys in typemap are returnv, N, power_quad_acc_n, x, power_quad_acc_output, power_quad_acc_input
Looking at tovar power_quad_acc_input, re
Number of skeletons generated is 4
Getting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeNumber of conversion pairs generated is 4
Looking at GIR GIR: Define power_quad_acc_output
Uses: power_quad_acc_n
Defs: power_quad_acc_output.re,power_quad_acc_output.im
Assigns: 

Has unassed use power_quad_acc_n
Looking at GIR GIR: Define power_quad_acc_n
Uses: 
Defs: power_quad_acc_n
Assigns: 

Looking at GIR GIR: power_quad_acc_n = N
Uses: N
Defs: 
Assigns: power_quad_acc_n

Has undefed ass power_quad_acc_n
Looking at GIR GIR: Define power_quad_acc_input
Uses: power_quad_acc_n
Defs: power_quad_acc_input.re,power_quad_acc_input.im
Assigns: 

Has unassed use power_quad_acc_n
Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i2{
power_quad_acc_input[i2].im = x[i2].im}
Uses: power_quad_acc_n,x.im
Defs: 
Assigns: power_quad_acc_input.im

Has unassed use power_quad_acc_n
Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i3{
power_quad_acc_input[i3].re = x[i3].re}
Uses: power_quad_acc_n,x.re
Defs: 
Assigns: power_quad_acc_input.re

Has unassed use power_quad_acc_n
Looking at GIR GIR: EscapingDefine(UseMalloc) returnv
Uses: N
Defs: returnv.re,returnv.im
Assigns: 

Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i4{
returnv[i4].im = power_quad_acc_output[i4].im}
Uses: power_quad_acc_n,power_quad_acc_output.im
Defs: 
Assigns: returnv.im

Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i5{
returnv[i5].re = power_quad_acc_output[i5].re}
Uses: power_quad_acc_n,power_quad_acc_output.re
Defs: 
Assigns: returnv.re

Looking at GIR GIR: free power_quad_acc_input
Uses: 
Defs: 
Assigns: 

Looking at GIR GIR: free power_quad_acc_output
Uses: 
Defs: 
Assigns: 

Looking at GIR GIR: free power_quad_acc_n
Uses: 
Defs: 
Assigns: 

Looking at GIR GIR: return returnv
Uses: returnv.re,returnv.im
Defs: 
Assigns: 

Has unassed use returnv.re
Looking at GIR GIR: Define power_quad_acc_output
Uses: power_quad_acc_n
Defs: power_quad_acc_output.re,power_quad_acc_output.im
Assigns: 

Has unassed use power_quad_acc_n
Looking at GIR GIR: Define power_quad_acc_n
Uses: 
Defs: power_quad_acc_n
Assigns: 

Looking at GIR GIR: power_quad_acc_n = N
Uses: N
Defs: 
Assigns: power_quad_acc_n

Has undefed ass power_quad_acc_n
Looking at GIR GIR: Define power_quad_acc_input
Uses: power_quad_acc_n
Defs: power_quad_acc_input.re,power_quad_acc_input.im
Assigns: 

Has unassed use power_quad_acc_n
Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i7{
power_quad_acc_input[i7].im = x[i7].im}
Uses: power_quad_acc_n,x.im
Defs: 
Assigns: power_quad_acc_input.im

Has unassed use power_quad_acc_n
Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i8{
power_quad_acc_input[i8].re = x[i8].re}
Uses: power_quad_acc_n,x.re
Defs: 
Assigns: power_quad_acc_input.re

Has unassed use power_quad_acc_n
Looking at GIR GIR: EscapingDefine(UseMalloc) returnv
Uses: N
Defs: returnv.re,returnv.im
Assigns: 

Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i9{
returnv[i9].im = power_quad_acc_output[i9].re}
Uses: power_quad_acc_n,power_quad_acc_output.re
Defs: 
Assigns: returnv.im

Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i10{
returnv[i10].re = power_quad_acc_output[i10].im}
Uses: power_quad_acc_n,power_quad_acc_output.im
Defs: 
Assigns: returnv.re

Looking at GIR GIR: free power_quad_acc_input
Uses: 
Defs: 
Assigns: 

Looking at GIR GIR: free power_quad_acc_output
Uses: 
Defs: 
Assigns: 

Looking at GIR GIR: free power_quad_acc_n
Uses: 
Defs: 
Assigns: 

Looking at GIR GIR: return returnv
Uses: returnv.re,returnv.im
Defs: 
Assigns: 

Has unassed use returnv.re
Looking at GIR GIR: Define power_quad_acc_output
Uses: power_quad_acc_n
Defs: power_quad_acc_output.re,power_quad_acc_output.im
Assigns: 

Has unassed use power_quad_acc_n
Looking at GIR GIR: Define power_quad_acc_n
Uses: 
Defs: power_quad_acc_n
Assigns: 

Looking at GIR GIR: power_quad_acc_n = N
Uses: N
Defs: 
Assigns: power_quad_acc_n

Has undefed ass power_quad_acc_n
Looking at GIR GIR: Define power_quad_acc_input
Uses: power_quad_acc_n
Defs: power_quad_acc_input.re,power_quad_acc_input.im
Assigns: 

Has unassed use power_quad_acc_n
Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i12{
power_quad_acc_input[i12].im = x[i12].re}
Uses: power_quad_acc_n,x.re
Defs: 
Assigns: power_quad_acc_input.im

Has unassed use power_quad_acc_n
Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i13{
power_quad_acc_input[i13].re = x[i13].im}
Uses: power_quad_acc_n,x.im
Defs: 
Assigns: power_quad_acc_input.re

Has unassed use power_quad_acc_n
Looking at GIR GIR: EscapingDefine(UseMalloc) returnv
Uses: N
Defs: returnv.re,returnv.im
Assigns: 

Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i14{
returnv[i14].im = power_quad_acc_output[i14].im}
Uses: power_quad_acc_n,power_quad_acc_output.im
Defs: 
Assigns: returnv.im

Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i15{
returnv[i15].re = power_quad_acc_output[i15].re}
Uses: power_quad_acc_n,power_quad_acc_output.re
Defs: 
Assigns: returnv.re

Looking at GIR GIR: free power_quad_acc_input
Uses: 
Defs: 
Assigns: 

Looking at GIR GIR: free power_quad_acc_output
Uses: 
Defs: 
Assigns: 

Looking at GIR GIR: free power_quad_acc_n
Uses: 
Defs: 
Assigns: 

Looking at GIR GIR: return returnv
Uses: returnv.re,returnv.im
Defs: 
Assigns: 

Has unassed use returnv.re
Looking at GIR GIR: Define power_quad_acc_output
Uses: power_quad_acc_n
Defs: power_quad_acc_output.re,power_quad_acc_output.im
Assigns: 

Has unassed use power_quad_acc_n
Looking at GIR GIR: Define power_quad_acc_n
Uses: 
Defs: power_quad_acc_n
Assigns: 

Looking at GIR GIR: power_quad_acc_n = N
Uses: N
Defs: 
Assigns: power_quad_acc_n

Has undefed ass power_quad_acc_n
Looking at GIR GIR: Define power_quad_acc_input
Uses: power_quad_acc_n
Defs: power_quad_acc_input.re,power_quad_acc_input.im
Assigns: 

Has unassed use power_quad_acc_n
Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i17{
power_quad_acc_input[i17].im = x[i17].re}
Uses: power_quad_acc_n,x.re
Defs: 
Assigns: power_quad_acc_input.im

Has unassed use power_quad_acc_n
Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i18{
power_quad_acc_input[i18].re = x[i18].im}
Uses: power_quad_acc_n,x.im
Defs: 
Assigns: power_quad_acc_input.re

Has unassed use power_quad_acc_n
Looking at GIR GIR: EscapingDefine(UseMalloc) returnv
Uses: N
Defs: returnv.re,returnv.im
Assigns: 

Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i19{
returnv[i19].im = power_quad_acc_output[i19].re}
Uses: power_quad_acc_n,power_quad_acc_output.re
Defs: 
Assigns: returnv.im

Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i20{
returnv[i20].re = power_quad_acc_output[i20].im}
Uses: power_quad_acc_n,power_quad_acc_output.im
Defs: 
Assigns: returnv.re

Looking at GIR GIR: free power_quad_acc_input
Uses: 
Defs: 
Assigns: 

Looking at GIR GIR: free power_quad_acc_output
Uses: 
Defs: 
Assigns: 

Looking at GIR GIR: free power_quad_acc_n
Uses: 
Defs: 
Assigns: 

Looking at GIR GIR: return returnv
Uses: returnv.re,returnv.im
Defs: 
Assigns: 

Has unassed use returnv.re
Number of programs from these pairs is 4
Doing sub-struct assignment for member re
Doing sub-struct assignment for member im
Context is 
Dim length is power_quad_acc_n
Doing sub-struct assignment for member re
Doing sub-struct assignment for member im
Context is 
Dim length is power_quad_acc_n
Doing sub-struct assignment for member re
Doing sub-struct assignment for member im
Context is 
Dim length is N
Number of codes generated is 1
Number of codes built is 1
Generating tests for the 1 programs
Number of IO tests generated is 1
Time: 0.040338
AccTime: 0
Real responses generated
Warning: Accelerator failed on input (input file synthethizer_temps/io/1//1.json): accelerator bounds should be specified for better performance. 
For executable synthethizer_temps/1_exec, passed cound is 0 of 1 tests (0 are vacuous: luck pass is false) 
Starting post synthesis (1 programs)
===============================================
Working tests are in the source files for executables 
There were 0 working in total
Required compiler flags to build are: libs/clib/fft_synth_lib.co libs/clib/synthesizer.co -Ilibs -fsanitize=address -lfftw3 -lfftw3f
Done!
WARNING: Set --only-test and --skip-build may lead to inconsistent results
(--only-test renumbers executables)
Loading specifications...
WARNING: Set --only-test and --skip-build may lead to inconsistent results
(--only-test renumbers executables)
Loading specifications...
Synthesizing...
Starting synthesis!
Generated the dimensions
Have 1 possible annotated typemaps
Looking at intput type array(_complex_double_: with dims N (=) ), with inpname x
Looking at intput type _complex_double_, with inpname None
Looking at intput type float64, with inpname re
Generated result types SFloat(re)
Looking at intput type float64, with inpname im
Generated result types SFloat(im)
Generated result types STypes(SFloat(re), SFloat(im))
Generated result types SArray(x: STypes(SFloat(re), SFloat(im)): with lenvar N (=) )
Looking at intput type int32, with inpname N
Generated result types SInt(N)
Looking at intput type array(complex_type: with dims power_quad_acc_n (=) ), with inpname power_quad_acc_input
Looking at intput type complex_type, with inpname None
Looking at intput type float32, with inpname re
Generated result types SFloat(re)
Looking at intput type float32, with inpname im
Generated result types SFloat(im)
Generated result types STypes(SFloat(re), SFloat(im))
Generated result types SArray(power_quad_acc_input: STypes(SFloat(re), SFloat(im)): with lenvar power_quad_acc_n (=) )
Looking at intput type int32, with inpname power_quad_acc_n
Generated result types SInt(power_quad_acc_n)
Looking at intput type array(complex_type: with dims power_quad_acc_n (=) ), with inpname power_quad_acc_output
Looking at intput type complex_type, with inpname None
Looking at intput type float32, with inpname re
Generated result types SFloat(re)
Looking at intput type float32, with inpname im
Generated result types SFloat(im)
Generated result types STypes(SFloat(re), SFloat(im))
Generated result types SArray(power_quad_acc_output: STypes(SFloat(re), SFloat(im)): with lenvar power_quad_acc_n (=) )
Looking at intput type array(_complex_double_: with dims N (=) ), with inpname returnvar
Looking at intput type _complex_double_, with inpname None
Looking at intput type float64, with inpname re
Generated result types SFloat(re)
Looking at intput type float64, with inpname im
Generated result types SFloat(im)
Generated result types STypes(SFloat(re), SFloat(im))
Generated result types SArray(returnvar: STypes(SFloat(re), SFloat(im)): with lenvar N (=) )
Liveout types are SArray(returnvar: STypes(SFloat(re), SFloat(im)): with lenvar N (=) )
Looking at intput type array(complex_type: with dims power_quad_acc_n (=) ), with inpname power_quad_acc_output
Looking at intput type complex_type, with inpname None
Looking at intput type float32, with inpname re
Generated result types SFloat(re)
Looking at intput type float32, with inpname im
Generated result types SFloat(im)
Generated result types STypes(SFloat(re), SFloat(im))
Generated result types SArray(power_quad_acc_output: STypes(SFloat(re), SFloat(im)): with lenvar power_quad_acc_n (=) )
Variable name is SArray(x: STypes(SFloat(re), SFloat(im)): with lenvar N (=) ) (probability1.) 
Variable name is SInt(N) (probability1.) 
Got potential dimvars N (=) 
Variable name is SArray(power_quad_acc_output: STypes(SFloat(re), SFloat(im)): with lenvar power_quad_acc_n (=) ) (probability1.) 
Variable name is SArray(x: STypes(SFloat(re), SFloat(im)): with lenvar N (=) ) (probability0.5) 
Variable name is SInt(N) (probability0.5) 
Types are: 
(postbind: SArray(power_quad_acc_output: STypes(SFloat(re), SFloat(im)): with lenvar power_quad_acc_n (=) ) (probability1.) 
SArray(x: STypes(SFloat(re), SFloat(im)): with lenvar N (=) ) (probability0.5) 
SInt(N) (probability0.5) )
(prebind: SArray(x: STypes(SFloat(re), SFloat(im)): with lenvar N (=) ) (probability1.) 
SInt(N) (probability1.) )
Keys in typemap are N, returnvar, power_quad_acc_n, x, power_quad_acc_output, power_quad_acc_input
N, returnvar, power_quad_acc_n, x, power_quad_acc_output, power_quad_acc_input
N, returnvar, power_quad_acc_n, x, power_quad_acc_output, power_quad_acc_input
N, returnvar, power_quad_acc_n, x, power_quad_acc_output, power_quad_acc_input
Keys in typemap are N, returnvar, power_quad_acc_n, x, power_quad_acc_output, power_quad_acc_input
Looking at tovar returnvar, im
Keys in typemap are N, returnvar, power_quad_acc_n, x, power_quad_acc_output, power_quad_acc_input
Looking at tovar returnvar, re
Keys in typemap are N, returnvar, power_quad_acc_n, x, power_quad_acc_output, power_quad_acc_input
Looking at tovar power_quad_acc_output, Annon
Keys in typemap are N, returnvar, power_quad_acc_n, x, power_quad_acc_output, power_quad_acc_input
Looking at tovar power_quad_acc_n
Keys in typemap are N, returnvar, power_quad_acc_n, x, power_quad_acc_output, power_quad_acc_input
Looking at tovar power_quad_acc_input, im
Keys in typemap are N, returnvar, power_quad_acc_n, x, power_quad_acc_output, power_quad_acc_input
Looking at tovar power_quad_acc_input, re
Keys in typemap are N, returnvar, power_quad_acc_n, x, power_quad_acc_output, power_quad_acc_input
Looking at tovar returnvar, im
Keys in typemap are N, returnvar, power_quad_acc_n, x, power_quad_acc_output, power_quad_acc_input
Looking at tovar returnvar, re
Keys in typemap are N, returnvar, power_quad_acc_n, x, power_quad_acc_output, power_quad_acc_input
Looking at tovar power_quad_acc_output, Annon
Keys in typemap are N, returnvar, power_quad_acc_n, x, power_quad_acc_output, power_quad_acc_input
Looking at tovar power_quad_acc_n
Keys in typemap are N, returnvar, power_quad_acc_n, x, power_quad_acc_output, power_quad_acc_input
Looking at tovar power_quad_acc_input, im
Keys in typemap are N, returnvar, power_quad_acc_n, x, power_quad_acc_output, power_quad_acc_input
Looking at tovar power_quad_acc_input, re
Keys in typemap are N, returnvar, power_quad_acc_n, x, power_quad_acc_output, power_quad_acc_input
Looking at tovar returnvar, im
Keys in typemap are N, returnvar, power_quad_acc_n, x, power_quad_acc_output, power_quad_acc_input
Looking at tovar returnvar, re
Keys in typemap are N, returnvar, power_quad_acc_n, x, power_quad_acc_output, power_quad_acc_input
Looking at tovar power_quad_acc_output, Annon
Keys in typemap are N, returnvar, power_quad_acc_n, x, power_quad_acc_output, power_quad_acc_input
Looking at tovar power_quad_acc_n
Keys in typemap are N, returnvar, power_quad_acc_n, x, power_quad_acc_output, power_quad_acc_input
Looking at tovar power_quad_acc_input, im
Keys in typemap are N, returnvar, power_quad_acc_n, x, power_quad_acc_output, power_quad_acc_input
Looking at tovar power_quad_acc_input, re
Keys in typemap are N, returnvar, power_quad_acc_n, x, power_quad_acc_output, power_quad_acc_input
Looking at tovar returnvar, im
Keys in typemap are N, returnvar, power_quad_acc_n, x, power_quad_acc_output, power_quad_acc_input
Looking at tovar returnvar, re
Keys in typemap are N, returnvar, power_quad_acc_n, x, power_quad_acc_output, power_quad_acc_input
Looking at tovar power_quad_acc_output, Annon
Keys in typemap are N, returnvar, power_quad_acc_n, x, power_quad_acc_output, power_quad_acc_input
Looking at tovar power_quad_acc_n
Keys in typemap are N, returnvar, power_quad_acc_n, x, power_quad_acc_output, power_quad_acc_input
Looking at tovar power_quad_acc_input, im
Keys in typemap are N, returnvar, power_quad_acc_n, x, power_quad_acc_output, power_quad_acc_input
Looking at tovar power_quad_acc_input, re
Number of skeletons generated is 4
Getting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeNumber of conversion pairs generated is 4
Looking at GIR GIR: Define power_quad_acc_output
Uses: power_quad_acc_n
Defs: power_quad_acc_output.re,power_quad_acc_output.im
Assigns: 

Has unassed use power_quad_acc_n
Looking at GIR GIR: Define power_quad_acc_n
Uses: 
Defs: power_quad_acc_n
Assigns: 

Looking at GIR GIR: power_quad_acc_n = N
Uses: N
Defs: 
Assigns: power_quad_acc_n

Has undefed ass power_quad_acc_n
Looking at GIR GIR: Define power_quad_acc_input
Uses: power_quad_acc_n
Defs: power_quad_acc_input.re,power_quad_acc_input.im
Assigns: 

Has unassed use power_quad_acc_n
Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i2{
power_quad_acc_input[i2].im = x[i2].im}
Uses: power_quad_acc_n,x.im
Defs: 
Assigns: power_quad_acc_input.im

Has unassed use power_quad_acc_n
Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i3{
power_quad_acc_input[i3].re = x[i3].re}
Uses: power_quad_acc_n,x.re
Defs: 
Assigns: power_quad_acc_input.re

Has unassed use power_quad_acc_n
Looking at GIR GIR: EscapingDefine(UseMalloc) returnvar
Uses: N
Defs: returnvar.re,returnvar.im
Assigns: 

Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i4{
returnvar[i4].im = power_quad_acc_output[i4].im}
Uses: power_quad_acc_n,power_quad_acc_output.im
Defs: 
Assigns: returnvar.im

Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i5{
returnvar[i5].re = power_quad_acc_output[i5].re}
Uses: power_quad_acc_n,power_quad_acc_output.re
Defs: 
Assigns: returnvar.re

Looking at GIR GIR: free power_quad_acc_input
Uses: 
Defs: 
Assigns: 

Looking at GIR GIR: free power_quad_acc_output
Uses: 
Defs: 
Assigns: 

Looking at GIR GIR: free power_quad_acc_n
Uses: 
Defs: 
Assigns: 

Looking at GIR GIR: return returnvar
Uses: returnvar.re,returnvar.im
Defs: 
Assigns: 

Has unassed use returnvar.re
Looking at GIR GIR: Define power_quad_acc_output
Uses: power_quad_acc_n
Defs: power_quad_acc_output.re,power_quad_acc_output.im
Assigns: 

Has unassed use power_quad_acc_n
Looking at GIR GIR: Define power_quad_acc_n
Uses: 
Defs: power_quad_acc_n
Assigns: 

Looking at GIR GIR: power_quad_acc_n = N
Uses: N
Defs: 
Assigns: power_quad_acc_n

Has undefed ass power_quad_acc_n
Looking at GIR GIR: Define power_quad_acc_input
Uses: power_quad_acc_n
Defs: power_quad_acc_input.re,power_quad_acc_input.im
Assigns: 

Has unassed use power_quad_acc_n
Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i7{
power_quad_acc_input[i7].im = x[i7].im}
Uses: power_quad_acc_n,x.im
Defs: 
Assigns: power_quad_acc_input.im

Has unassed use power_quad_acc_n
Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i8{
power_quad_acc_input[i8].re = x[i8].re}
Uses: power_quad_acc_n,x.re
Defs: 
Assigns: power_quad_acc_input.re

Has unassed use power_quad_acc_n
Looking at GIR GIR: EscapingDefine(UseMalloc) returnvar
Uses: N
Defs: returnvar.re,returnvar.im
Assigns: 

Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i9{
returnvar[i9].im = power_quad_acc_output[i9].re}
Uses: power_quad_acc_n,power_quad_acc_output.re
Defs: 
Assigns: returnvar.im

Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i10{
returnvar[i10].re = power_quad_acc_output[i10].im}
Uses: power_quad_acc_n,power_quad_acc_output.im
Defs: 
Assigns: returnvar.re

Looking at GIR GIR: free power_quad_acc_input
Uses: 
Defs: 
Assigns: 

Looking at GIR GIR: free power_quad_acc_output
Uses: 
Defs: 
Assigns: 

Looking at GIR GIR: free power_quad_acc_n
Uses: 
Defs: 
Assigns: 

Looking at GIR GIR: return returnvar
Uses: returnvar.re,returnvar.im
Defs: 
Assigns: 

Has unassed use returnvar.re
Looking at GIR GIR: Define power_quad_acc_output
Uses: power_quad_acc_n
Defs: power_quad_acc_output.re,power_quad_acc_output.im
Assigns: 

Has unassed use power_quad_acc_n
Looking at GIR GIR: Define power_quad_acc_n
Uses: 
Defs: power_quad_acc_n
Assigns: 

Looking at GIR GIR: power_quad_acc_n = N
Uses: N
Defs: 
Assigns: power_quad_acc_n

Has undefed ass power_quad_acc_n
Looking at GIR GIR: Define power_quad_acc_input
Uses: power_quad_acc_n
Defs: power_quad_acc_input.re,power_quad_acc_input.im
Assigns: 

Has unassed use power_quad_acc_n
Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i12{
power_quad_acc_input[i12].im = x[i12].re}
Uses: power_quad_acc_n,x.re
Defs: 
Assigns: power_quad_acc_input.im

Has unassed use power_quad_acc_n
Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i13{
power_quad_acc_input[i13].re = x[i13].im}
Uses: power_quad_acc_n,x.im
Defs: 
Assigns: power_quad_acc_input.re

Has unassed use power_quad_acc_n
Looking at GIR GIR: EscapingDefine(UseMalloc) returnvar
Uses: N
Defs: returnvar.re,returnvar.im
Assigns: 

Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i14{
returnvar[i14].im = power_quad_acc_output[i14].im}
Uses: power_quad_acc_n,power_quad_acc_output.im
Defs: 
Assigns: returnvar.im

Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i15{
returnvar[i15].re = power_quad_acc_output[i15].re}
Uses: power_quad_acc_n,power_quad_acc_output.re
Defs: 
Assigns: returnvar.re

Looking at GIR GIR: free power_quad_acc_input
Uses: 
Defs: 
Assigns: 

Looking at GIR GIR: free power_quad_acc_output
Uses: 
Defs: 
Assigns: 

Looking at GIR GIR: free power_quad_acc_n
Uses: 
Defs: 
Assigns: 

Looking at GIR GIR: return returnvar
Uses: returnvar.re,returnvar.im
Defs: 
Assigns: 

Has unassed use returnvar.re
Looking at GIR GIR: Define power_quad_acc_output
Uses: power_quad_acc_n
Defs: power_quad_acc_output.re,power_quad_acc_output.im
Assigns: 

Has unassed use power_quad_acc_n
Looking at GIR GIR: Define power_quad_acc_n
Uses: 
Defs: power_quad_acc_n
Assigns: 

Looking at GIR GIR: power_quad_acc_n = N
Uses: N
Defs: 
Assigns: power_quad_acc_n

Has undefed ass power_quad_acc_n
Looking at GIR GIR: Define power_quad_acc_input
Uses: power_quad_acc_n
Defs: power_quad_acc_input.re,power_quad_acc_input.im
Assigns: 

Has unassed use power_quad_acc_n
Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i17{
power_quad_acc_input[i17].im = x[i17].re}
Uses: power_quad_acc_n,x.re
Defs: 
Assigns: power_quad_acc_input.im

Has unassed use power_quad_acc_n
Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i18{
power_quad_acc_input[i18].re = x[i18].im}
Uses: power_quad_acc_n,x.im
Defs: 
Assigns: power_quad_acc_input.re

Has unassed use power_quad_acc_n
Looking at GIR GIR: EscapingDefine(UseMalloc) returnvar
Uses: N
Defs: returnvar.re,returnvar.im
Assigns: 

Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i19{
returnvar[i19].im = power_quad_acc_output[i19].re}
Uses: power_quad_acc_n,power_quad_acc_output.re
Defs: 
Assigns: returnvar.im

Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i20{
returnvar[i20].re = power_quad_acc_output[i20].im}
Uses: power_quad_acc_n,power_quad_acc_output.im
Defs: 
Assigns: returnvar.re

Looking at GIR GIR: free power_quad_acc_input
Uses: 
Defs: 
Assigns: 

Looking at GIR GIR: free power_quad_acc_output
Uses: 
Defs: 
Assigns: 

Looking at GIR GIR: free power_quad_acc_n
Uses: 
Defs: 
Assigns: 

Looking at GIR GIR: return returnvar
Uses: returnvar.re,returnvar.im
Defs: 
Assigns: 

Has unassed use returnvar.re
Number of programs from these pairs is 4
Doing sub-struct assignment for member re
Doing sub-struct assignment for member im
Context is 
Dim length is power_quad_acc_n
Doing sub-struct assignment for member re
Doing sub-struct assignment for member im
Context is 
Dim length is power_quad_acc_n
Doing sub-struct assignment for member re
Doing sub-struct assignment for member im
Context is 
Dim length is N
Number of codes generated is 1
Number of codes built is 1
Generating tests for the 1 programs
Number of IO tests generated is 1
Time: 0.006564
AccTime: 0
Real responses generated
Warning: Accelerator failed on input (input file synthethizer_temps/io/1//1.json): accelerator bounds should be specified for better performance. 
For executable synthethizer_temps/1_exec, passed cound is 0 of 1 tests (0 are vacuous: luck pass is false) 
Starting post synthesis (1 programs)
===============================================
Working tests are in the source files for executables 
There were 0 working in total
Required compiler flags to build are: libs/clib/fft_synth_lib.co libs/clib/synthesizer.co -Ilibs -fsanitize=address -lfftw3 -lfftw3f
Done!
WARNING: Set --only-test and --skip-build may lead to inconsistent results
(--only-test renumbers executables)
Loading specifications...
Synthesizing...
Starting synthesis!
Generated the dimensions
Have 1 possible annotated typemaps
Looking at intput type array(_complex_double_: with dims N (=) ), with inpname x
Looking at intput type _complex_double_, with inpname None
Looking at intput type float64, with inpname re
Generated result types SFloat(re)
Looking at intput type float64, with inpname im
Generated result types SFloat(im)
Generated result types STypes(SFloat(re), SFloat(im))
Generated result types SArray(x: STypes(SFloat(re), SFloat(im)): with lenvar N (=) )
Looking at intput type int32, with inpname N
Generated result types SInt(N)
Looking at intput type array(complex_type: with dims power_quad_acc_n (=) ), with inpname power_quad_acc_input
Looking at intput type complex_type, with inpname None
Looking at intput type float32, with inpname re
Generated result types SFloat(re)
Looking at intput type float32, with inpname im
Generated result types SFloat(im)
Generated result types STypes(SFloat(re), SFloat(im))
Generated result types SArray(power_quad_acc_input: STypes(SFloat(re), SFloat(im)): with lenvar power_quad_acc_n (=) )
Looking at intput type int32, with inpname power_quad_acc_n
Generated result types SInt(power_quad_acc_n)
Looking at intput type array(complex_type: with dims power_quad_acc_n (=) ), with inpname power_quad_acc_output
Looking at intput type complex_type, with inpname None
Looking at intput type float32, with inpname re
Generated result types SFloat(re)
Looking at intput type float32, with inpname im
Generated result types SFloat(im)
Generated result types STypes(SFloat(re), SFloat(im))
Generated result types SArray(power_quad_acc_output: STypes(SFloat(re), SFloat(im)): with lenvar power_quad_acc_n (=) )
Looking at intput type array(_complex_double_: with dims N (=) ), with inpname returnvar
Looking at intput type _complex_double_, with inpname None
Looking at intput type float64, with inpname re
Generated result types SFloat(re)
Looking at intput type float64, with inpname im
Generated result types SFloat(im)
Generated result types STypes(SFloat(re), SFloat(im))
Generated result types SArray(returnvar: STypes(SFloat(re), SFloat(im)): with lenvar N (=) )
Liveout types are SArray(returnvar: STypes(SFloat(re), SFloat(im)): with lenvar N (=) )
Looking at intput type array(complex_type: with dims power_quad_acc_n (=) ), with inpname power_quad_acc_output
Looking at intput type complex_type, with inpname None
Looking at intput type float32, with inpname re
Generated result types SFloat(re)
Looking at intput type float32, with inpname im
Generated result types SFloat(im)
Generated result types STypes(SFloat(re), SFloat(im))
Generated result types SArray(power_quad_acc_output: STypes(SFloat(re), SFloat(im)): with lenvar power_quad_acc_n (=) )
Variable name is SArray(x: STypes(SFloat(re), SFloat(im)): with lenvar N (=) ) (probability1.) 
Variable name is SInt(N) (probability1.) 
Got potential dimvars N (=) 
Variable name is SArray(power_quad_acc_output: STypes(SFloat(re), SFloat(im)): with lenvar power_quad_acc_n (=) ) (probability1.) 
Variable name is SArray(x: STypes(SFloat(re), SFloat(im)): with lenvar N (=) ) (probability0.5) 
Variable name is SInt(N) (probability0.5) 
Types are: 
(postbind: SArray(power_quad_acc_output: STypes(SFloat(re), SFloat(im)): with lenvar power_quad_acc_n (=) ) (probability1.) 
SArray(x: STypes(SFloat(re), SFloat(im)): with lenvar N (=) ) (probability0.5) 
SInt(N) (probability0.5) )
(prebind: SArray(x: STypes(SFloat(re), SFloat(im)): with lenvar N (=) ) (probability1.) 
SInt(N) (probability1.) )
Keys in typemap are N, returnvar, power_quad_acc_n, x, power_quad_acc_output, power_quad_acc_input
N, returnvar, power_quad_acc_n, x, power_quad_acc_output, power_quad_acc_input
N, returnvar, power_quad_acc_n, x, power_quad_acc_output, power_quad_acc_input
N, returnvar, power_quad_acc_n, x, power_quad_acc_output, power_quad_acc_input
Keys in typemap are N, returnvar, power_quad_acc_n, x, power_quad_acc_output, power_quad_acc_input
Looking at tovar returnvar, im
Keys in typemap are N, returnvar, power_quad_acc_n, x, power_quad_acc_output, power_quad_acc_input
Looking at tovar returnvar, re
Keys in typemap are N, returnvar, power_quad_acc_n, x, power_quad_acc_output, power_quad_acc_input
Looking at tovar power_quad_acc_output, Annon
Keys in typemap are N, returnvar, power_quad_acc_n, x, power_quad_acc_output, power_quad_acc_input
Looking at tovar power_quad_acc_n
Keys in typemap are N, returnvar, power_quad_acc_n, x, power_quad_acc_output, power_quad_acc_input
Looking at tovar power_quad_acc_input, im
Keys in typemap are N, returnvar, power_quad_acc_n, x, power_quad_acc_output, power_quad_acc_input
Looking at tovar power_quad_acc_input, re
Keys in typemap are N, returnvar, power_quad_acc_n, x, power_quad_acc_output, power_quad_acc_input
Looking at tovar returnvar, im
Keys in typemap are N, returnvar, power_quad_acc_n, x, power_quad_acc_output, power_quad_acc_input
Looking at tovar returnvar, re
Keys in typemap are N, returnvar, power_quad_acc_n, x, power_quad_acc_output, power_quad_acc_input
Looking at tovar power_quad_acc_output, Annon
Keys in typemap are N, returnvar, power_quad_acc_n, x, power_quad_acc_output, power_quad_acc_input
Looking at tovar power_quad_acc_n
Keys in typemap are N, returnvar, power_quad_acc_n, x, power_quad_acc_output, power_quad_acc_input
Looking at tovar power_quad_acc_input, im
Keys in typemap are N, returnvar, power_quad_acc_n, x, power_quad_acc_output, power_quad_acc_input
Looking at tovar power_quad_acc_input, re
Keys in typemap are N, returnvar, power_quad_acc_n, x, power_quad_acc_output, power_quad_acc_input
Looking at tovar returnvar, im
Keys in typemap are N, returnvar, power_quad_acc_n, x, power_quad_acc_output, power_quad_acc_input
Looking at tovar returnvar, re
Keys in typemap are N, returnvar, power_quad_acc_n, x, power_quad_acc_output, power_quad_acc_input
Looking at tovar power_quad_acc_output, Annon
Keys in typemap are N, returnvar, power_quad_acc_n, x, power_quad_acc_output, power_quad_acc_input
Looking at tovar power_quad_acc_n
Keys in typemap are N, returnvar, power_quad_acc_n, x, power_quad_acc_output, power_quad_acc_input
Looking at tovar power_quad_acc_input, im
Keys in typemap are N, returnvar, power_quad_acc_n, x, power_quad_acc_output, power_quad_acc_input
Looking at tovar power_quad_acc_input, re
Keys in typemap are N, returnvar, power_quad_acc_n, x, power_quad_acc_output, power_quad_acc_input
Looking at tovar returnvar, im
Keys in typemap are N, returnvar, power_quad_acc_n, x, power_quad_acc_output, power_quad_acc_input
Looking at tovar returnvar, re
Keys in typemap are N, returnvar, power_quad_acc_n, x, power_quad_acc_output, power_quad_acc_input
Looking at tovar power_quad_acc_output, Annon
Keys in typemap are N, returnvar, power_quad_acc_n, x, power_quad_acc_output, power_quad_acc_input
Looking at tovar power_quad_acc_n
Keys in typemap are N, returnvar, power_quad_acc_n, x, power_quad_acc_output, power_quad_acc_input
Looking at tovar power_quad_acc_input, im
Keys in typemap are N, returnvar, power_quad_acc_n, x, power_quad_acc_output, power_quad_acc_input
Looking at tovar power_quad_acc_input, re
Number of skeletons generated is 4
Getting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeNumber of conversion pairs generated is 4
Looking at GIR GIR: Define power_quad_acc_output
Uses: power_quad_acc_n
Defs: power_quad_acc_output.re,power_quad_acc_output.im
Assigns: 

Has unassed use power_quad_acc_n
Looking at GIR GIR: Define power_quad_acc_n
Uses: 
Defs: power_quad_acc_n
Assigns: 

Looking at GIR GIR: power_quad_acc_n = N
Uses: N
Defs: 
Assigns: power_quad_acc_n

Has undefed ass power_quad_acc_n
Looking at GIR GIR: Define power_quad_acc_input
Uses: power_quad_acc_n
Defs: power_quad_acc_input.re,power_quad_acc_input.im
Assigns: 

Has unassed use power_quad_acc_n
Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i2{
power_quad_acc_input[i2].im = x[i2].im}
Uses: power_quad_acc_n,x.im
Defs: 
Assigns: power_quad_acc_input.im

Has unassed use power_quad_acc_n
Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i3{
power_quad_acc_input[i3].re = x[i3].re}
Uses: power_quad_acc_n,x.re
Defs: 
Assigns: power_quad_acc_input.re

Has unassed use power_quad_acc_n
Looking at GIR GIR: EscapingDefine(UseMalloc) returnvar
Uses: N
Defs: returnvar.re,returnvar.im
Assigns: 

Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i4{
returnvar[i4].im = power_quad_acc_output[i4].im}
Uses: power_quad_acc_n,power_quad_acc_output.im
Defs: 
Assigns: returnvar.im

Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i5{
returnvar[i5].re = power_quad_acc_output[i5].re}
Uses: power_quad_acc_n,power_quad_acc_output.re
Defs: 
Assigns: returnvar.re

Looking at GIR GIR: free power_quad_acc_input
Uses: 
Defs: 
Assigns: 

Looking at GIR GIR: free power_quad_acc_output
Uses: 
Defs: 
Assigns: 

Looking at GIR GIR: free power_quad_acc_n
Uses: 
Defs: 
Assigns: 

Looking at GIR GIR: return returnvar
Uses: returnvar.re,returnvar.im
Defs: 
Assigns: 

Has unassed use returnvar.re
Looking at GIR GIR: Define power_quad_acc_output
Uses: power_quad_acc_n
Defs: power_quad_acc_output.re,power_quad_acc_output.im
Assigns: 

Has unassed use power_quad_acc_n
Looking at GIR GIR: Define power_quad_acc_n
Uses: 
Defs: power_quad_acc_n
Assigns: 

Looking at GIR GIR: power_quad_acc_n = N
Uses: N
Defs: 
Assigns: power_quad_acc_n

Has undefed ass power_quad_acc_n
Looking at GIR GIR: Define power_quad_acc_input
Uses: power_quad_acc_n
Defs: power_quad_acc_input.re,power_quad_acc_input.im
Assigns: 

Has unassed use power_quad_acc_n
Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i7{
power_quad_acc_input[i7].im = x[i7].im}
Uses: power_quad_acc_n,x.im
Defs: 
Assigns: power_quad_acc_input.im

Has unassed use power_quad_acc_n
Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i8{
power_quad_acc_input[i8].re = x[i8].re}
Uses: power_quad_acc_n,x.re
Defs: 
Assigns: power_quad_acc_input.re

Has unassed use power_quad_acc_n
Looking at GIR GIR: EscapingDefine(UseMalloc) returnvar
Uses: N
Defs: returnvar.re,returnvar.im
Assigns: 

Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i9{
returnvar[i9].im = power_quad_acc_output[i9].re}
Uses: power_quad_acc_n,power_quad_acc_output.re
Defs: 
Assigns: returnvar.im

Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i10{
returnvar[i10].re = power_quad_acc_output[i10].im}
Uses: power_quad_acc_n,power_quad_acc_output.im
Defs: 
Assigns: returnvar.re

Looking at GIR GIR: free power_quad_acc_input
Uses: 
Defs: 
Assigns: 

Looking at GIR GIR: free power_quad_acc_output
Uses: 
Defs: 
Assigns: 

Looking at GIR GIR: free power_quad_acc_n
Uses: 
Defs: 
Assigns: 

Looking at GIR GIR: return returnvar
Uses: returnvar.re,returnvar.im
Defs: 
Assigns: 

Has unassed use returnvar.re
Looking at GIR GIR: Define power_quad_acc_output
Uses: power_quad_acc_n
Defs: power_quad_acc_output.re,power_quad_acc_output.im
Assigns: 

Has unassed use power_quad_acc_n
Looking at GIR GIR: Define power_quad_acc_n
Uses: 
Defs: power_quad_acc_n
Assigns: 

Looking at GIR GIR: power_quad_acc_n = N
Uses: N
Defs: 
Assigns: power_quad_acc_n

Has undefed ass power_quad_acc_n
Looking at GIR GIR: Define power_quad_acc_input
Uses: power_quad_acc_n
Defs: power_quad_acc_input.re,power_quad_acc_input.im
Assigns: 

Has unassed use power_quad_acc_n
Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i12{
power_quad_acc_input[i12].im = x[i12].re}
Uses: power_quad_acc_n,x.re
Defs: 
Assigns: power_quad_acc_input.im

Has unassed use power_quad_acc_n
Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i13{
power_quad_acc_input[i13].re = x[i13].im}
Uses: power_quad_acc_n,x.im
Defs: 
Assigns: power_quad_acc_input.re

Has unassed use power_quad_acc_n
Looking at GIR GIR: EscapingDefine(UseMalloc) returnvar
Uses: N
Defs: returnvar.re,returnvar.im
Assigns: 

Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i14{
returnvar[i14].im = power_quad_acc_output[i14].im}
Uses: power_quad_acc_n,power_quad_acc_output.im
Defs: 
Assigns: returnvar.im

Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i15{
returnvar[i15].re = power_quad_acc_output[i15].re}
Uses: power_quad_acc_n,power_quad_acc_output.re
Defs: 
Assigns: returnvar.re

Looking at GIR GIR: free power_quad_acc_input
Uses: 
Defs: 
Assigns: 

Looking at GIR GIR: free power_quad_acc_output
Uses: 
Defs: 
Assigns: 

Looking at GIR GIR: free power_quad_acc_n
Uses: 
Defs: 
Assigns: 

Looking at GIR GIR: return returnvar
Uses: returnvar.re,returnvar.im
Defs: 
Assigns: 

Has unassed use returnvar.re
Looking at GIR GIR: Define power_quad_acc_output
Uses: power_quad_acc_n
Defs: power_quad_acc_output.re,power_quad_acc_output.im
Assigns: 

Has unassed use power_quad_acc_n
Looking at GIR GIR: Define power_quad_acc_n
Uses: 
Defs: power_quad_acc_n
Assigns: 

Looking at GIR GIR: power_quad_acc_n = N
Uses: N
Defs: 
Assigns: power_quad_acc_n

Has undefed ass power_quad_acc_n
Looking at GIR GIR: Define power_quad_acc_input
Uses: power_quad_acc_n
Defs: power_quad_acc_input.re,power_quad_acc_input.im
Assigns: 

Has unassed use power_quad_acc_n
Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i17{
power_quad_acc_input[i17].im = x[i17].re}
Uses: power_quad_acc_n,x.re
Defs: 
Assigns: power_quad_acc_input.im

Has unassed use power_quad_acc_n
Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i18{
power_quad_acc_input[i18].re = x[i18].im}
Uses: power_quad_acc_n,x.im
Defs: 
Assigns: power_quad_acc_input.re

Has unassed use power_quad_acc_n
Looking at GIR GIR: EscapingDefine(UseMalloc) returnvar
Uses: N
Defs: returnvar.re,returnvar.im
Assigns: 

Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i19{
returnvar[i19].im = power_quad_acc_output[i19].re}
Uses: power_quad_acc_n,power_quad_acc_output.re
Defs: 
Assigns: returnvar.im

Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i20{
returnvar[i20].re = power_quad_acc_output[i20].im}
Uses: power_quad_acc_n,power_quad_acc_output.im
Defs: 
Assigns: returnvar.re

Looking at GIR GIR: free power_quad_acc_input
Uses: 
Defs: 
Assigns: 

Looking at GIR GIR: free power_quad_acc_output
Uses: 
Defs: 
Assigns: 

Looking at GIR GIR: free power_quad_acc_n
Uses: 
Defs: 
Assigns: 

Looking at GIR GIR: return returnvar
Uses: returnvar.re,returnvar.im
Defs: 
Assigns: 

Has unassed use returnvar.re
Number of programs from these pairs is 4
Doing sub-struct assignment for member re
Doing sub-struct assignment for member im
Context is 
Dim length is power_quad_acc_n
Doing sub-struct assignment for member re
Doing sub-struct assignment for member im
Context is 
Dim length is power_quad_acc_n
Doing sub-struct assignment for member re
Doing sub-struct assignment for member im
Context is 
Dim length is N
Number of codes generated is 1
Number of codes built is 1
Generating tests for the 1 programs
Number of IO tests generated is 1
Time: 3.7e-05
AccTime: 0
Real responses generated
Warning: Accelerator failed on input (input file synthethizer_temps/io/1//1.json): accelerator bounds should be specified for better performance. 
For executable synthethizer_temps/1_exec, passed cound is 0 of 1 tests (0 are vacuous: luck pass is false) 
Starting post synthesis (1 programs)
===============================================
Working tests are in the source files for executables 
There were 0 working in total
Required compiler flags to build are: libs/clib/fft_synth_lib.co libs/clib/synthesizer.co -Ilibs -fsanitize=address -lfftw3 -lfftw3f
Done!
WARNING: Set --only-test and --skip-build may lead to inconsistent results
(--only-test renumbers executables)
Loading specifications...
Synthesizing...
Starting synthesis!
Generated the dimensions
Have 9 possible annotated typemaps
Looking at intput type pointer(PFFFT_Setup_Desugar), with inpname setup
Looking at intput type PFFFT_Setup_Desugar, with inpname setup
Looking at intput type int32, with inpname N
Generated result types SInt(N)
Looking at intput type int32, with inpname Ncvec
Generated result types SInt(Ncvec)
Looking at intput type array(int32: with dims 15), with inpname ifac
Looking at intput type int32, with inpname None
Generated result types SInt(Annon)
Generated result types SArray(ifac: SInt(Annon): with lenvar 15)
Looking at intput type int32, with inpname transform
Generated result types SInt(transform)
Looking at intput type array(float32: with dims N (=) ), with inpname data
Looking at intput type float32, with inpname None
Generated result types SFloat(Annon)
Generated result types SArray(data: SFloat(Annon): with lenvar setup.N (=) )
Looking at intput type array(float32: with dims N (=) ), with inpname e
Looking at intput type float32, with inpname None
Generated result types SFloat(Annon)
Generated result types SArray(e: SFloat(Annon): with lenvar setup.N (=) )
Looking at intput type array(float32: with dims N (=) ), with inpname twiddle
Looking at intput type float32, with inpname None
Generated result types SFloat(Annon)
Generated result types SArray(twiddle: SFloat(Annon): with lenvar setup.N (=) )
Generated result types STypes(SInt(setup.N), SInt(setup.Ncvec), SArray(setup.ifac: SInt(Annon): with lenvar 15), SInt(setup.transform), SArray(setup.data: SFloat(Annon): with lenvar setup.N (=) ), SArray(setup.e: SFloat(Annon): with lenvar setup.N (=) ), SArray(setup.twiddle: SFloat(Annon): with lenvar setup.N (=) ))
Generated result types STypes(SInt(setup.N), SInt(setup.Ncvec), SArray(setup.ifac: SInt(Annon): with lenvar 15), SInt(setup.transform), SArray(setup.data: SFloat(Annon): with lenvar setup.N (=) ), SArray(setup.e: SFloat(Annon): with lenvar setup.N (=) ), SArray(setup.twiddle: SFloat(Annon): with lenvar setup.N (=) ))
Looking at intput type array(facc_2xf32_t: with dims setup.N (=) ), with inpname input
Looking at intput type facc_2xf32_t, with inpname None
Looking at intput type float32, with inpname f32_1
Generated result types SFloat(f32_1)
Looking at intput type float32, with inpname f32_2
Generated result types SFloat(f32_2)
Generated result types STypes(SFloat(f32_1), SFloat(f32_2))
Generated result types SArray(input: STypes(SFloat(f32_1), SFloat(f32_2)): with lenvar setup.N (=) )
Looking at intput type array(facc_2xf32_t: with dims setup.N (=) ), with inpname work
Looking at intput type facc_2xf32_t, with inpname None
Looking at intput type float32, with inpname f32_1
Generated result types SFloat(f32_1)
Looking at intput type float32, with inpname f32_2
Generated result types SFloat(f32_2)
Generated result types STypes(SFloat(f32_1), SFloat(f32_2))
Generated result types SArray(work: STypes(SFloat(f32_1), SFloat(f32_2)): with lenvar setup.N (=) )
Looking at intput type int32, with inpname direction
Generated result types SInt(direction)
Looking at intput type array(complex_type: with dims power_quad_acc_n (=) ), with inpname power_quad_acc_input
Looking at intput type complex_type, with inpname None
Looking at intput type float32, with inpname re
Generated result types SFloat(re)
Looking at intput type float32, with inpname im
Generated result types SFloat(im)
Generated result types STypes(SFloat(re), SFloat(im))
Generated result types SArray(power_quad_acc_input: STypes(SFloat(re), SFloat(im)): with lenvar power_quad_acc_n (=) )
Looking at intput type int32, with inpname power_quad_acc_n
Generated result types SInt(power_quad_acc_n)
Looking at intput type array(complex_type: with dims power_quad_acc_n (=) ), with inpname power_quad_acc_output
Looking at intput type complex_type, with inpname None
Looking at intput type float32, with inpname re
Generated result types SFloat(re)
Looking at intput type float32, with inpname im
Generated result types SFloat(im)
Generated result types STypes(SFloat(re), SFloat(im))
Generated result types SArray(power_quad_acc_output: STypes(SFloat(re), SFloat(im)): with lenvar power_quad_acc_n (=) )
Looking at intput type array(facc_2xf32_t: with dims setup.N (=) ), with inpname output
Looking at intput type facc_2xf32_t, with inpname None
Looking at intput type float32, with inpname f32_1
Generated result types SFloat(f32_1)
Looking at intput type float32, with inpname f32_2
Generated result types SFloat(f32_2)
Generated result types STypes(SFloat(f32_1), SFloat(f32_2))
Generated result types SArray(output: STypes(SFloat(f32_1), SFloat(f32_2)): with lenvar setup.N (=) )
Liveout types are SArray(output: STypes(SFloat(f32_1), SFloat(f32_2)): with lenvar setup.N (=) )
Looking at intput type array(complex_type: with dims power_quad_acc_n (=) ), with inpname power_quad_acc_output
Looking at intput type complex_type, with inpname None
Looking at intput type float32, with inpname re
Generated result types SFloat(re)
Looking at intput type float32, with inpname im
Generated result types SFloat(im)
Generated result types STypes(SFloat(re), SFloat(im))
Generated result types SArray(power_quad_acc_output: STypes(SFloat(re), SFloat(im)): with lenvar power_quad_acc_n (=) )
Variable name is SInt(setup.N) (probability1.) 
Variable name is SInt(setup.Ncvec) (probability1.) 
Variable name is SArray(setup.ifac: SInt(Annon): with lenvar 15) (probability1.) 
Variable name is SInt(setup.transform) (probability1.) 
Variable name is SArray(setup.data: SFloat(Annon): with lenvar setup.N (=) ) (probability1.) 
Variable name is SArray(setup.e: SFloat(Annon): with lenvar setup.N (=) ) (probability1.) 
Variable name is SArray(setup.twiddle: SFloat(Annon): with lenvar setup.N (=) ) (probability1.) 
Variable name is SArray(input: STypes(SFloat(f32_1), SFloat(f32_2)): with lenvar setup.N (=) ) (probability1.) 
Variable name is SArray(work: STypes(SFloat(f32_1), SFloat(f32_2)): with lenvar setup.N (=) ) (probability1.) 
Variable name is SInt(direction) (probability1.) 
Got potential dimvars 15, setup.N (=) 
Variable name is SArray(power_quad_acc_output: STypes(SFloat(re), SFloat(im)): with lenvar power_quad_acc_n (=) ) (probability1.) 
Variable name is SInt(setup.N) (probability0.5) 
Variable name is SInt(setup.Ncvec) (probability0.5) 
Variable name is SArray(setup.ifac: SInt(Annon): with lenvar 15) (probability0.5) 
Variable name is SInt(setup.transform) (probability0.5) 
Variable name is SArray(setup.data: SFloat(Annon): with lenvar setup.N (=) ) (probability0.5) 
Variable name is SArray(setup.e: SFloat(Annon): with lenvar setup.N (=) ) (probability0.5) 
Variable name is SArray(setup.twiddle: SFloat(Annon): with lenvar setup.N (=) ) (probability0.5) 
Variable name is SArray(input: STypes(SFloat(f32_1), SFloat(f32_2)): with lenvar setup.N (=) ) (probability0.5) 
Variable name is SArray(work: STypes(SFloat(f32_1), SFloat(f32_2)): with lenvar setup.N (=) ) (probability0.5) 
Variable name is SInt(direction) (probability0.5) 
Types are: 
(postbind: SArray(power_quad_acc_output: STypes(SFloat(re), SFloat(im)): with lenvar power_quad_acc_n (=) ) (probability1.) 
STypes(SInt(setup.N), SInt(setup.Ncvec), SArray(setup.ifac: SInt(Annon): with lenvar 15), SInt(setup.transform), SArray(setup.data: SFloat(Annon): with lenvar setup.N (=) ), SArray(setup.e: SFloat(Annon): with lenvar setup.N (=) ), SArray(setup.twiddle: SFloat(Annon): with lenvar setup.N (=) )) (probability0.5) 
SArray(input: STypes(SFloat(f32_1), SFloat(f32_2)): with lenvar setup.N (=) ) (probability0.5) 
SArray(work: STypes(SFloat(f32_1), SFloat(f32_2)): with lenvar setup.N (=) ) (probability0.5) 
SInt(direction) (probability0.5) )
(prebind: STypes(SInt(setup.N), SInt(setup.Ncvec), SArray(setup.ifac: SInt(Annon): with lenvar 15), SInt(setup.transform), SArray(setup.data: SFloat(Annon): with lenvar setup.N (=) ), SArray(setup.e: SFloat(Annon): with lenvar setup.N (=) ), SArray(setup.twiddle: SFloat(Annon): with lenvar setup.N (=) )) (probability1.) 
SArray(input: STypes(SFloat(f32_1), SFloat(f32_2)): with lenvar setup.N (=) ) (probability1.) 
SArray(work: STypes(SFloat(f32_1), SFloat(f32_2)): with lenvar setup.N (=) ) (probability1.) 
SInt(direction) (probability1.) )
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at intput type pointer(PFFFT_Setup_Desugar), with inpname setup
Looking at intput type PFFFT_Setup_Desugar, with inpname setup
Looking at intput type int32, with inpname N
Generated result types SInt(N)
Looking at intput type int32, with inpname Ncvec
Generated result types SInt(Ncvec)
Looking at intput type array(int32: with dims 15), with inpname ifac
Looking at intput type int32, with inpname None
Generated result types SInt(Annon)
Generated result types SArray(ifac: SInt(Annon): with lenvar 15)
Looking at intput type int32, with inpname transform
Generated result types SInt(transform)
Looking at intput type array(float32: with dims N (=) ), with inpname data
Looking at intput type float32, with inpname None
Generated result types SFloat(Annon)
Generated result types SArray(data: SFloat(Annon): with lenvar setup.N (=) )
Looking at intput type array(float32: with dims N (=) ), with inpname e
Looking at intput type float32, with inpname None
Generated result types SFloat(Annon)
Generated result types SArray(e: SFloat(Annon): with lenvar setup.N (=) )
Looking at intput type array(float32: with dims N (=) ), with inpname twiddle
Looking at intput type float32, with inpname None
Generated result types SFloat(Annon)
Generated result types SArray(twiddle: SFloat(Annon): with lenvar setup.N (=) )
Generated result types STypes(SInt(setup.N), SInt(setup.Ncvec), SArray(setup.ifac: SInt(Annon): with lenvar 15), SInt(setup.transform), SArray(setup.data: SFloat(Annon): with lenvar setup.N (=) ), SArray(setup.e: SFloat(Annon): with lenvar setup.N (=) ), SArray(setup.twiddle: SFloat(Annon): with lenvar setup.N (=) ))
Generated result types STypes(SInt(setup.N), SInt(setup.Ncvec), SArray(setup.ifac: SInt(Annon): with lenvar 15), SInt(setup.transform), SArray(setup.data: SFloat(Annon): with lenvar setup.N (=) ), SArray(setup.e: SFloat(Annon): with lenvar setup.N (=) ), SArray(setup.twiddle: SFloat(Annon): with lenvar setup.N (=) ))
Looking at intput type array(facc_2xf32_t: with dims setup.N (/2)), with inpname input
Looking at intput type facc_2xf32_t, with inpname None
Looking at intput type float32, with inpname f32_1
Generated result types SFloat(f32_1)
Looking at intput type float32, with inpname f32_2
Generated result types SFloat(f32_2)
Generated result types STypes(SFloat(f32_1), SFloat(f32_2))
Generated result types SArray(input: STypes(SFloat(f32_1), SFloat(f32_2)): with lenvar setup.N (/2))
Looking at intput type array(facc_2xf32_t: with dims setup.N (=) ), with inpname work
Looking at intput type facc_2xf32_t, with inpname None
Looking at intput type float32, with inpname f32_1
Generated result types SFloat(f32_1)
Looking at intput type float32, with inpname f32_2
Generated result types SFloat(f32_2)
Generated result types STypes(SFloat(f32_1), SFloat(f32_2))
Generated result types SArray(work: STypes(SFloat(f32_1), SFloat(f32_2)): with lenvar setup.N (=) )
Looking at intput type int32, with inpname direction
Generated result types SInt(direction)
Looking at intput type array(complex_type: with dims power_quad_acc_n (=) ), with inpname power_quad_acc_input
Looking at intput type complex_type, with inpname None
Looking at intput type float32, with inpname re
Generated result types SFloat(re)
Looking at intput type float32, with inpname im
Generated result types SFloat(im)
Generated result types STypes(SFloat(re), SFloat(im))
Generated result types SArray(power_quad_acc_input: STypes(SFloat(re), SFloat(im)): with lenvar power_quad_acc_n (=) )
Looking at intput type int32, with inpname power_quad_acc_n
Generated result types SInt(power_quad_acc_n)
Looking at intput type array(complex_type: with dims power_quad_acc_n (=) ), with inpname power_quad_acc_output
Looking at intput type complex_type, with inpname None
Looking at intput type float32, with inpname re
Generated result types SFloat(re)
Looking at intput type float32, with inpname im
Generated result types SFloat(im)
Generated result types STypes(SFloat(re), SFloat(im))
Generated result types SArray(power_quad_acc_output: STypes(SFloat(re), SFloat(im)): with lenvar power_quad_acc_n (=) )
Looking at intput type array(facc_2xf32_t: with dims setup.N (=) ), with inpname output
Looking at intput type facc_2xf32_t, with inpname None
Looking at intput type float32, with inpname f32_1
Generated result types SFloat(f32_1)
Looking at intput type float32, with inpname f32_2
Generated result types SFloat(f32_2)
Generated result types STypes(SFloat(f32_1), SFloat(f32_2))
Generated result types SArray(output: STypes(SFloat(f32_1), SFloat(f32_2)): with lenvar setup.N (=) )
Liveout types are SArray(output: STypes(SFloat(f32_1), SFloat(f32_2)): with lenvar setup.N (=) )
Looking at intput type array(complex_type: with dims power_quad_acc_n (=) ), with inpname power_quad_acc_output
Looking at intput type complex_type, with inpname None
Looking at intput type float32, with inpname re
Generated result types SFloat(re)
Looking at intput type float32, with inpname im
Generated result types SFloat(im)
Generated result types STypes(SFloat(re), SFloat(im))
Generated result types SArray(power_quad_acc_output: STypes(SFloat(re), SFloat(im)): with lenvar power_quad_acc_n (=) )
Variable name is SInt(setup.N) (probability1.) 
Variable name is SInt(setup.Ncvec) (probability1.) 
Variable name is SArray(setup.ifac: SInt(Annon): with lenvar 15) (probability1.) 
Variable name is SInt(setup.transform) (probability1.) 
Variable name is SArray(setup.data: SFloat(Annon): with lenvar setup.N (=) ) (probability1.) 
Variable name is SArray(setup.e: SFloat(Annon): with lenvar setup.N (=) ) (probability1.) 
Variable name is SArray(setup.twiddle: SFloat(Annon): with lenvar setup.N (=) ) (probability1.) 
Variable name is SArray(input: STypes(SFloat(f32_1), SFloat(f32_2)): with lenvar setup.N (/2)) (probability1.) 
Variable name is SArray(work: STypes(SFloat(f32_1), SFloat(f32_2)): with lenvar setup.N (=) ) (probability1.) 
Variable name is SInt(direction) (probability1.) 
Got potential dimvars 15, setup.N (/2), setup.N (=) 
Variable name is SArray(power_quad_acc_output: STypes(SFloat(re), SFloat(im)): with lenvar power_quad_acc_n (=) ) (probability1.) 
Variable name is SInt(setup.N) (probability0.5) 
Variable name is SInt(setup.Ncvec) (probability0.5) 
Variable name is SArray(setup.ifac: SInt(Annon): with lenvar 15) (probability0.5) 
Variable name is SInt(setup.transform) (probability0.5) 
Variable name is SArray(setup.data: SFloat(Annon): with lenvar setup.N (=) ) (probability0.5) 
Variable name is SArray(setup.e: SFloat(Annon): with lenvar setup.N (=) ) (probability0.5) 
Variable name is SArray(setup.twiddle: SFloat(Annon): with lenvar setup.N (=) ) (probability0.5) 
Variable name is SArray(input: STypes(SFloat(f32_1), SFloat(f32_2)): with lenvar setup.N (/2)) (probability0.5) 
Variable name is SArray(work: STypes(SFloat(f32_1), SFloat(f32_2)): with lenvar setup.N (=) ) (probability0.5) 
Variable name is SInt(direction) (probability0.5) 
Types are: 
(postbind: SArray(power_quad_acc_output: STypes(SFloat(re), SFloat(im)): with lenvar power_quad_acc_n (=) ) (probability1.) 
STypes(SInt(setup.N), SInt(setup.Ncvec), SArray(setup.ifac: SInt(Annon): with lenvar 15), SInt(setup.transform), SArray(setup.data: SFloat(Annon): with lenvar setup.N (=) ), SArray(setup.e: SFloat(Annon): with lenvar setup.N (=) ), SArray(setup.twiddle: SFloat(Annon): with lenvar setup.N (=) )) (probability0.5) 
SArray(input: STypes(SFloat(f32_1), SFloat(f32_2)): with lenvar setup.N (/2)) (probability0.5) 
SArray(work: STypes(SFloat(f32_1), SFloat(f32_2)): with lenvar setup.N (=) ) (probability0.5) 
SInt(direction) (probability0.5) )
(prebind: STypes(SInt(setup.N), SInt(setup.Ncvec), SArray(setup.ifac: SInt(Annon): with lenvar 15), SInt(setup.transform), SArray(setup.data: SFloat(Annon): with lenvar setup.N (=) ), SArray(setup.e: SFloat(Annon): with lenvar setup.N (=) ), SArray(setup.twiddle: SFloat(Annon): with lenvar setup.N (=) )) (probability1.) 
SArray(input: STypes(SFloat(f32_1), SFloat(f32_2)): with lenvar setup.N (/2)) (probability1.) 
SArray(work: STypes(SFloat(f32_1), SFloat(f32_2)): with lenvar setup.N (=) ) (probability1.) 
SInt(direction) (probability1.) )
Keys in typemap are 
Looking at intput type pointer(PFFFT_Setup_Desugar), with inpname setup
Looking at intput type PFFFT_Setup_Desugar, with inpname setup
Looking at intput type int32, with inpname N
Generated result types SInt(N)
Looking at intput type int32, with inpname Ncvec
Generated result types SInt(Ncvec)
Looking at intput type array(int32: with dims 15), with inpname ifac
Looking at intput type int32, with inpname None
Generated result types SInt(Annon)
Generated result types SArray(ifac: SInt(Annon): with lenvar 15)
Looking at intput type int32, with inpname transform
Generated result types SInt(transform)
Looking at intput type array(float32: with dims N (=) ), with inpname data
Looking at intput type float32, with inpname None
Generated result types SFloat(Annon)
Generated result types SArray(data: SFloat(Annon): with lenvar setup.N (=) )
Looking at intput type array(float32: with dims N (=) ), with inpname e
Looking at intput type float32, with inpname None
Generated result types SFloat(Annon)
Generated result types SArray(e: SFloat(Annon): with lenvar setup.N (=) )
Looking at intput type array(float32: with dims N (=) ), with inpname twiddle
Looking at intput type float32, with inpname None
Generated result types SFloat(Annon)
Generated result types SArray(twiddle: SFloat(Annon): with lenvar setup.N (=) )
Generated result types STypes(SInt(setup.N), SInt(setup.Ncvec), SArray(setup.ifac: SInt(Annon): with lenvar 15), SInt(setup.transform), SArray(setup.data: SFloat(Annon): with lenvar setup.N (=) ), SArray(setup.e: SFloat(Annon): with lenvar setup.N (=) ), SArray(setup.twiddle: SFloat(Annon): with lenvar setup.N (=) ))
Generated result types STypes(SInt(setup.N), SInt(setup.Ncvec), SArray(setup.ifac: SInt(Annon): with lenvar 15), SInt(setup.transform), SArray(setup.data: SFloat(Annon): with lenvar setup.N (=) ), SArray(setup.e: SFloat(Annon): with lenvar setup.N (=) ), SArray(setup.twiddle: SFloat(Annon): with lenvar setup.N (=) ))
Looking at intput type array(facc_2xf32_t: with dims setup.N (=) ), with inpname input
Looking at intput type facc_2xf32_t, with inpname None
Looking at intput type float32, with inpname f32_1
Generated result types SFloat(f32_1)
Looking at intput type float32, with inpname f32_2
Generated result types SFloat(f32_2)
Generated result types STypes(SFloat(f32_1), SFloat(f32_2))
Generated result types SArray(input: STypes(SFloat(f32_1), SFloat(f32_2)): with lenvar setup.N (=) )
Looking at intput type array(facc_2xf32_t: with dims setup.N (=) ), with inpname work
Looking at intput type facc_2xf32_t, with inpname None
Looking at intput type float32, with inpname f32_1
Generated result types SFloat(f32_1)
Looking at intput type float32, with inpname f32_2
Generated result types SFloat(f32_2)
Generated result types STypes(SFloat(f32_1), SFloat(f32_2))
Generated result types SArray(work: STypes(SFloat(f32_1), SFloat(f32_2)): with lenvar setup.N (=) )
Looking at intput type int32, with inpname direction
Generated result types SInt(direction)
Looking at intput type array(complex_type: with dims power_quad_acc_n (=) ), with inpname power_quad_acc_input
Looking at intput type complex_type, with inpname None
Looking at intput type float32, with inpname re
Generated result types SFloat(re)
Looking at intput type float32, with inpname im
Generated result types SFloat(im)
Generated result types STypes(SFloat(re), SFloat(im))
Generated result types SArray(power_quad_acc_input: STypes(SFloat(re), SFloat(im)): with lenvar power_quad_acc_n (=) )
Looking at intput type int32, with inpname power_quad_acc_n
Generated result types SInt(power_quad_acc_n)
Looking at intput type array(complex_type: with dims power_quad_acc_n (=) ), with inpname power_quad_acc_output
Looking at intput type complex_type, with inpname None
Looking at intput type float32, with inpname re
Generated result types SFloat(re)
Looking at intput type float32, with inpname im
Generated result types SFloat(im)
Generated result types STypes(SFloat(re), SFloat(im))
Generated result types SArray(power_quad_acc_output: STypes(SFloat(re), SFloat(im)): with lenvar power_quad_acc_n (=) )
Looking at intput type array(facc_2xf32_t: with dims setup.N (/2)), with inpname output
Looking at intput type facc_2xf32_t, with inpname None
Looking at intput type float32, with inpname f32_1
Generated result types SFloat(f32_1)
Looking at intput type float32, with inpname f32_2
Generated result types SFloat(f32_2)
Generated result types STypes(SFloat(f32_1), SFloat(f32_2))
Generated result types SArray(output: STypes(SFloat(f32_1), SFloat(f32_2)): with lenvar setup.N (/2))
Liveout types are SArray(output: STypes(SFloat(f32_1), SFloat(f32_2)): with lenvar setup.N (/2))
Looking at intput type array(complex_type: with dims power_quad_acc_n (=) ), with inpname power_quad_acc_output
Looking at intput type complex_type, with inpname None
Looking at intput type float32, with inpname re
Generated result types SFloat(re)
Looking at intput type float32, with inpname im
Generated result types SFloat(im)
Generated result types STypes(SFloat(re), SFloat(im))
Generated result types SArray(power_quad_acc_output: STypes(SFloat(re), SFloat(im)): with lenvar power_quad_acc_n (=) )
Variable name is SInt(setup.N) (probability1.) 
Variable name is SInt(setup.Ncvec) (probability1.) 
Variable name is SArray(setup.ifac: SInt(Annon): with lenvar 15) (probability1.) 
Variable name is SInt(setup.transform) (probability1.) 
Variable name is SArray(setup.data: SFloat(Annon): with lenvar setup.N (=) ) (probability1.) 
Variable name is SArray(setup.e: SFloat(Annon): with lenvar setup.N (=) ) (probability1.) 
Variable name is SArray(setup.twiddle: SFloat(Annon): with lenvar setup.N (=) ) (probability1.) 
Variable name is SArray(input: STypes(SFloat(f32_1), SFloat(f32_2)): with lenvar setup.N (=) ) (probability1.) 
Variable name is SArray(work: STypes(SFloat(f32_1), SFloat(f32_2)): with lenvar setup.N (=) ) (probability1.) 
Variable name is SInt(direction) (probability1.) 
Got potential dimvars 15, setup.N (=) 
Variable name is SArray(power_quad_acc_output: STypes(SFloat(re), SFloat(im)): with lenvar power_quad_acc_n (=) ) (probability1.) 
Variable name is SInt(setup.N) (probability0.5) 
Variable name is SInt(setup.Ncvec) (probability0.5) 
Variable name is SArray(setup.ifac: SInt(Annon): with lenvar 15) (probability0.5) 
Variable name is SInt(setup.transform) (probability0.5) 
Variable name is SArray(setup.data: SFloat(Annon): with lenvar setup.N (=) ) (probability0.5) 
Variable name is SArray(setup.e: SFloat(Annon): with lenvar setup.N (=) ) (probability0.5) 
Variable name is SArray(setup.twiddle: SFloat(Annon): with lenvar setup.N (=) ) (probability0.5) 
Variable name is SArray(input: STypes(SFloat(f32_1), SFloat(f32_2)): with lenvar setup.N (=) ) (probability0.5) 
Variable name is SArray(work: STypes(SFloat(f32_1), SFloat(f32_2)): with lenvar setup.N (=) ) (probability0.5) 
Variable name is SInt(direction) (probability0.5) 
Types are: 
(postbind: SArray(power_quad_acc_output: STypes(SFloat(re), SFloat(im)): with lenvar power_quad_acc_n (=) ) (probability1.) 
STypes(SInt(setup.N), SInt(setup.Ncvec), SArray(setup.ifac: SInt(Annon): with lenvar 15), SInt(setup.transform), SArray(setup.data: SFloat(Annon): with lenvar setup.N (=) ), SArray(setup.e: SFloat(Annon): with lenvar setup.N (=) ), SArray(setup.twiddle: SFloat(Annon): with lenvar setup.N (=) )) (probability0.5) 
SArray(input: STypes(SFloat(f32_1), SFloat(f32_2)): with lenvar setup.N (=) ) (probability0.5) 
SArray(work: STypes(SFloat(f32_1), SFloat(f32_2)): with lenvar setup.N (=) ) (probability0.5) 
SInt(direction) (probability0.5) )
(prebind: STypes(SInt(setup.N), SInt(setup.Ncvec), SArray(setup.ifac: SInt(Annon): with lenvar 15), SInt(setup.transform), SArray(setup.data: SFloat(Annon): with lenvar setup.N (=) ), SArray(setup.e: SFloat(Annon): with lenvar setup.N (=) ), SArray(setup.twiddle: SFloat(Annon): with lenvar setup.N (=) )) (probability1.) 
SArray(input: STypes(SFloat(f32_1), SFloat(f32_2)): with lenvar setup.N (=) ) (probability1.) 
SArray(work: STypes(SFloat(f32_1), SFloat(f32_2)): with lenvar setup.N (=) ) (probability1.) 
SInt(direction) (probability1.) )
Keys in typemap are 
Looking at intput type pointer(PFFFT_Setup_Desugar), with inpname setup
Looking at intput type PFFFT_Setup_Desugar, with inpname setup
Looking at intput type int32, with inpname N
Generated result types SInt(N)
Looking at intput type int32, with inpname Ncvec
Generated result types SInt(Ncvec)
Looking at intput type array(int32: with dims 15), with inpname ifac
Looking at intput type int32, with inpname None
Generated result types SInt(Annon)
Generated result types SArray(ifac: SInt(Annon): with lenvar 15)
Looking at intput type int32, with inpname transform
Generated result types SInt(transform)
Looking at intput type array(float32: with dims N (=) ), with inpname data
Looking at intput type float32, with inpname None
Generated result types SFloat(Annon)
Generated result types SArray(data: SFloat(Annon): with lenvar setup.N (=) )
Looking at intput type array(float32: with dims N (=) ), with inpname e
Looking at intput type float32, with inpname None
Generated result types SFloat(Annon)
Generated result types SArray(e: SFloat(Annon): with lenvar setup.N (=) )
Looking at intput type array(float32: with dims N (=) ), with inpname twiddle
Looking at intput type float32, with inpname None
Generated result types SFloat(Annon)
Generated result types SArray(twiddle: SFloat(Annon): with lenvar setup.N (=) )
Generated result types STypes(SInt(setup.N), SInt(setup.Ncvec), SArray(setup.ifac: SInt(Annon): with lenvar 15), SInt(setup.transform), SArray(setup.data: SFloat(Annon): with lenvar setup.N (=) ), SArray(setup.e: SFloat(Annon): with lenvar setup.N (=) ), SArray(setup.twiddle: SFloat(Annon): with lenvar setup.N (=) ))
Generated result types STypes(SInt(setup.N), SInt(setup.Ncvec), SArray(setup.ifac: SInt(Annon): with lenvar 15), SInt(setup.transform), SArray(setup.data: SFloat(Annon): with lenvar setup.N (=) ), SArray(setup.e: SFloat(Annon): with lenvar setup.N (=) ), SArray(setup.twiddle: SFloat(Annon): with lenvar setup.N (=) ))
Looking at intput type array(facc_2xf32_t: with dims setup.N (/2)), with inpname input
Looking at intput type facc_2xf32_t, with inpname None
Looking at intput type float32, with inpname f32_1
Generated result types SFloat(f32_1)
Looking at intput type float32, with inpname f32_2
Generated result types SFloat(f32_2)
Generated result types STypes(SFloat(f32_1), SFloat(f32_2))
Generated result types SArray(input: STypes(SFloat(f32_1), SFloat(f32_2)): with lenvar setup.N (/2))
Looking at intput type array(facc_2xf32_t: with dims setup.N (=) ), with inpname work
Looking at intput type facc_2xf32_t, with inpname None
Looking at intput type float32, with inpname f32_1
Generated result types SFloat(f32_1)
Looking at intput type float32, with inpname f32_2
Generated result types SFloat(f32_2)
Generated result types STypes(SFloat(f32_1), SFloat(f32_2))
Generated result types SArray(work: STypes(SFloat(f32_1), SFloat(f32_2)): with lenvar setup.N (=) )
Looking at intput type int32, with inpname direction
Generated result types SInt(direction)
Looking at intput type array(complex_type: with dims power_quad_acc_n (=) ), with inpname power_quad_acc_input
Looking at intput type complex_type, with inpname None
Looking at intput type float32, with inpname re
Generated result types SFloat(re)
Looking at intput type float32, with inpname im
Generated result types SFloat(im)
Generated result types STypes(SFloat(re), SFloat(im))
Generated result types SArray(power_quad_acc_input: STypes(SFloat(re), SFloat(im)): with lenvar power_quad_acc_n (=) )
Looking at intput type int32, with inpname power_quad_acc_n
Generated result types SInt(power_quad_acc_n)
Looking at intput type array(complex_type: with dims power_quad_acc_n (=) ), with inpname power_quad_acc_output
Looking at intput type complex_type, with inpname None
Looking at intput type float32, with inpname re
Generated result types SFloat(re)
Looking at intput type float32, with inpname im
Generated result types SFloat(im)
Generated result types STypes(SFloat(re), SFloat(im))
Generated result types SArray(power_quad_acc_output: STypes(SFloat(re), SFloat(im)): with lenvar power_quad_acc_n (=) )
Looking at intput type array(facc_2xf32_t: with dims setup.N (/2)), with inpname output
Looking at intput type facc_2xf32_t, with inpname None
Looking at intput type float32, with inpname f32_1
Generated result types SFloat(f32_1)
Looking at intput type float32, with inpname f32_2
Generated result types SFloat(f32_2)
Generated result types STypes(SFloat(f32_1), SFloat(f32_2))
Generated result types SArray(output: STypes(SFloat(f32_1), SFloat(f32_2)): with lenvar setup.N (/2))
Liveout types are SArray(output: STypes(SFloat(f32_1), SFloat(f32_2)): with lenvar setup.N (/2))
Looking at intput type array(complex_type: with dims power_quad_acc_n (=) ), with inpname power_quad_acc_output
Looking at intput type complex_type, with inpname None
Looking at intput type float32, with inpname re
Generated result types SFloat(re)
Looking at intput type float32, with inpname im
Generated result types SFloat(im)
Generated result types STypes(SFloat(re), SFloat(im))
Generated result types SArray(power_quad_acc_output: STypes(SFloat(re), SFloat(im)): with lenvar power_quad_acc_n (=) )
Variable name is SInt(setup.N) (probability1.) 
Variable name is SInt(setup.Ncvec) (probability1.) 
Variable name is SArray(setup.ifac: SInt(Annon): with lenvar 15) (probability1.) 
Variable name is SInt(setup.transform) (probability1.) 
Variable name is SArray(setup.data: SFloat(Annon): with lenvar setup.N (=) ) (probability1.) 
Variable name is SArray(setup.e: SFloat(Annon): with lenvar setup.N (=) ) (probability1.) 
Variable name is SArray(setup.twiddle: SFloat(Annon): with lenvar setup.N (=) ) (probability1.) 
Variable name is SArray(input: STypes(SFloat(f32_1), SFloat(f32_2)): with lenvar setup.N (/2)) (probability1.) 
Variable name is SArray(work: STypes(SFloat(f32_1), SFloat(f32_2)): with lenvar setup.N (=) ) (probability1.) 
Variable name is SInt(direction) (probability1.) 
Got potential dimvars 15, setup.N (/2), setup.N (=) 
Variable name is SArray(power_quad_acc_output: STypes(SFloat(re), SFloat(im)): with lenvar power_quad_acc_n (=) ) (probability1.) 
Variable name is SInt(setup.N) (probability0.5) 
Variable name is SInt(setup.Ncvec) (probability0.5) 
Variable name is SArray(setup.ifac: SInt(Annon): with lenvar 15) (probability0.5) 
Variable name is SInt(setup.transform) (probability0.5) 
Variable name is SArray(setup.data: SFloat(Annon): with lenvar setup.N (=) ) (probability0.5) 
Variable name is SArray(setup.e: SFloat(Annon): with lenvar setup.N (=) ) (probability0.5) 
Variable name is SArray(setup.twiddle: SFloat(Annon): with lenvar setup.N (=) ) (probability0.5) 
Variable name is SArray(input: STypes(SFloat(f32_1), SFloat(f32_2)): with lenvar setup.N (/2)) (probability0.5) 
Variable name is SArray(work: STypes(SFloat(f32_1), SFloat(f32_2)): with lenvar setup.N (=) ) (probability0.5) 
Variable name is SInt(direction) (probability0.5) 
Types are: 
(postbind: SArray(power_quad_acc_output: STypes(SFloat(re), SFloat(im)): with lenvar power_quad_acc_n (=) ) (probability1.) 
STypes(SInt(setup.N), SInt(setup.Ncvec), SArray(setup.ifac: SInt(Annon): with lenvar 15), SInt(setup.transform), SArray(setup.data: SFloat(Annon): with lenvar setup.N (=) ), SArray(setup.e: SFloat(Annon): with lenvar setup.N (=) ), SArray(setup.twiddle: SFloat(Annon): with lenvar setup.N (=) )) (probability0.5) 
SArray(input: STypes(SFloat(f32_1), SFloat(f32_2)): with lenvar setup.N (/2)) (probability0.5) 
SArray(work: STypes(SFloat(f32_1), SFloat(f32_2)): with lenvar setup.N (=) ) (probability0.5) 
SInt(direction) (probability0.5) )
(prebind: STypes(SInt(setup.N), SInt(setup.Ncvec), SArray(setup.ifac: SInt(Annon): with lenvar 15), SInt(setup.transform), SArray(setup.data: SFloat(Annon): with lenvar setup.N (=) ), SArray(setup.e: SFloat(Annon): with lenvar setup.N (=) ), SArray(setup.twiddle: SFloat(Annon): with lenvar setup.N (=) )) (probability1.) 
SArray(input: STypes(SFloat(f32_1), SFloat(f32_2)): with lenvar setup.N (/2)) (probability1.) 
SArray(work: STypes(SFloat(f32_1), SFloat(f32_2)): with lenvar setup.N (=) ) (probability1.) 
SInt(direction) (probability1.) )
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at intput type pointer(PFFFT_Setup_Desugar), with inpname setup
Looking at intput type PFFFT_Setup_Desugar, with inpname setup
Looking at intput type int32, with inpname N
Generated result types SInt(N)
Looking at intput type int32, with inpname Ncvec
Generated result types SInt(Ncvec)
Looking at intput type array(int32: with dims 15), with inpname ifac
Looking at intput type int32, with inpname None
Generated result types SInt(Annon)
Generated result types SArray(ifac: SInt(Annon): with lenvar 15)
Looking at intput type int32, with inpname transform
Generated result types SInt(transform)
Looking at intput type array(float32: with dims N (=) ), with inpname data
Looking at intput type float32, with inpname None
Generated result types SFloat(Annon)
Generated result types SArray(data: SFloat(Annon): with lenvar setup.N (=) )
Looking at intput type array(float32: with dims N (=) ), with inpname e
Looking at intput type float32, with inpname None
Generated result types SFloat(Annon)
Generated result types SArray(e: SFloat(Annon): with lenvar setup.N (=) )
Looking at intput type array(float32: with dims N (=) ), with inpname twiddle
Looking at intput type float32, with inpname None
Generated result types SFloat(Annon)
Generated result types SArray(twiddle: SFloat(Annon): with lenvar setup.N (=) )
Generated result types STypes(SInt(setup.N), SInt(setup.Ncvec), SArray(setup.ifac: SInt(Annon): with lenvar 15), SInt(setup.transform), SArray(setup.data: SFloat(Annon): with lenvar setup.N (=) ), SArray(setup.e: SFloat(Annon): with lenvar setup.N (=) ), SArray(setup.twiddle: SFloat(Annon): with lenvar setup.N (=) ))
Generated result types STypes(SInt(setup.N), SInt(setup.Ncvec), SArray(setup.ifac: SInt(Annon): with lenvar 15), SInt(setup.transform), SArray(setup.data: SFloat(Annon): with lenvar setup.N (=) ), SArray(setup.e: SFloat(Annon): with lenvar setup.N (=) ), SArray(setup.twiddle: SFloat(Annon): with lenvar setup.N (=) ))
Looking at intput type array(facc_2xf32_t: with dims setup.N (=) ), with inpname input
Looking at intput type facc_2xf32_t, with inpname None
Looking at intput type float32, with inpname f32_1
Generated result types SFloat(f32_1)
Looking at intput type float32, with inpname f32_2
Generated result types SFloat(f32_2)
Generated result types STypes(SFloat(f32_1), SFloat(f32_2))
Generated result types SArray(input: STypes(SFloat(f32_1), SFloat(f32_2)): with lenvar setup.N (=) )
Looking at intput type array(facc_2xf32_t: with dims setup.N (/2)), with inpname work
Looking at intput type facc_2xf32_t, with inpname None
Looking at intput type float32, with inpname f32_1
Generated result types SFloat(f32_1)
Looking at intput type float32, with inpname f32_2
Generated result types SFloat(f32_2)
Generated result types STypes(SFloat(f32_1), SFloat(f32_2))
Generated result types SArray(work: STypes(SFloat(f32_1), SFloat(f32_2)): with lenvar setup.N (/2))
Looking at intput type int32, with inpname direction
Generated result types SInt(direction)
Looking at intput type array(complex_type: with dims power_quad_acc_n (=) ), with inpname power_quad_acc_input
Looking at intput type complex_type, with inpname None
Looking at intput type float32, with inpname re
Generated result types SFloat(re)
Looking at intput type float32, with inpname im
Generated result types SFloat(im)
Generated result types STypes(SFloat(re), SFloat(im))
Generated result types SArray(power_quad_acc_input: STypes(SFloat(re), SFloat(im)): with lenvar power_quad_acc_n (=) )
Looking at intput type int32, with inpname power_quad_acc_n
Generated result types SInt(power_quad_acc_n)
Looking at intput type array(complex_type: with dims power_quad_acc_n (=) ), with inpname power_quad_acc_output
Looking at intput type complex_type, with inpname None
Looking at intput type float32, with inpname re
Generated result types SFloat(re)
Looking at intput type float32, with inpname im
Generated result types SFloat(im)
Generated result types STypes(SFloat(re), SFloat(im))
Generated result types SArray(power_quad_acc_output: STypes(SFloat(re), SFloat(im)): with lenvar power_quad_acc_n (=) )
Looking at intput type array(facc_2xf32_t: with dims setup.N (=) ), with inpname output
Looking at intput type facc_2xf32_t, with inpname None
Looking at intput type float32, with inpname f32_1
Generated result types SFloat(f32_1)
Looking at intput type float32, with inpname f32_2
Generated result types SFloat(f32_2)
Generated result types STypes(SFloat(f32_1), SFloat(f32_2))
Generated result types SArray(output: STypes(SFloat(f32_1), SFloat(f32_2)): with lenvar setup.N (=) )
Liveout types are SArray(output: STypes(SFloat(f32_1), SFloat(f32_2)): with lenvar setup.N (=) )
Looking at intput type array(complex_type: with dims power_quad_acc_n (=) ), with inpname power_quad_acc_output
Looking at intput type complex_type, with inpname None
Looking at intput type float32, with inpname re
Generated result types SFloat(re)
Looking at intput type float32, with inpname im
Generated result types SFloat(im)
Generated result types STypes(SFloat(re), SFloat(im))
Generated result types SArray(power_quad_acc_output: STypes(SFloat(re), SFloat(im)): with lenvar power_quad_acc_n (=) )
Variable name is SInt(setup.N) (probability1.) 
Variable name is SInt(setup.Ncvec) (probability1.) 
Variable name is SArray(setup.ifac: SInt(Annon): with lenvar 15) (probability1.) 
Variable name is SInt(setup.transform) (probability1.) 
Variable name is SArray(setup.data: SFloat(Annon): with lenvar setup.N (=) ) (probability1.) 
Variable name is SArray(setup.e: SFloat(Annon): with lenvar setup.N (=) ) (probability1.) 
Variable name is SArray(setup.twiddle: SFloat(Annon): with lenvar setup.N (=) ) (probability1.) 
Variable name is SArray(input: STypes(SFloat(f32_1), SFloat(f32_2)): with lenvar setup.N (=) ) (probability1.) 
Variable name is SArray(work: STypes(SFloat(f32_1), SFloat(f32_2)): with lenvar setup.N (/2)) (probability1.) 
Variable name is SInt(direction) (probability1.) 
Got potential dimvars 15, setup.N (=) , setup.N (/2)
Variable name is SArray(power_quad_acc_output: STypes(SFloat(re), SFloat(im)): with lenvar power_quad_acc_n (=) ) (probability1.) 
Variable name is SInt(setup.N) (probability0.5) 
Variable name is SInt(setup.Ncvec) (probability0.5) 
Variable name is SArray(setup.ifac: SInt(Annon): with lenvar 15) (probability0.5) 
Variable name is SInt(setup.transform) (probability0.5) 
Variable name is SArray(setup.data: SFloat(Annon): with lenvar setup.N (=) ) (probability0.5) 
Variable name is SArray(setup.e: SFloat(Annon): with lenvar setup.N (=) ) (probability0.5) 
Variable name is SArray(setup.twiddle: SFloat(Annon): with lenvar setup.N (=) ) (probability0.5) 
Variable name is SArray(input: STypes(SFloat(f32_1), SFloat(f32_2)): with lenvar setup.N (=) ) (probability0.5) 
Variable name is SArray(work: STypes(SFloat(f32_1), SFloat(f32_2)): with lenvar setup.N (/2)) (probability0.5) 
Variable name is SInt(direction) (probability0.5) 
Types are: 
(postbind: SArray(power_quad_acc_output: STypes(SFloat(re), SFloat(im)): with lenvar power_quad_acc_n (=) ) (probability1.) 
STypes(SInt(setup.N), SInt(setup.Ncvec), SArray(setup.ifac: SInt(Annon): with lenvar 15), SInt(setup.transform), SArray(setup.data: SFloat(Annon): with lenvar setup.N (=) ), SArray(setup.e: SFloat(Annon): with lenvar setup.N (=) ), SArray(setup.twiddle: SFloat(Annon): with lenvar setup.N (=) )) (probability0.5) 
SArray(input: STypes(SFloat(f32_1), SFloat(f32_2)): with lenvar setup.N (=) ) (probability0.5) 
SArray(work: STypes(SFloat(f32_1), SFloat(f32_2)): with lenvar setup.N (/2)) (probability0.5) 
SInt(direction) (probability0.5) )
(prebind: STypes(SInt(setup.N), SInt(setup.Ncvec), SArray(setup.ifac: SInt(Annon): with lenvar 15), SInt(setup.transform), SArray(setup.data: SFloat(Annon): with lenvar setup.N (=) ), SArray(setup.e: SFloat(Annon): with lenvar setup.N (=) ), SArray(setup.twiddle: SFloat(Annon): with lenvar setup.N (=) )) (probability1.) 
SArray(input: STypes(SFloat(f32_1), SFloat(f32_2)): with lenvar setup.N (=) ) (probability1.) 
SArray(work: STypes(SFloat(f32_1), SFloat(f32_2)): with lenvar setup.N (/2)) (probability1.) 
SInt(direction) (probability1.) )
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at intput type pointer(PFFFT_Setup_Desugar), with inpname setup
Looking at intput type PFFFT_Setup_Desugar, with inpname setup
Looking at intput type int32, with inpname N
Generated result types SInt(N)
Looking at intput type int32, with inpname Ncvec
Generated result types SInt(Ncvec)
Looking at intput type array(int32: with dims 15), with inpname ifac
Looking at intput type int32, with inpname None
Generated result types SInt(Annon)
Generated result types SArray(ifac: SInt(Annon): with lenvar 15)
Looking at intput type int32, with inpname transform
Generated result types SInt(transform)
Looking at intput type array(float32: with dims N (=) ), with inpname data
Looking at intput type float32, with inpname None
Generated result types SFloat(Annon)
Generated result types SArray(data: SFloat(Annon): with lenvar setup.N (=) )
Looking at intput type array(float32: with dims N (=) ), with inpname e
Looking at intput type float32, with inpname None
Generated result types SFloat(Annon)
Generated result types SArray(e: SFloat(Annon): with lenvar setup.N (=) )
Looking at intput type array(float32: with dims N (=) ), with inpname twiddle
Looking at intput type float32, with inpname None
Generated result types SFloat(Annon)
Generated result types SArray(twiddle: SFloat(Annon): with lenvar setup.N (=) )
Generated result types STypes(SInt(setup.N), SInt(setup.Ncvec), SArray(setup.ifac: SInt(Annon): with lenvar 15), SInt(setup.transform), SArray(setup.data: SFloat(Annon): with lenvar setup.N (=) ), SArray(setup.e: SFloat(Annon): with lenvar setup.N (=) ), SArray(setup.twiddle: SFloat(Annon): with lenvar setup.N (=) ))
Generated result types STypes(SInt(setup.N), SInt(setup.Ncvec), SArray(setup.ifac: SInt(Annon): with lenvar 15), SInt(setup.transform), SArray(setup.data: SFloat(Annon): with lenvar setup.N (=) ), SArray(setup.e: SFloat(Annon): with lenvar setup.N (=) ), SArray(setup.twiddle: SFloat(Annon): with lenvar setup.N (=) ))
Looking at intput type array(facc_2xf32_t: with dims setup.N (/2)), with inpname input
Looking at intput type facc_2xf32_t, with inpname None
Looking at intput type float32, with inpname f32_1
Generated result types SFloat(f32_1)
Looking at intput type float32, with inpname f32_2
Generated result types SFloat(f32_2)
Generated result types STypes(SFloat(f32_1), SFloat(f32_2))
Generated result types SArray(input: STypes(SFloat(f32_1), SFloat(f32_2)): with lenvar setup.N (/2))
Looking at intput type array(facc_2xf32_t: with dims setup.N (/2)), with inpname work
Looking at intput type facc_2xf32_t, with inpname None
Looking at intput type float32, with inpname f32_1
Generated result types SFloat(f32_1)
Looking at intput type float32, with inpname f32_2
Generated result types SFloat(f32_2)
Generated result types STypes(SFloat(f32_1), SFloat(f32_2))
Generated result types SArray(work: STypes(SFloat(f32_1), SFloat(f32_2)): with lenvar setup.N (/2))
Looking at intput type int32, with inpname direction
Generated result types SInt(direction)
Looking at intput type array(complex_type: with dims power_quad_acc_n (=) ), with inpname power_quad_acc_input
Looking at intput type complex_type, with inpname None
Looking at intput type float32, with inpname re
Generated result types SFloat(re)
Looking at intput type float32, with inpname im
Generated result types SFloat(im)
Generated result types STypes(SFloat(re), SFloat(im))
Generated result types SArray(power_quad_acc_input: STypes(SFloat(re), SFloat(im)): with lenvar power_quad_acc_n (=) )
Looking at intput type int32, with inpname power_quad_acc_n
Generated result types SInt(power_quad_acc_n)
Looking at intput type array(complex_type: with dims power_quad_acc_n (=) ), with inpname power_quad_acc_output
Looking at intput type complex_type, with inpname None
Looking at intput type float32, with inpname re
Generated result types SFloat(re)
Looking at intput type float32, with inpname im
Generated result types SFloat(im)
Generated result types STypes(SFloat(re), SFloat(im))
Generated result types SArray(power_quad_acc_output: STypes(SFloat(re), SFloat(im)): with lenvar power_quad_acc_n (=) )
Looking at intput type array(facc_2xf32_t: with dims setup.N (=) ), with inpname output
Looking at intput type facc_2xf32_t, with inpname None
Looking at intput type float32, with inpname f32_1
Generated result types SFloat(f32_1)
Looking at intput type float32, with inpname f32_2
Generated result types SFloat(f32_2)
Generated result types STypes(SFloat(f32_1), SFloat(f32_2))
Generated result types SArray(output: STypes(SFloat(f32_1), SFloat(f32_2)): with lenvar setup.N (=) )
Liveout types are SArray(output: STypes(SFloat(f32_1), SFloat(f32_2)): with lenvar setup.N (=) )
Looking at intput type array(complex_type: with dims power_quad_acc_n (=) ), with inpname power_quad_acc_output
Looking at intput type complex_type, with inpname None
Looking at intput type float32, with inpname re
Generated result types SFloat(re)
Looking at intput type float32, with inpname im
Generated result types SFloat(im)
Generated result types STypes(SFloat(re), SFloat(im))
Generated result types SArray(power_quad_acc_output: STypes(SFloat(re), SFloat(im)): with lenvar power_quad_acc_n (=) )
Variable name is SInt(setup.N) (probability1.) 
Variable name is SInt(setup.Ncvec) (probability1.) 
Variable name is SArray(setup.ifac: SInt(Annon): with lenvar 15) (probability1.) 
Variable name is SInt(setup.transform) (probability1.) 
Variable name is SArray(setup.data: SFloat(Annon): with lenvar setup.N (=) ) (probability1.) 
Variable name is SArray(setup.e: SFloat(Annon): with lenvar setup.N (=) ) (probability1.) 
Variable name is SArray(setup.twiddle: SFloat(Annon): with lenvar setup.N (=) ) (probability1.) 
Variable name is SArray(input: STypes(SFloat(f32_1), SFloat(f32_2)): with lenvar setup.N (/2)) (probability1.) 
Variable name is SArray(work: STypes(SFloat(f32_1), SFloat(f32_2)): with lenvar setup.N (/2)) (probability1.) 
Variable name is SInt(direction) (probability1.) 
Got potential dimvars 15, setup.N (=) , setup.N (/2)
Variable name is SArray(power_quad_acc_output: STypes(SFloat(re), SFloat(im)): with lenvar power_quad_acc_n (=) ) (probability1.) 
Variable name is SInt(setup.N) (probability0.5) 
Variable name is SInt(setup.Ncvec) (probability0.5) 
Variable name is SArray(setup.ifac: SInt(Annon): with lenvar 15) (probability0.5) 
Variable name is SInt(setup.transform) (probability0.5) 
Variable name is SArray(setup.data: SFloat(Annon): with lenvar setup.N (=) ) (probability0.5) 
Variable name is SArray(setup.e: SFloat(Annon): with lenvar setup.N (=) ) (probability0.5) 
Variable name is SArray(setup.twiddle: SFloat(Annon): with lenvar setup.N (=) ) (probability0.5) 
Variable name is SArray(input: STypes(SFloat(f32_1), SFloat(f32_2)): with lenvar setup.N (/2)) (probability0.5) 
Variable name is SArray(work: STypes(SFloat(f32_1), SFloat(f32_2)): with lenvar setup.N (/2)) (probability0.5) 
Variable name is SInt(direction) (probability0.5) 
Types are: 
(postbind: SArray(power_quad_acc_output: STypes(SFloat(re), SFloat(im)): with lenvar power_quad_acc_n (=) ) (probability1.) 
STypes(SInt(setup.N), SInt(setup.Ncvec), SArray(setup.ifac: SInt(Annon): with lenvar 15), SInt(setup.transform), SArray(setup.data: SFloat(Annon): with lenvar setup.N (=) ), SArray(setup.e: SFloat(Annon): with lenvar setup.N (=) ), SArray(setup.twiddle: SFloat(Annon): with lenvar setup.N (=) )) (probability0.5) 
SArray(input: STypes(SFloat(f32_1), SFloat(f32_2)): with lenvar setup.N (/2)) (probability0.5) 
SArray(work: STypes(SFloat(f32_1), SFloat(f32_2)): with lenvar setup.N (/2)) (probability0.5) 
SInt(direction) (probability0.5) )
(prebind: STypes(SInt(setup.N), SInt(setup.Ncvec), SArray(setup.ifac: SInt(Annon): with lenvar 15), SInt(setup.transform), SArray(setup.data: SFloat(Annon): with lenvar setup.N (=) ), SArray(setup.e: SFloat(Annon): with lenvar setup.N (=) ), SArray(setup.twiddle: SFloat(Annon): with lenvar setup.N (=) )) (probability1.) 
SArray(input: STypes(SFloat(f32_1), SFloat(f32_2)): with lenvar setup.N (/2)) (probability1.) 
SArray(work: STypes(SFloat(f32_1), SFloat(f32_2)): with lenvar setup.N (/2)) (probability1.) 
SInt(direction) (probability1.) )
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at intput type pointer(PFFFT_Setup_Desugar), with inpname setup
Looking at intput type PFFFT_Setup_Desugar, with inpname setup
Looking at intput type int32, with inpname N
Generated result types SInt(N)
Looking at intput type int32, with inpname Ncvec
Generated result types SInt(Ncvec)
Looking at intput type array(int32: with dims 15), with inpname ifac
Looking at intput type int32, with inpname None
Generated result types SInt(Annon)
Generated result types SArray(ifac: SInt(Annon): with lenvar 15)
Looking at intput type int32, with inpname transform
Generated result types SInt(transform)
Looking at intput type array(float32: with dims N (=) ), with inpname data
Looking at intput type float32, with inpname None
Generated result types SFloat(Annon)
Generated result types SArray(data: SFloat(Annon): with lenvar setup.N (=) )
Looking at intput type array(float32: with dims N (=) ), with inpname e
Looking at intput type float32, with inpname None
Generated result types SFloat(Annon)
Generated result types SArray(e: SFloat(Annon): with lenvar setup.N (=) )
Looking at intput type array(float32: with dims N (=) ), with inpname twiddle
Looking at intput type float32, with inpname None
Generated result types SFloat(Annon)
Generated result types SArray(twiddle: SFloat(Annon): with lenvar setup.N (=) )
Generated result types STypes(SInt(setup.N), SInt(setup.Ncvec), SArray(setup.ifac: SInt(Annon): with lenvar 15), SInt(setup.transform), SArray(setup.data: SFloat(Annon): with lenvar setup.N (=) ), SArray(setup.e: SFloat(Annon): with lenvar setup.N (=) ), SArray(setup.twiddle: SFloat(Annon): with lenvar setup.N (=) ))
Generated result types STypes(SInt(setup.N), SInt(setup.Ncvec), SArray(setup.ifac: SInt(Annon): with lenvar 15), SInt(setup.transform), SArray(setup.data: SFloat(Annon): with lenvar setup.N (=) ), SArray(setup.e: SFloat(Annon): with lenvar setup.N (=) ), SArray(setup.twiddle: SFloat(Annon): with lenvar setup.N (=) ))
Looking at intput type array(facc_2xf32_t: with dims setup.N (=) ), with inpname input
Looking at intput type facc_2xf32_t, with inpname None
Looking at intput type float32, with inpname f32_1
Generated result types SFloat(f32_1)
Looking at intput type float32, with inpname f32_2
Generated result types SFloat(f32_2)
Generated result types STypes(SFloat(f32_1), SFloat(f32_2))
Generated result types SArray(input: STypes(SFloat(f32_1), SFloat(f32_2)): with lenvar setup.N (=) )
Looking at intput type array(facc_2xf32_t: with dims setup.N (/2)), with inpname work
Looking at intput type facc_2xf32_t, with inpname None
Looking at intput type float32, with inpname f32_1
Generated result types SFloat(f32_1)
Looking at intput type float32, with inpname f32_2
Generated result types SFloat(f32_2)
Generated result types STypes(SFloat(f32_1), SFloat(f32_2))
Generated result types SArray(work: STypes(SFloat(f32_1), SFloat(f32_2)): with lenvar setup.N (/2))
Looking at intput type int32, with inpname direction
Generated result types SInt(direction)
Looking at intput type array(complex_type: with dims power_quad_acc_n (=) ), with inpname power_quad_acc_input
Looking at intput type complex_type, with inpname None
Looking at intput type float32, with inpname re
Generated result types SFloat(re)
Looking at intput type float32, with inpname im
Generated result types SFloat(im)
Generated result types STypes(SFloat(re), SFloat(im))
Generated result types SArray(power_quad_acc_input: STypes(SFloat(re), SFloat(im)): with lenvar power_quad_acc_n (=) )
Looking at intput type int32, with inpname power_quad_acc_n
Generated result types SInt(power_quad_acc_n)
Looking at intput type array(complex_type: with dims power_quad_acc_n (=) ), with inpname power_quad_acc_output
Looking at intput type complex_type, with inpname None
Looking at intput type float32, with inpname re
Generated result types SFloat(re)
Looking at intput type float32, with inpname im
Generated result types SFloat(im)
Generated result types STypes(SFloat(re), SFloat(im))
Generated result types SArray(power_quad_acc_output: STypes(SFloat(re), SFloat(im)): with lenvar power_quad_acc_n (=) )
Looking at intput type array(facc_2xf32_t: with dims setup.N (/2)), with inpname output
Looking at intput type facc_2xf32_t, with inpname None
Looking at intput type float32, with inpname f32_1
Generated result types SFloat(f32_1)
Looking at intput type float32, with inpname f32_2
Generated result types SFloat(f32_2)
Generated result types STypes(SFloat(f32_1), SFloat(f32_2))
Generated result types SArray(output: STypes(SFloat(f32_1), SFloat(f32_2)): with lenvar setup.N (/2))
Liveout types are SArray(output: STypes(SFloat(f32_1), SFloat(f32_2)): with lenvar setup.N (/2))
Looking at intput type array(complex_type: with dims power_quad_acc_n (=) ), with inpname power_quad_acc_output
Looking at intput type complex_type, with inpname None
Looking at intput type float32, with inpname re
Generated result types SFloat(re)
Looking at intput type float32, with inpname im
Generated result types SFloat(im)
Generated result types STypes(SFloat(re), SFloat(im))
Generated result types SArray(power_quad_acc_output: STypes(SFloat(re), SFloat(im)): with lenvar power_quad_acc_n (=) )
Variable name is SInt(setup.N) (probability1.) 
Variable name is SInt(setup.Ncvec) (probability1.) 
Variable name is SArray(setup.ifac: SInt(Annon): with lenvar 15) (probability1.) 
Variable name is SInt(setup.transform) (probability1.) 
Variable name is SArray(setup.data: SFloat(Annon): with lenvar setup.N (=) ) (probability1.) 
Variable name is SArray(setup.e: SFloat(Annon): with lenvar setup.N (=) ) (probability1.) 
Variable name is SArray(setup.twiddle: SFloat(Annon): with lenvar setup.N (=) ) (probability1.) 
Variable name is SArray(input: STypes(SFloat(f32_1), SFloat(f32_2)): with lenvar setup.N (=) ) (probability1.) 
Variable name is SArray(work: STypes(SFloat(f32_1), SFloat(f32_2)): with lenvar setup.N (/2)) (probability1.) 
Variable name is SInt(direction) (probability1.) 
Got potential dimvars 15, setup.N (=) , setup.N (/2)
Variable name is SArray(power_quad_acc_output: STypes(SFloat(re), SFloat(im)): with lenvar power_quad_acc_n (=) ) (probability1.) 
Variable name is SInt(setup.N) (probability0.5) 
Variable name is SInt(setup.Ncvec) (probability0.5) 
Variable name is SArray(setup.ifac: SInt(Annon): with lenvar 15) (probability0.5) 
Variable name is SInt(setup.transform) (probability0.5) 
Variable name is SArray(setup.data: SFloat(Annon): with lenvar setup.N (=) ) (probability0.5) 
Variable name is SArray(setup.e: SFloat(Annon): with lenvar setup.N (=) ) (probability0.5) 
Variable name is SArray(setup.twiddle: SFloat(Annon): with lenvar setup.N (=) ) (probability0.5) 
Variable name is SArray(input: STypes(SFloat(f32_1), SFloat(f32_2)): with lenvar setup.N (=) ) (probability0.5) 
Variable name is SArray(work: STypes(SFloat(f32_1), SFloat(f32_2)): with lenvar setup.N (/2)) (probability0.5) 
Variable name is SInt(direction) (probability0.5) 
Types are: 
(postbind: SArray(power_quad_acc_output: STypes(SFloat(re), SFloat(im)): with lenvar power_quad_acc_n (=) ) (probability1.) 
STypes(SInt(setup.N), SInt(setup.Ncvec), SArray(setup.ifac: SInt(Annon): with lenvar 15), SInt(setup.transform), SArray(setup.data: SFloat(Annon): with lenvar setup.N (=) ), SArray(setup.e: SFloat(Annon): with lenvar setup.N (=) ), SArray(setup.twiddle: SFloat(Annon): with lenvar setup.N (=) )) (probability0.5) 
SArray(input: STypes(SFloat(f32_1), SFloat(f32_2)): with lenvar setup.N (=) ) (probability0.5) 
SArray(work: STypes(SFloat(f32_1), SFloat(f32_2)): with lenvar setup.N (/2)) (probability0.5) 
SInt(direction) (probability0.5) )
(prebind: STypes(SInt(setup.N), SInt(setup.Ncvec), SArray(setup.ifac: SInt(Annon): with lenvar 15), SInt(setup.transform), SArray(setup.data: SFloat(Annon): with lenvar setup.N (=) ), SArray(setup.e: SFloat(Annon): with lenvar setup.N (=) ), SArray(setup.twiddle: SFloat(Annon): with lenvar setup.N (=) )) (probability1.) 
SArray(input: STypes(SFloat(f32_1), SFloat(f32_2)): with lenvar setup.N (=) ) (probability1.) 
SArray(work: STypes(SFloat(f32_1), SFloat(f32_2)): with lenvar setup.N (/2)) (probability1.) 
SInt(direction) (probability1.) )
Keys in typemap are 
Looking at intput type pointer(PFFFT_Setup_Desugar), with inpname setup
Looking at intput type PFFFT_Setup_Desugar, with inpname setup
Looking at intput type int32, with inpname N
Generated result types SInt(N)
Looking at intput type int32, with inpname Ncvec
Generated result types SInt(Ncvec)
Looking at intput type array(int32: with dims 15), with inpname ifac
Looking at intput type int32, with inpname None
Generated result types SInt(Annon)
Generated result types SArray(ifac: SInt(Annon): with lenvar 15)
Looking at intput type int32, with inpname transform
Generated result types SInt(transform)
Looking at intput type array(float32: with dims N (=) ), with inpname data
Looking at intput type float32, with inpname None
Generated result types SFloat(Annon)
Generated result types SArray(data: SFloat(Annon): with lenvar setup.N (=) )
Looking at intput type array(float32: with dims N (=) ), with inpname e
Looking at intput type float32, with inpname None
Generated result types SFloat(Annon)
Generated result types SArray(e: SFloat(Annon): with lenvar setup.N (=) )
Looking at intput type array(float32: with dims N (=) ), with inpname twiddle
Looking at intput type float32, with inpname None
Generated result types SFloat(Annon)
Generated result types SArray(twiddle: SFloat(Annon): with lenvar setup.N (=) )
Generated result types STypes(SInt(setup.N), SInt(setup.Ncvec), SArray(setup.ifac: SInt(Annon): with lenvar 15), SInt(setup.transform), SArray(setup.data: SFloat(Annon): with lenvar setup.N (=) ), SArray(setup.e: SFloat(Annon): with lenvar setup.N (=) ), SArray(setup.twiddle: SFloat(Annon): with lenvar setup.N (=) ))
Generated result types STypes(SInt(setup.N), SInt(setup.Ncvec), SArray(setup.ifac: SInt(Annon): with lenvar 15), SInt(setup.transform), SArray(setup.data: SFloat(Annon): with lenvar setup.N (=) ), SArray(setup.e: SFloat(Annon): with lenvar setup.N (=) ), SArray(setup.twiddle: SFloat(Annon): with lenvar setup.N (=) ))
Looking at intput type array(facc_2xf32_t: with dims setup.N (/2)), with inpname input
Looking at intput type facc_2xf32_t, with inpname None
Looking at intput type float32, with inpname f32_1
Generated result types SFloat(f32_1)
Looking at intput type float32, with inpname f32_2
Generated result types SFloat(f32_2)
Generated result types STypes(SFloat(f32_1), SFloat(f32_2))
Generated result types SArray(input: STypes(SFloat(f32_1), SFloat(f32_2)): with lenvar setup.N (/2))
Looking at intput type array(facc_2xf32_t: with dims setup.N (/2)), with inpname work
Looking at intput type facc_2xf32_t, with inpname None
Looking at intput type float32, with inpname f32_1
Generated result types SFloat(f32_1)
Looking at intput type float32, with inpname f32_2
Generated result types SFloat(f32_2)
Generated result types STypes(SFloat(f32_1), SFloat(f32_2))
Generated result types SArray(work: STypes(SFloat(f32_1), SFloat(f32_2)): with lenvar setup.N (/2))
Looking at intput type int32, with inpname direction
Generated result types SInt(direction)
Looking at intput type array(complex_type: with dims power_quad_acc_n (=) ), with inpname power_quad_acc_input
Looking at intput type complex_type, with inpname None
Looking at intput type float32, with inpname re
Generated result types SFloat(re)
Looking at intput type float32, with inpname im
Generated result types SFloat(im)
Generated result types STypes(SFloat(re), SFloat(im))
Generated result types SArray(power_quad_acc_input: STypes(SFloat(re), SFloat(im)): with lenvar power_quad_acc_n (=) )
Looking at intput type int32, with inpname power_quad_acc_n
Generated result types SInt(power_quad_acc_n)
Looking at intput type array(complex_type: with dims power_quad_acc_n (=) ), with inpname power_quad_acc_output
Looking at intput type complex_type, with inpname None
Looking at intput type float32, with inpname re
Generated result types SFloat(re)
Looking at intput type float32, with inpname im
Generated result types SFloat(im)
Generated result types STypes(SFloat(re), SFloat(im))
Generated result types SArray(power_quad_acc_output: STypes(SFloat(re), SFloat(im)): with lenvar power_quad_acc_n (=) )
Looking at intput type array(facc_2xf32_t: with dims setup.N (/2)), with inpname output
Looking at intput type facc_2xf32_t, with inpname None
Looking at intput type float32, with inpname f32_1
Generated result types SFloat(f32_1)
Looking at intput type float32, with inpname f32_2
Generated result types SFloat(f32_2)
Generated result types STypes(SFloat(f32_1), SFloat(f32_2))
Generated result types SArray(output: STypes(SFloat(f32_1), SFloat(f32_2)): with lenvar setup.N (/2))
Liveout types are SArray(output: STypes(SFloat(f32_1), SFloat(f32_2)): with lenvar setup.N (/2))
Looking at intput type array(complex_type: with dims power_quad_acc_n (=) ), with inpname power_quad_acc_output
Looking at intput type complex_type, with inpname None
Looking at intput type float32, with inpname re
Generated result types SFloat(re)
Looking at intput type float32, with inpname im
Generated result types SFloat(im)
Generated result types STypes(SFloat(re), SFloat(im))
Generated result types SArray(power_quad_acc_output: STypes(SFloat(re), SFloat(im)): with lenvar power_quad_acc_n (=) )
Variable name is SInt(setup.N) (probability1.) 
Variable name is SInt(setup.Ncvec) (probability1.) 
Variable name is SArray(setup.ifac: SInt(Annon): with lenvar 15) (probability1.) 
Variable name is SInt(setup.transform) (probability1.) 
Variable name is SArray(setup.data: SFloat(Annon): with lenvar setup.N (=) ) (probability1.) 
Variable name is SArray(setup.e: SFloat(Annon): with lenvar setup.N (=) ) (probability1.) 
Variable name is SArray(setup.twiddle: SFloat(Annon): with lenvar setup.N (=) ) (probability1.) 
Variable name is SArray(input: STypes(SFloat(f32_1), SFloat(f32_2)): with lenvar setup.N (/2)) (probability1.) 
Variable name is SArray(work: STypes(SFloat(f32_1), SFloat(f32_2)): with lenvar setup.N (/2)) (probability1.) 
Variable name is SInt(direction) (probability1.) 
Got potential dimvars 15, setup.N (=) , setup.N (/2)
Variable name is SArray(power_quad_acc_output: STypes(SFloat(re), SFloat(im)): with lenvar power_quad_acc_n (=) ) (probability1.) 
Variable name is SInt(setup.N) (probability0.5) 
Variable name is SInt(setup.Ncvec) (probability0.5) 
Variable name is SArray(setup.ifac: SInt(Annon): with lenvar 15) (probability0.5) 
Variable name is SInt(setup.transform) (probability0.5) 
Variable name is SArray(setup.data: SFloat(Annon): with lenvar setup.N (=) ) (probability0.5) 
Variable name is SArray(setup.e: SFloat(Annon): with lenvar setup.N (=) ) (probability0.5) 
Variable name is SArray(setup.twiddle: SFloat(Annon): with lenvar setup.N (=) ) (probability0.5) 
Variable name is SArray(input: STypes(SFloat(f32_1), SFloat(f32_2)): with lenvar setup.N (/2)) (probability0.5) 
Variable name is SArray(work: STypes(SFloat(f32_1), SFloat(f32_2)): with lenvar setup.N (/2)) (probability0.5) 
Variable name is SInt(direction) (probability0.5) 
Types are: 
(postbind: SArray(power_quad_acc_output: STypes(SFloat(re), SFloat(im)): with lenvar power_quad_acc_n (=) ) (probability1.) 
STypes(SInt(setup.N), SInt(setup.Ncvec), SArray(setup.ifac: SInt(Annon): with lenvar 15), SInt(setup.transform), SArray(setup.data: SFloat(Annon): with lenvar setup.N (=) ), SArray(setup.e: SFloat(Annon): with lenvar setup.N (=) ), SArray(setup.twiddle: SFloat(Annon): with lenvar setup.N (=) )) (probability0.5) 
SArray(input: STypes(SFloat(f32_1), SFloat(f32_2)): with lenvar setup.N (/2)) (probability0.5) 
SArray(work: STypes(SFloat(f32_1), SFloat(f32_2)): with lenvar setup.N (/2)) (probability0.5) 
SInt(direction) (probability0.5) )
(prebind: STypes(SInt(setup.N), SInt(setup.Ncvec), SArray(setup.ifac: SInt(Annon): with lenvar 15), SInt(setup.transform), SArray(setup.data: SFloat(Annon): with lenvar setup.N (=) ), SArray(setup.e: SFloat(Annon): with lenvar setup.N (=) ), SArray(setup.twiddle: SFloat(Annon): with lenvar setup.N (=) )) (probability1.) 
SArray(input: STypes(SFloat(f32_1), SFloat(f32_2)): with lenvar setup.N (/2)) (probability1.) 
SArray(work: STypes(SFloat(f32_1), SFloat(f32_2)): with lenvar setup.N (/2)) (probability1.) 
SInt(direction) (probability1.) )
Keys in typemap are 
Looking at intput type pointer(PFFFT_Setup_Desugar), with inpname setup
Looking at intput type PFFFT_Setup_Desugar, with inpname setup
Looking at intput type int32, with inpname N
Generated result types SInt(N)
Looking at intput type int32, with inpname Ncvec
Generated result types SInt(Ncvec)
Looking at intput type array(int32: with dims 15), with inpname ifac
Looking at intput type int32, with inpname None
Generated result types SInt(Annon)
Generated result types SArray(ifac: SInt(Annon): with lenvar 15)
Looking at intput type int32, with inpname transform
Generated result types SInt(transform)
Looking at intput type array(float32: with dims N (=) ), with inpname data
Looking at intput type float32, with inpname None
Generated result types SFloat(Annon)
Generated result types SArray(data: SFloat(Annon): with lenvar setup.N (=) )
Looking at intput type array(float32: with dims N (=) ), with inpname e
Looking at intput type float32, with inpname None
Generated result types SFloat(Annon)
Generated result types SArray(e: SFloat(Annon): with lenvar setup.N (=) )
Looking at intput type array(float32: with dims N (=) ), with inpname twiddle
Looking at intput type float32, with inpname None
Generated result types SFloat(Annon)
Generated result types SArray(twiddle: SFloat(Annon): with lenvar setup.N (=) )
Generated result types STypes(SInt(setup.N), SInt(setup.Ncvec), SArray(setup.ifac: SInt(Annon): with lenvar 15), SInt(setup.transform), SArray(setup.data: SFloat(Annon): with lenvar setup.N (=) ), SArray(setup.e: SFloat(Annon): with lenvar setup.N (=) ), SArray(setup.twiddle: SFloat(Annon): with lenvar setup.N (=) ))
Generated result types STypes(SInt(setup.N), SInt(setup.Ncvec), SArray(setup.ifac: SInt(Annon): with lenvar 15), SInt(setup.transform), SArray(setup.data: SFloat(Annon): with lenvar setup.N (=) ), SArray(setup.e: SFloat(Annon): with lenvar setup.N (=) ), SArray(setup.twiddle: SFloat(Annon): with lenvar setup.N (=) ))
Looking at intput type array(float32: with dims setup.N (=) ), with inpname input
Looking at intput type float32, with inpname None
Generated result types SFloat(Annon)
Generated result types SArray(input: SFloat(Annon): with lenvar setup.N (=) )
Looking at intput type array(float32: with dims setup.N (=) ), with inpname work
Looking at intput type float32, with inpname None
Generated result types SFloat(Annon)
Generated result types SArray(work: SFloat(Annon): with lenvar setup.N (=) )
Looking at intput type int32, with inpname direction
Generated result types SInt(direction)
Looking at intput type array(complex_type: with dims power_quad_acc_n (=) ), with inpname power_quad_acc_input
Looking at intput type complex_type, with inpname None
Looking at intput type float32, with inpname re
Generated result types SFloat(re)
Looking at intput type float32, with inpname im
Generated result types SFloat(im)
Generated result types STypes(SFloat(re), SFloat(im))
Generated result types SArray(power_quad_acc_input: STypes(SFloat(re), SFloat(im)): with lenvar power_quad_acc_n (=) )
Looking at intput type int32, with inpname power_quad_acc_n
Generated result types SInt(power_quad_acc_n)
Looking at intput type array(complex_type: with dims power_quad_acc_n (=) ), with inpname power_quad_acc_output
Looking at intput type complex_type, with inpname None
Looking at intput type float32, with inpname re
Generated result types SFloat(re)
Looking at intput type float32, with inpname im
Generated result types SFloat(im)
Generated result types STypes(SFloat(re), SFloat(im))
Generated result types SArray(power_quad_acc_output: STypes(SFloat(re), SFloat(im)): with lenvar power_quad_acc_n (=) )
Looking at intput type array(float32: with dims setup.N (=) ), with inpname output
Looking at intput type float32, with inpname None
Generated result types SFloat(Annon)
Generated result types SArray(output: SFloat(Annon): with lenvar setup.N (=) )
Liveout types are SArray(output: SFloat(Annon): with lenvar setup.N (=) )
Looking at intput type array(complex_type: with dims power_quad_acc_n (=) ), with inpname power_quad_acc_output
Looking at intput type complex_type, with inpname None
Looking at intput type float32, with inpname re
Generated result types SFloat(re)
Looking at intput type float32, with inpname im
Generated result types SFloat(im)
Generated result types STypes(SFloat(re), SFloat(im))
Generated result types SArray(power_quad_acc_output: STypes(SFloat(re), SFloat(im)): with lenvar power_quad_acc_n (=) )
Variable name is SInt(setup.N) (probability1.) 
Variable name is SInt(setup.Ncvec) (probability1.) 
Variable name is SArray(setup.ifac: SInt(Annon): with lenvar 15) (probability1.) 
Variable name is SInt(setup.transform) (probability1.) 
Variable name is SArray(setup.data: SFloat(Annon): with lenvar setup.N (=) ) (probability1.) 
Variable name is SArray(setup.e: SFloat(Annon): with lenvar setup.N (=) ) (probability1.) 
Variable name is SArray(setup.twiddle: SFloat(Annon): with lenvar setup.N (=) ) (probability1.) 
Variable name is SArray(input: SFloat(Annon): with lenvar setup.N (=) ) (probability1.) 
Variable name is SArray(work: SFloat(Annon): with lenvar setup.N (=) ) (probability1.) 
Variable name is SInt(direction) (probability1.) 
Got potential dimvars 15, setup.N (=) 
Variable name is SArray(power_quad_acc_output: STypes(SFloat(re), SFloat(im)): with lenvar power_quad_acc_n (=) ) (probability1.) 
Variable name is SInt(setup.N) (probability0.5) 
Variable name is SInt(setup.Ncvec) (probability0.5) 
Variable name is SArray(setup.ifac: SInt(Annon): with lenvar 15) (probability0.5) 
Variable name is SInt(setup.transform) (probability0.5) 
Variable name is SArray(setup.data: SFloat(Annon): with lenvar setup.N (=) ) (probability0.5) 
Variable name is SArray(setup.e: SFloat(Annon): with lenvar setup.N (=) ) (probability0.5) 
Variable name is SArray(setup.twiddle: SFloat(Annon): with lenvar setup.N (=) ) (probability0.5) 
Variable name is SArray(input: SFloat(Annon): with lenvar setup.N (=) ) (probability0.5) 
Variable name is SArray(work: SFloat(Annon): with lenvar setup.N (=) ) (probability0.5) 
Variable name is SInt(direction) (probability0.5) 
Types are: 
(postbind: SArray(power_quad_acc_output: STypes(SFloat(re), SFloat(im)): with lenvar power_quad_acc_n (=) ) (probability1.) 
STypes(SInt(setup.N), SInt(setup.Ncvec), SArray(setup.ifac: SInt(Annon): with lenvar 15), SInt(setup.transform), SArray(setup.data: SFloat(Annon): with lenvar setup.N (=) ), SArray(setup.e: SFloat(Annon): with lenvar setup.N (=) ), SArray(setup.twiddle: SFloat(Annon): with lenvar setup.N (=) )) (probability0.5) 
SArray(input: SFloat(Annon): with lenvar setup.N (=) ) (probability0.5) 
SArray(work: SFloat(Annon): with lenvar setup.N (=) ) (probability0.5) 
SInt(direction) (probability0.5) )
(prebind: STypes(SInt(setup.N), SInt(setup.Ncvec), SArray(setup.ifac: SInt(Annon): with lenvar 15), SInt(setup.transform), SArray(setup.data: SFloat(Annon): with lenvar setup.N (=) ), SArray(setup.e: SFloat(Annon): with lenvar setup.N (=) ), SArray(setup.twiddle: SFloat(Annon): with lenvar setup.N (=) )) (probability1.) 
SArray(input: SFloat(Annon): with lenvar setup.N (=) ) (probability1.) 
SArray(work: SFloat(Annon): with lenvar setup.N (=) ) (probability1.) 
SInt(direction) (probability1.) )
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar output, f32_1
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar output, f32_2
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_output, Annon
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_n
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_input, im
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_input, re
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar output, f32_1
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar output, f32_2
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_output, Annon
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_n
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_input, im
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_input, re
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar output, f32_1
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar output, f32_2
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_output, Annon
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_n
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_input, im
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_input, re
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar output, f32_1
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar output, f32_2
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_output, Annon
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_n
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_input, im
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_input, re
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar output, f32_1
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar output, f32_2
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_output, Annon
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_n
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_input, im
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_input, re
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar output, f32_1
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar output, f32_2
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_output, Annon
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_n
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_input, im
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_input, re
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar output, f32_1
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar output, f32_2
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_output, Annon
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_n
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_input, im
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_input, re
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar output, f32_1
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar output, f32_2
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_output, Annon
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_n
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_input, im
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_input, re
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar output, f32_1
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar output, f32_2
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_output, Annon
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_n
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_input, im
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_input, re
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar output, f32_1
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar output, f32_2
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_output, Annon
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_n
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_input, im
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_input, re
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar output, f32_1
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar output, f32_2
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_output, Annon
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_n
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_input, im
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_input, re
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar output, f32_1
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar output, f32_2
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_output, Annon
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_n
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_input, im
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_input, re
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar output, f32_1
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar output, f32_2
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_output, Annon
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_n
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_input, im
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_input, re
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar output, f32_1
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar output, f32_2
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_output, Annon
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_n
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_input, im
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_input, re
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar output, f32_1
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar output, f32_2
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_output, Annon
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_n
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_input, im
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_input, re
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar output, f32_1
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar output, f32_2
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_output, Annon
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_n
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_input, im
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_input, re
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar output, f32_1
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar output, f32_2
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_output, Annon
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_n
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_input, im
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_input, re
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar output, f32_1
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar output, f32_2
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_output, Annon
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_n
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_input, im
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_input, re
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar output, f32_1
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar output, f32_2
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_output, Annon
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_n
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_input, im
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_input, re
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar output, f32_1
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar output, f32_2
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_output, Annon
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_n
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_input, im
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_input, re
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar output, f32_1
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar output, f32_2
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_output, Annon
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_n
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_input, im
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_input, re
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar output, f32_1
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar output, f32_2
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_output, Annon
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_n
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_input, im
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_input, re
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar output, f32_1
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar output, f32_2
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_output, Annon
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_n
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_input, im
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_input, re
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar output, f32_1
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar output, f32_2
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_output, Annon
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_n
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_input, im
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_input, re
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar output, f32_1
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar output, f32_2
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_output, Annon
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_n
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_input, im
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_input, re
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar output, f32_1
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar output, f32_2
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_output, Annon
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_n
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_input, im
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_input, re
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar output, f32_1
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar output, f32_2
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_output, Annon
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_n
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_input, im
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_input, re
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar output, f32_1
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar output, f32_2
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_output, Annon
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_n
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_input, im
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_input, re
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar output, f32_1
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar output, f32_2
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_output, Annon
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_n
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_input, im
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_input, re
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar output, f32_1
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar output, f32_2
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_output, Annon
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_n
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_input, im
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_input, re
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar output, f32_1
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar output, f32_2
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_output, Annon
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_n
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_input, im
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_input, re
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar output, f32_1
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar output, f32_2
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_output, Annon
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_n
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_input, im
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_input, re
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar output, f32_1
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar output, f32_2
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_output, Annon
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_n
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_input, im
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_input, re
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar output, f32_1
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar output, f32_2
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_output, Annon
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_n
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_input, im
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_input, re
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar output, f32_1
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar output, f32_2
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_output, Annon
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_n
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_input, im
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_input, re
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar output, f32_1
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar output, f32_2
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_output, Annon
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_n
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_input, im
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_input, re
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar output, f32_1
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar output, f32_2
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_output, Annon
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_n
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_input, im
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_input, re
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar output, f32_1
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar output, f32_2
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_output, Annon
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_n
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_input, im
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_input, re
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar output, f32_1
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar output, f32_2
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_output, Annon
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_n
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_input, im
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_input, re
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar output, f32_1
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar output, f32_2
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_output, Annon
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_n
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_input, im
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_input, re
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar output, f32_1
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar output, f32_2
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_output, Annon
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_n
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_input, im
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_input, re
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar output, f32_1
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar output, f32_2
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_output, Annon
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_n
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_input, im
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_input, re
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar output, f32_1
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar output, f32_2
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_output, Annon
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_n
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_input, im
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_input, re
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar output, f32_1
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar output, f32_2
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_output, Annon
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_n
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_input, im
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_input, re
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar output, f32_1
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar output, f32_2
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_output, Annon
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_n
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_input, im
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_input, re
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar output, f32_1
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar output, f32_2
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_output, Annon
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_n
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_input, im
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_input, re
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar output, f32_1
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar output, f32_2
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_output, Annon
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_n
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_input, im
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_input, re
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar output, f32_1
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar output, f32_2
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_output, Annon
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_n
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_input, im
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_input, re
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar output, f32_1
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar output, f32_2
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_output, Annon
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_n
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_input, im
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_input, re
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar output, f32_1
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar output, f32_2
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_output, Annon
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_n
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_input, im
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_input, re
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar output, f32_1
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar output, f32_2
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_output, Annon
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_n
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_input, im
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_input, re
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar output, f32_1
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar output, f32_2
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_output, Annon
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_n
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_input, im
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_input, re
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar output, f32_1
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar output, f32_2
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_output, Annon
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_n
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_input, im
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_input, re
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar output, f32_1
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar output, f32_2
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_output, Annon
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_n
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_input, im
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_input, re
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar output, f32_1
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar output, f32_2
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_output, Annon
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_n
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_input, im
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_input, re
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar output, f32_1
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar output, f32_2
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_output, Annon
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_n
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_input, im
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_input, re
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar output, f32_1
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar output, f32_2
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_output, Annon
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_n
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_input, im
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_input, re
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar output, f32_1
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar output, f32_2
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_output, Annon
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_n
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_input, im
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_input, re
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar output, f32_1
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar output, f32_2
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_output, Annon
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_n
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_input, im
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_input, re
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar output, f32_1
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar output, f32_2
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_output, Annon
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_n
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_input, im
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_input, re
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar output, f32_1
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar output, f32_2
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_output, Annon
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_n
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_input, im
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_input, re
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar output, f32_1
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar output, f32_2
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_output, Annon
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_n
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_input, im
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_input, re
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar output, f32_1
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar output, f32_2
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_output, Annon
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_n
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_input, im
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_input, re
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar output, f32_1
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar output, f32_2
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_output, Annon
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_n
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_input, im
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_input, re
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar output, f32_1
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar output, f32_2
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_output, Annon
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_n
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_input, im
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_input, re
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar output, f32_1
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar output, f32_2
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_output, Annon
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_n
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_input, im
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_input, re
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar output, f32_1
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar output, f32_2
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_output, Annon
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_n
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_input, im
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_input, re
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar output, f32_1
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar output, f32_2
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_output, Annon
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_n
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_input, im
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_input, re
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar output, f32_1
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar output, f32_2
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_output, Annon
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_n
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_input, im
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_input, re
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar output, f32_1
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar output, f32_2
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_output, Annon
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_n
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_input, im
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_input, re
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar output, f32_1
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar output, f32_2
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_output, Annon
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_n
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_input, im
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_input, re
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar output, f32_1
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar output, f32_2
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_output, Annon
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_n
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_input, im
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_input, re
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar output, f32_1
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar output, f32_2
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_output, Annon
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_n
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_input, im
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_input, re
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar output, f32_1
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar output, f32_2
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_output, Annon
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_n
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_input, im
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_input, re
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar output, f32_1
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar output, f32_2
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_output, Annon
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_n
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_input, im
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_input, re
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar output, f32_1
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar output, f32_2
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_output, Annon
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_n
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_input, im
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_input, re
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar output, f32_1
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar output, f32_2
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_output, Annon
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_n
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_input, im
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_input, re
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar output, f32_1
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar output, f32_2
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_output, Annon
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_n
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_input, im
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_input, re
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar output, f32_1
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar output, f32_2
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_output, Annon
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_n
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_input, im
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_input, re
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar output, f32_1
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar output, f32_2
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_output, Annon
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_n
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_input, im
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_input, re
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar output, f32_1
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar output, f32_2
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_output, Annon
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_n
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_input, im
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_input, re
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar output, f32_1
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar output, f32_2
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_output, Annon
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_n
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_input, im
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_input, re
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar output, f32_1
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar output, f32_2
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_output, Annon
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_n
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_input, im
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_input, re
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar output, f32_1
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar output, f32_2
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_output, Annon
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_n
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_input, im
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_input, re
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar output, f32_1
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar output, f32_2
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_output, Annon
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_n
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_input, im
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_input, re
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar output, f32_1
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar output, f32_2
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_output, Annon
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_n
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_input, im
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_input, re
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar output, f32_1
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar output, f32_2
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_output, Annon
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_n
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_input, im
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_input, re
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar output, f32_1
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar output, f32_2
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_output, Annon
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_n
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_input, im
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_input, re
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar output, f32_1
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar output, f32_2
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_output, Annon
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_n
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_input, im
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_input, re
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar output, f32_1
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar output, f32_2
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_output, Annon
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_n
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_input, im
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_input, re
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar output, f32_1
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar output, f32_2
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_output, Annon
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_n
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_input, im
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_input, re
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar output, f32_1
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar output, f32_2
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_output, Annon
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_n
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_input, im
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_input, re
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar output, f32_1
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar output, f32_2
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_output, Annon
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_n
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_input, im
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_input, re
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar output, f32_1
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar output, f32_2
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_output, Annon
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_n
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_input, im
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_input, re
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar output, f32_1
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar output, f32_2
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_output, Annon
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_n
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_input, im
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_input, re
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar output, f32_1
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar output, f32_2
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_output, Annon
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_n
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_input, im
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_input, re
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar output, f32_1
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar output, f32_2
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_output, Annon
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_n
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_input, im
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_input, re
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar output, f32_1
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar output, f32_2
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_output, Annon
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_n
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_input, im
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_input, re
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar output, f32_1
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar output, f32_2
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_output, Annon
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_n
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_input, im
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_input, re
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar output, f32_1
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar output, f32_2
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_output, Annon
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_n
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_input, im
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_input, re
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar output, f32_1
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar output, f32_2
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_output, Annon
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_n
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_input, im
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_input, re
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar output, f32_1
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar output, f32_2
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_output, Annon
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_n
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_input, im
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_input, re
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar output, f32_1
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar output, f32_2
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_output, Annon
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_n
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_input, im
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_input, re
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar output, f32_1
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar output, f32_2
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_output, Annon
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_n
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_input, im
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_input, re
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar output, f32_1
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar output, f32_2
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_output, Annon
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_n
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_input, im
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_input, re
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar output, f32_1
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar output, f32_2
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_output, Annon
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_n
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_input, im
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_input, re
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar output, f32_1
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar output, f32_2
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_output, Annon
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_n
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_input, im
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_input, re
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar output, f32_1
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar output, f32_2
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_output, Annon
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_n
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_input, im
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_input, re
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar output, f32_1
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar output, f32_2
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_output, Annon
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_n
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_input, im
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_input, re
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar output, f32_1
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar output, f32_2
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_output, Annon
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_n
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_input, im
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_input, re
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar output, f32_1
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar output, f32_2
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_output, Annon
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_n
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_input, im
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_input, re
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar output, f32_1
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar output, f32_2
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_output, Annon
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_n
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_input, im
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_input, re
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar output, f32_1
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar output, f32_2
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_output, Annon
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_n
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_input, im
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_input, re
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar output, f32_1
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar output, f32_2
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_output, Annon
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_n
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_input, im
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_input, re
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar output, f32_1
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar output, f32_2
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_output, Annon
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_n
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_input, im
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_input, re
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar output, f32_1
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar output, f32_2
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_output, Annon
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_n
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_input, im
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_input, re
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar output, f32_1
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar output, f32_2
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_output, Annon
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_n
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_input, im
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_input, re
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar output, f32_1
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar output, f32_2
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_output, Annon
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_n
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_input, im
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_input, re
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar output, f32_1
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar output, f32_2
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_output, Annon
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_n
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_input, im
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_input, re
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar output, f32_1
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar output, f32_2
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_output, Annon
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_n
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_input, im
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_input, re
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar output, f32_1
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar output, f32_2
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_output, Annon
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_n
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_input, im
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_input, re
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar output, f32_1
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar output, f32_2
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_output, Annon
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_n
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_input, im
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_input, re
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar output, f32_1
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar output, f32_2
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_output, Annon
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_n
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_input, im
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_input, re
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar output, f32_1
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar output, f32_2
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_output, Annon
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_n
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_input, im
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_input, re
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar output, f32_1
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar output, f32_2
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_output, Annon
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_n
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_input, im
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_input, re
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar output, f32_1
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar output, f32_2
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_output, Annon
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_n
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_input, im
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_input, re
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar output, f32_1
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar output, f32_2
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_output, Annon
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_n
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_input, im
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_input, re
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar output, f32_1
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar output, f32_2
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_output, Annon
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_n
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_input, im
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_input, re
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar output, f32_1
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar output, f32_2
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_output, Annon
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_n
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_input, im
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_input, re
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar output, f32_1
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar output, f32_2
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_output, Annon
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_n
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_input, im
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_input, re
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar output, f32_1
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar output, f32_2
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_output, Annon
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_n
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_input, im
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_input, re
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar output, f32_1
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar output, f32_2
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_output, Annon
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_n
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_input, im
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_input, re
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar output, f32_1
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar output, f32_2
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_output, Annon
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_n
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_input, im
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_input, re
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar output, f32_1
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar output, f32_2
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_output, Annon
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_n
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_input, im
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_input, re
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar output, f32_1
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar output, f32_2
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_output, Annon
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_n
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_input, im
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_input, re
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar output, f32_1
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar output, f32_2
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_output, Annon
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_n
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_input, im
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_input, re
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar output, f32_1
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar output, f32_2
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_output, Annon
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_n
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_input, im
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_input, re
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar output, f32_1
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar output, f32_2
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_output, Annon
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_n
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_input, im
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_input, re
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar output, f32_1
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar output, f32_2
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_output, Annon
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_n
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_input, im
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_input, re
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar output, f32_1
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar output, f32_2
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_output, Annon
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_n
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_input, im
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_input, re
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar output, Annon
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_output, Annon
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_n
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_input, im
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_input, re
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar output, Annon
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_output, Annon
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_n
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_input, im
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_input, re
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar output, Annon
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_output, Annon
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_n
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_input, im
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_input, re
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar output, Annon
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_output, Annon
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_n
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_input, im
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_input, re
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar output, Annon
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_output, Annon
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_n
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_input, im
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_input, re
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar output, Annon
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_output, Annon
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_n
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_input, im
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_input, re
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar output, Annon
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_output, Annon
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_n
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_input, im
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_input, re
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar output, Annon
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_output, Annon
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_n
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_input, im
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_input, re
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar output, Annon
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_output, Annon
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_n
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_input, im
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_input, re
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar output, Annon
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_output, Annon
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_n
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_input, im
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_input, re
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar output, Annon
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_output, Annon
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_n
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_input, im
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_input, re
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar output, Annon
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_output, Annon
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_n
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_input, im
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_input, re
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar output, Annon
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_output, Annon
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_n
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_input, im
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_input, re
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar output, Annon
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_output, Annon
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_n
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_input, im
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_input, re
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar output, Annon
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_output, Annon
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_n
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_input, im
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_input, re
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar output, Annon
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_output, Annon
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_n
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_input, im
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_input, re
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar output, Annon
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_output, Annon
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_n
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_input, im
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_input, re
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar output, Annon
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_output, Annon
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_n
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_input, im
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_input, re
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar output, Annon
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_output, Annon
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_n
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_input, im
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_input, re
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar output, Annon
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_output, Annon
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_n
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_input, im
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_input, re
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar output, Annon
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_output, Annon
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_n
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_input, im
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_input, re
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar output, Annon
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_output, Annon
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_n
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_input, im
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_input, re
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar output, Annon
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_output, Annon
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_n
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_input, im
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_input, re
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar output, Annon
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_output, Annon
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_n
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_input, im
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_input, re
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar output, Annon
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_output, Annon
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_n
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_input, im
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_input, re
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar output, Annon
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_output, Annon
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_n
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_input, im
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_input, re
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar output, Annon
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_output, Annon
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_n
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_input, im
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_input, re
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar output, Annon
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_output, Annon
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_n
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_input, im
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_input, re
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar output, Annon
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_output, Annon
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_n
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_input, im
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_input, re
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar output, Annon
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_output, Annon
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_n
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_input, im
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_input, re
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar output, Annon
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_output, Annon
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_n
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_input, im
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_input, re
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar output, Annon
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_output, Annon
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_n
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_input, im
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_input, re
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar output, Annon
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_output, Annon
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_n
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_input, im
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_input, re
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar output, Annon
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_output, Annon
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_n
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_input, im
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_input, re
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar output, Annon
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_output, Annon
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_n
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_input, im
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_input, re
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar output, Annon
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_output, Annon
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_n
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_input, im
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_input, re
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar output, Annon
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_output, Annon
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_n
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_input, im
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_input, re
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar output, Annon
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_output, Annon
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_n
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_input, im
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_input, re
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar output, Annon
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_output, Annon
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_n
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_input, im
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_input, re
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar output, Annon
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_output, Annon
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_n
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_input, im
Keys in typemap are output, power_quad_acc_n, setup, direction, work, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_input, re
Number of skeletons generated is 128
Getting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeNumber of conversion pairs generated is 128
Looking at GIR GIR: Define power_quad_acc_output
Uses: power_quad_acc_n
Defs: power_quad_acc_output.re,power_quad_acc_output.im
Assigns: 

Has unassed use power_quad_acc_n
Looking at GIR GIR: Define power_quad_acc_n
Uses: 
Defs: power_quad_acc_n
Assigns: 

Looking at GIR GIR: power_quad_acc_n = setup.N
Uses: setup.N
Defs: 
Assigns: power_quad_acc_n

Has undefed ass power_quad_acc_n
Looking at GIR GIR: Define power_quad_acc_input
Uses: power_quad_acc_n
Defs: power_quad_acc_input.re,power_quad_acc_input.im
Assigns: 

Has unassed use power_quad_acc_n
Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i2{
power_quad_acc_input[i2].im = setup.e[i2]}
Uses: power_quad_acc_n,setup.e
Defs: 
Assigns: power_quad_acc_input.im

Has unassed use power_quad_acc_n
Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i3{
power_quad_acc_input[i3].re = setup.data[i3]}
Uses: power_quad_acc_n,setup.data
Defs: 
Assigns: power_quad_acc_input.re

Has unassed use power_quad_acc_n
Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i4{
output[i4].f32_1 = power_quad_acc_output[i4].im}
Uses: power_quad_acc_n,power_quad_acc_output.im
Defs: 
Assigns: output.f32_1

Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i5{
output[i5].f32_2 = power_quad_acc_output[i5].re}
Uses: power_quad_acc_n,power_quad_acc_output.re
Defs: 
Assigns: output.f32_2

Looking at GIR GIR: free power_quad_acc_input
Uses: 
Defs: 
Assigns: 

Looking at GIR GIR: free power_quad_acc_output
Uses: 
Defs: 
Assigns: 

Looking at GIR GIR: free power_quad_acc_n
Uses: 
Defs: 
Assigns: 

Looking at GIR GIR: Define power_quad_acc_output
Uses: power_quad_acc_n
Defs: power_quad_acc_output.re,power_quad_acc_output.im
Assigns: 

Has unassed use power_quad_acc_n
Looking at GIR GIR: Define power_quad_acc_n
Uses: 
Defs: power_quad_acc_n
Assigns: 

Looking at GIR GIR: power_quad_acc_n = setup.N
Uses: setup.N
Defs: 
Assigns: power_quad_acc_n

Has undefed ass power_quad_acc_n
Looking at GIR GIR: Define power_quad_acc_input
Uses: power_quad_acc_n
Defs: power_quad_acc_input.re,power_quad_acc_input.im
Assigns: 

Has unassed use power_quad_acc_n
Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i7{
power_quad_acc_input[i7].im = setup.e[i7]}
Uses: power_quad_acc_n,setup.e
Defs: 
Assigns: power_quad_acc_input.im

Has unassed use power_quad_acc_n
Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i8{
power_quad_acc_input[i8].re = setup.data[i8]}
Uses: power_quad_acc_n,setup.data
Defs: 
Assigns: power_quad_acc_input.re

Has unassed use power_quad_acc_n
Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i9{
output[i9].f32_1 = power_quad_acc_output[i9].re}
Uses: power_quad_acc_n,power_quad_acc_output.re
Defs: 
Assigns: output.f32_1

Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i10{
output[i10].f32_2 = power_quad_acc_output[i10].im}
Uses: power_quad_acc_n,power_quad_acc_output.im
Defs: 
Assigns: output.f32_2

Looking at GIR GIR: free power_quad_acc_input
Uses: 
Defs: 
Assigns: 

Looking at GIR GIR: free power_quad_acc_output
Uses: 
Defs: 
Assigns: 

Looking at GIR GIR: free power_quad_acc_n
Uses: 
Defs: 
Assigns: 

Looking at GIR GIR: Define power_quad_acc_output
Uses: power_quad_acc_n
Defs: power_quad_acc_output.re,power_quad_acc_output.im
Assigns: 

Has unassed use power_quad_acc_n
Looking at GIR GIR: Define power_quad_acc_n
Uses: 
Defs: power_quad_acc_n
Assigns: 

Looking at GIR GIR: power_quad_acc_n = setup.N
Uses: setup.N
Defs: 
Assigns: power_quad_acc_n

Has undefed ass power_quad_acc_n
Looking at GIR GIR: Define power_quad_acc_input
Uses: power_quad_acc_n
Defs: power_quad_acc_input.re,power_quad_acc_input.im
Assigns: 

Has unassed use power_quad_acc_n
Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i12{
power_quad_acc_input[i12].im = setup.twiddle[i12]}
Uses: power_quad_acc_n,setup.twiddle
Defs: 
Assigns: power_quad_acc_input.im

Has unassed use power_quad_acc_n
Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i13{
power_quad_acc_input[i13].re = setup.data[i13]}
Uses: power_quad_acc_n,setup.data
Defs: 
Assigns: power_quad_acc_input.re

Has unassed use power_quad_acc_n
Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i14{
output[i14].f32_1 = power_quad_acc_output[i14].im}
Uses: power_quad_acc_n,power_quad_acc_output.im
Defs: 
Assigns: output.f32_1

Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i15{
output[i15].f32_2 = power_quad_acc_output[i15].re}
Uses: power_quad_acc_n,power_quad_acc_output.re
Defs: 
Assigns: output.f32_2

Looking at GIR GIR: free power_quad_acc_input
Uses: 
Defs: 
Assigns: 

Looking at GIR GIR: free power_quad_acc_output
Uses: 
Defs: 
Assigns: 

Looking at GIR GIR: free power_quad_acc_n
Uses: 
Defs: 
Assigns: 

Looking at GIR GIR: Define power_quad_acc_output
Uses: power_quad_acc_n
Defs: power_quad_acc_output.re,power_quad_acc_output.im
Assigns: 

Has unassed use power_quad_acc_n
Looking at GIR GIR: Define power_quad_acc_n
Uses: 
Defs: power_quad_acc_n
Assigns: 

Looking at GIR GIR: power_quad_acc_n = setup.N
Uses: setup.N
Defs: 
Assigns: power_quad_acc_n

Has undefed ass power_quad_acc_n
Looking at GIR GIR: Define power_quad_acc_input
Uses: power_quad_acc_n
Defs: power_quad_acc_input.re,power_quad_acc_input.im
Assigns: 

Has unassed use power_quad_acc_n
Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i17{
power_quad_acc_input[i17].im = setup.twiddle[i17]}
Uses: power_quad_acc_n,setup.twiddle
Defs: 
Assigns: power_quad_acc_input.im

Has unassed use power_quad_acc_n
Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i18{
power_quad_acc_input[i18].re = setup.data[i18]}
Uses: power_quad_acc_n,setup.data
Defs: 
Assigns: power_quad_acc_input.re

Has unassed use power_quad_acc_n
Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i19{
output[i19].f32_1 = power_quad_acc_output[i19].re}
Uses: power_quad_acc_n,power_quad_acc_output.re
Defs: 
Assigns: output.f32_1

Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i20{
output[i20].f32_2 = power_quad_acc_output[i20].im}
Uses: power_quad_acc_n,power_quad_acc_output.im
Defs: 
Assigns: output.f32_2

Looking at GIR GIR: free power_quad_acc_input
Uses: 
Defs: 
Assigns: 

Looking at GIR GIR: free power_quad_acc_output
Uses: 
Defs: 
Assigns: 

Looking at GIR GIR: free power_quad_acc_n
Uses: 
Defs: 
Assigns: 

Looking at GIR GIR: Define power_quad_acc_output
Uses: power_quad_acc_n
Defs: power_quad_acc_output.re,power_quad_acc_output.im
Assigns: 

Has unassed use power_quad_acc_n
Looking at GIR GIR: Define power_quad_acc_n
Uses: 
Defs: power_quad_acc_n
Assigns: 

Looking at GIR GIR: power_quad_acc_n = setup.N
Uses: setup.N
Defs: 
Assigns: power_quad_acc_n

Has undefed ass power_quad_acc_n
Looking at GIR GIR: Define power_quad_acc_input
Uses: power_quad_acc_n
Defs: power_quad_acc_input.re,power_quad_acc_input.im
Assigns: 

Has unassed use power_quad_acc_n
Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i22{
power_quad_acc_input[i22].im = input[i22].f32_1}
Uses: power_quad_acc_n,input.f32_1
Defs: 
Assigns: power_quad_acc_input.im

Has unassed use power_quad_acc_n
Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i23{
power_quad_acc_input[i23].re = setup.data[i23]}
Uses: power_quad_acc_n,setup.data
Defs: 
Assigns: power_quad_acc_input.re

Has unassed use power_quad_acc_n
Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i24{
output[i24].f32_1 = power_quad_acc_output[i24].im}
Uses: power_quad_acc_n,power_quad_acc_output.im
Defs: 
Assigns: output.f32_1

Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i25{
output[i25].f32_2 = power_quad_acc_output[i25].re}
Uses: power_quad_acc_n,power_quad_acc_output.re
Defs: 
Assigns: output.f32_2

Looking at GIR GIR: free power_quad_acc_input
Uses: 
Defs: 
Assigns: 

Looking at GIR GIR: free power_quad_acc_output
Uses: 
Defs: 
Assigns: 

Looking at GIR GIR: free power_quad_acc_n
Uses: 
Defs: 
Assigns: 

Looking at GIR GIR: Define power_quad_acc_output
Uses: power_quad_acc_n
Defs: power_quad_acc_output.re,power_quad_acc_output.im
Assigns: 

Has unassed use power_quad_acc_n
Looking at GIR GIR: Define power_quad_acc_n
Uses: 
Defs: power_quad_acc_n
Assigns: 

Looking at GIR GIR: power_quad_acc_n = setup.N
Uses: setup.N
Defs: 
Assigns: power_quad_acc_n

Has undefed ass power_quad_acc_n
Looking at GIR GIR: Define power_quad_acc_input
Uses: power_quad_acc_n
Defs: power_quad_acc_input.re,power_quad_acc_input.im
Assigns: 

Has unassed use power_quad_acc_n
Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i27{
power_quad_acc_input[i27].im = input[i27].f32_1}
Uses: power_quad_acc_n,input.f32_1
Defs: 
Assigns: power_quad_acc_input.im

Has unassed use power_quad_acc_n
Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i28{
power_quad_acc_input[i28].re = setup.data[i28]}
Uses: power_quad_acc_n,setup.data
Defs: 
Assigns: power_quad_acc_input.re

Has unassed use power_quad_acc_n
Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i29{
output[i29].f32_1 = power_quad_acc_output[i29].re}
Uses: power_quad_acc_n,power_quad_acc_output.re
Defs: 
Assigns: output.f32_1

Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i30{
output[i30].f32_2 = power_quad_acc_output[i30].im}
Uses: power_quad_acc_n,power_quad_acc_output.im
Defs: 
Assigns: output.f32_2

Looking at GIR GIR: free power_quad_acc_input
Uses: 
Defs: 
Assigns: 

Looking at GIR GIR: free power_quad_acc_output
Uses: 
Defs: 
Assigns: 

Looking at GIR GIR: free power_quad_acc_n
Uses: 
Defs: 
Assigns: 

Looking at GIR GIR: Define power_quad_acc_output
Uses: power_quad_acc_n
Defs: power_quad_acc_output.re,power_quad_acc_output.im
Assigns: 

Has unassed use power_quad_acc_n
Looking at GIR GIR: Define power_quad_acc_n
Uses: 
Defs: power_quad_acc_n
Assigns: 

Looking at GIR GIR: power_quad_acc_n = setup.N
Uses: setup.N
Defs: 
Assigns: power_quad_acc_n

Has undefed ass power_quad_acc_n
Looking at GIR GIR: Define power_quad_acc_input
Uses: power_quad_acc_n
Defs: power_quad_acc_input.re,power_quad_acc_input.im
Assigns: 

Has unassed use power_quad_acc_n
Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i32{
power_quad_acc_input[i32].im = input[i32].f32_2}
Uses: power_quad_acc_n,input.f32_2
Defs: 
Assigns: power_quad_acc_input.im

Has unassed use power_quad_acc_n
Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i33{
power_quad_acc_input[i33].re = setup.data[i33]}
Uses: power_quad_acc_n,setup.data
Defs: 
Assigns: power_quad_acc_input.re

Has unassed use power_quad_acc_n
Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i34{
output[i34].f32_1 = power_quad_acc_output[i34].im}
Uses: power_quad_acc_n,power_quad_acc_output.im
Defs: 
Assigns: output.f32_1

Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i35{
output[i35].f32_2 = power_quad_acc_output[i35].re}
Uses: power_quad_acc_n,power_quad_acc_output.re
Defs: 
Assigns: output.f32_2

Looking at GIR GIR: free power_quad_acc_input
Uses: 
Defs: 
Assigns: 

Looking at GIR GIR: free power_quad_acc_output
Uses: 
Defs: 
Assigns: 

Looking at GIR GIR: free power_quad_acc_n
Uses: 
Defs: 
Assigns: 

Looking at GIR GIR: Define power_quad_acc_output
Uses: power_quad_acc_n
Defs: power_quad_acc_output.re,power_quad_acc_output.im
Assigns: 

Has unassed use power_quad_acc_n
Looking at GIR GIR: Define power_quad_acc_n
Uses: 
Defs: power_quad_acc_n
Assigns: 

Looking at GIR GIR: power_quad_acc_n = setup.N
Uses: setup.N
Defs: 
Assigns: power_quad_acc_n

Has undefed ass power_quad_acc_n
Looking at GIR GIR: Define power_quad_acc_input
Uses: power_quad_acc_n
Defs: power_quad_acc_input.re,power_quad_acc_input.im
Assigns: 

Has unassed use power_quad_acc_n
Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i37{
power_quad_acc_input[i37].im = input[i37].f32_2}
Uses: power_quad_acc_n,input.f32_2
Defs: 
Assigns: power_quad_acc_input.im

Has unassed use power_quad_acc_n
Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i38{
power_quad_acc_input[i38].re = setup.data[i38]}
Uses: power_quad_acc_n,setup.data
Defs: 
Assigns: power_quad_acc_input.re

Has unassed use power_quad_acc_n
Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i39{
output[i39].f32_1 = power_quad_acc_output[i39].re}
Uses: power_quad_acc_n,power_quad_acc_output.re
Defs: 
Assigns: output.f32_1

Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i40{
output[i40].f32_2 = power_quad_acc_output[i40].im}
Uses: power_quad_acc_n,power_quad_acc_output.im
Defs: 
Assigns: output.f32_2

Looking at GIR GIR: free power_quad_acc_input
Uses: 
Defs: 
Assigns: 

Looking at GIR GIR: free power_quad_acc_output
Uses: 
Defs: 
Assigns: 

Looking at GIR GIR: free power_quad_acc_n
Uses: 
Defs: 
Assigns: 

Looking at GIR GIR: Define power_quad_acc_output
Uses: power_quad_acc_n
Defs: power_quad_acc_output.re,power_quad_acc_output.im
Assigns: 

Has unassed use power_quad_acc_n
Looking at GIR GIR: Define power_quad_acc_n
Uses: 
Defs: power_quad_acc_n
Assigns: 

Looking at GIR GIR: power_quad_acc_n = setup.N
Uses: setup.N
Defs: 
Assigns: power_quad_acc_n

Has undefed ass power_quad_acc_n
Looking at GIR GIR: Define power_quad_acc_input
Uses: power_quad_acc_n
Defs: power_quad_acc_input.re,power_quad_acc_input.im
Assigns: 

Has unassed use power_quad_acc_n
Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i42{
power_quad_acc_input[i42].im = work[i42].f32_1}
Uses: power_quad_acc_n,work.f32_1
Defs: 
Assigns: power_quad_acc_input.im

Has unassed use power_quad_acc_n
Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i43{
power_quad_acc_input[i43].re = setup.data[i43]}
Uses: power_quad_acc_n,setup.data
Defs: 
Assigns: power_quad_acc_input.re

Has unassed use power_quad_acc_n
Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i44{
output[i44].f32_1 = power_quad_acc_output[i44].im}
Uses: power_quad_acc_n,power_quad_acc_output.im
Defs: 
Assigns: output.f32_1

Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i45{
output[i45].f32_2 = power_quad_acc_output[i45].re}
Uses: power_quad_acc_n,power_quad_acc_output.re
Defs: 
Assigns: output.f32_2

Looking at GIR GIR: free power_quad_acc_input
Uses: 
Defs: 
Assigns: 

Looking at GIR GIR: free power_quad_acc_output
Uses: 
Defs: 
Assigns: 

Looking at GIR GIR: free power_quad_acc_n
Uses: 
Defs: 
Assigns: 

Looking at GIR GIR: Define power_quad_acc_output
Uses: power_quad_acc_n
Defs: power_quad_acc_output.re,power_quad_acc_output.im
Assigns: 

Has unassed use power_quad_acc_n
Looking at GIR GIR: Define power_quad_acc_n
Uses: 
Defs: power_quad_acc_n
Assigns: 

Looking at GIR GIR: power_quad_acc_n = setup.N
Uses: setup.N
Defs: 
Assigns: power_quad_acc_n

Has undefed ass power_quad_acc_n
Looking at GIR GIR: Define power_quad_acc_input
Uses: power_quad_acc_n
Defs: power_quad_acc_input.re,power_quad_acc_input.im
Assigns: 

Has unassed use power_quad_acc_n
Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i47{
power_quad_acc_input[i47].im = work[i47].f32_1}
Uses: power_quad_acc_n,work.f32_1
Defs: 
Assigns: power_quad_acc_input.im

Has unassed use power_quad_acc_n
Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i48{
power_quad_acc_input[i48].re = setup.data[i48]}
Uses: power_quad_acc_n,setup.data
Defs: 
Assigns: power_quad_acc_input.re

Has unassed use power_quad_acc_n
Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i49{
output[i49].f32_1 = power_quad_acc_output[i49].re}
Uses: power_quad_acc_n,power_quad_acc_output.re
Defs: 
Assigns: output.f32_1

Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i50{
output[i50].f32_2 = power_quad_acc_output[i50].im}
Uses: power_quad_acc_n,power_quad_acc_output.im
Defs: 
Assigns: output.f32_2

Looking at GIR GIR: free power_quad_acc_input
Uses: 
Defs: 
Assigns: 

Looking at GIR GIR: free power_quad_acc_output
Uses: 
Defs: 
Assigns: 

Looking at GIR GIR: free power_quad_acc_n
Uses: 
Defs: 
Assigns: 

Looking at GIR GIR: Define power_quad_acc_output
Uses: power_quad_acc_n
Defs: power_quad_acc_output.re,power_quad_acc_output.im
Assigns: 

Has unassed use power_quad_acc_n
Looking at GIR GIR: Define power_quad_acc_n
Uses: 
Defs: power_quad_acc_n
Assigns: 

Looking at GIR GIR: power_quad_acc_n = setup.N
Uses: setup.N
Defs: 
Assigns: power_quad_acc_n

Has undefed ass power_quad_acc_n
Looking at GIR GIR: Define power_quad_acc_input
Uses: power_quad_acc_n
Defs: power_quad_acc_input.re,power_quad_acc_input.im
Assigns: 

Has unassed use power_quad_acc_n
Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i52{
power_quad_acc_input[i52].im = work[i52].f32_2}
Uses: power_quad_acc_n,work.f32_2
Defs: 
Assigns: power_quad_acc_input.im

Has unassed use power_quad_acc_n
Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i53{
power_quad_acc_input[i53].re = setup.data[i53]}
Uses: power_quad_acc_n,setup.data
Defs: 
Assigns: power_quad_acc_input.re

Has unassed use power_quad_acc_n
Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i54{
output[i54].f32_1 = power_quad_acc_output[i54].im}
Uses: power_quad_acc_n,power_quad_acc_output.im
Defs: 
Assigns: output.f32_1

Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i55{
output[i55].f32_2 = power_quad_acc_output[i55].re}
Uses: power_quad_acc_n,power_quad_acc_output.re
Defs: 
Assigns: output.f32_2

Looking at GIR GIR: free power_quad_acc_input
Uses: 
Defs: 
Assigns: 

Looking at GIR GIR: free power_quad_acc_output
Uses: 
Defs: 
Assigns: 

Looking at GIR GIR: free power_quad_acc_n
Uses: 
Defs: 
Assigns: 

Looking at GIR GIR: Define power_quad_acc_output
Uses: power_quad_acc_n
Defs: power_quad_acc_output.re,power_quad_acc_output.im
Assigns: 

Has unassed use power_quad_acc_n
Looking at GIR GIR: Define power_quad_acc_n
Uses: 
Defs: power_quad_acc_n
Assigns: 

Looking at GIR GIR: power_quad_acc_n = setup.N
Uses: setup.N
Defs: 
Assigns: power_quad_acc_n

Has undefed ass power_quad_acc_n
Looking at GIR GIR: Define power_quad_acc_input
Uses: power_quad_acc_n
Defs: power_quad_acc_input.re,power_quad_acc_input.im
Assigns: 

Has unassed use power_quad_acc_n
Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i57{
power_quad_acc_input[i57].im = work[i57].f32_2}
Uses: power_quad_acc_n,work.f32_2
Defs: 
Assigns: power_quad_acc_input.im

Has unassed use power_quad_acc_n
Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i58{
power_quad_acc_input[i58].re = setup.data[i58]}
Uses: power_quad_acc_n,setup.data
Defs: 
Assigns: power_quad_acc_input.re

Has unassed use power_quad_acc_n
Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i59{
output[i59].f32_1 = power_quad_acc_output[i59].re}
Uses: power_quad_acc_n,power_quad_acc_output.re
Defs: 
Assigns: output.f32_1

Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i60{
output[i60].f32_2 = power_quad_acc_output[i60].im}
Uses: power_quad_acc_n,power_quad_acc_output.im
Defs: 
Assigns: output.f32_2

Looking at GIR GIR: free power_quad_acc_input
Uses: 
Defs: 
Assigns: 

Looking at GIR GIR: free power_quad_acc_output
Uses: 
Defs: 
Assigns: 

Looking at GIR GIR: free power_quad_acc_n
Uses: 
Defs: 
Assigns: 

Looking at GIR GIR: Define power_quad_acc_output
Uses: power_quad_acc_n
Defs: power_quad_acc_output.re,power_quad_acc_output.im
Assigns: 

Has unassed use power_quad_acc_n
Looking at GIR GIR: Define power_quad_acc_n
Uses: 
Defs: power_quad_acc_n
Assigns: 

Looking at GIR GIR: power_quad_acc_n = setup.N
Uses: setup.N
Defs: 
Assigns: power_quad_acc_n

Has undefed ass power_quad_acc_n
Looking at GIR GIR: Define power_quad_acc_input
Uses: power_quad_acc_n
Defs: power_quad_acc_input.re,power_quad_acc_input.im
Assigns: 

Has unassed use power_quad_acc_n
Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i62{
power_quad_acc_input[i62].im = setup.data[i62]}
Uses: power_quad_acc_n,setup.data
Defs: 
Assigns: power_quad_acc_input.im

Has unassed use power_quad_acc_n
Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i63{
power_quad_acc_input[i63].re = setup.e[i63]}
Uses: power_quad_acc_n,setup.e
Defs: 
Assigns: power_quad_acc_input.re

Has unassed use power_quad_acc_n
Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i64{
output[i64].f32_1 = power_quad_acc_output[i64].im}
Uses: power_quad_acc_n,power_quad_acc_output.im
Defs: 
Assigns: output.f32_1

Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i65{
output[i65].f32_2 = power_quad_acc_output[i65].re}
Uses: power_quad_acc_n,power_quad_acc_output.re
Defs: 
Assigns: output.f32_2

Looking at GIR GIR: free power_quad_acc_input
Uses: 
Defs: 
Assigns: 

Looking at GIR GIR: free power_quad_acc_output
Uses: 
Defs: 
Assigns: 

Looking at GIR GIR: free power_quad_acc_n
Uses: 
Defs: 
Assigns: 

Looking at GIR GIR: Define power_quad_acc_output
Uses: power_quad_acc_n
Defs: power_quad_acc_output.re,power_quad_acc_output.im
Assigns: 

Has unassed use power_quad_acc_n
Looking at GIR GIR: Define power_quad_acc_n
Uses: 
Defs: power_quad_acc_n
Assigns: 

Looking at GIR GIR: power_quad_acc_n = setup.N
Uses: setup.N
Defs: 
Assigns: power_quad_acc_n

Has undefed ass power_quad_acc_n
Looking at GIR GIR: Define power_quad_acc_input
Uses: power_quad_acc_n
Defs: power_quad_acc_input.re,power_quad_acc_input.im
Assigns: 

Has unassed use power_quad_acc_n
Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i67{
power_quad_acc_input[i67].im = setup.data[i67]}
Uses: power_quad_acc_n,setup.data
Defs: 
Assigns: power_quad_acc_input.im

Has unassed use power_quad_acc_n
Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i68{
power_quad_acc_input[i68].re = setup.e[i68]}
Uses: power_quad_acc_n,setup.e
Defs: 
Assigns: power_quad_acc_input.re

Has unassed use power_quad_acc_n
Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i69{
output[i69].f32_1 = power_quad_acc_output[i69].re}
Uses: power_quad_acc_n,power_quad_acc_output.re
Defs: 
Assigns: output.f32_1

Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i70{
output[i70].f32_2 = power_quad_acc_output[i70].im}
Uses: power_quad_acc_n,power_quad_acc_output.im
Defs: 
Assigns: output.f32_2

Looking at GIR GIR: free power_quad_acc_input
Uses: 
Defs: 
Assigns: 

Looking at GIR GIR: free power_quad_acc_output
Uses: 
Defs: 
Assigns: 

Looking at GIR GIR: free power_quad_acc_n
Uses: 
Defs: 
Assigns: 

Looking at GIR GIR: Define power_quad_acc_output
Uses: power_quad_acc_n
Defs: power_quad_acc_output.re,power_quad_acc_output.im
Assigns: 

Has unassed use power_quad_acc_n
Looking at GIR GIR: Define power_quad_acc_n
Uses: 
Defs: power_quad_acc_n
Assigns: 

Looking at GIR GIR: power_quad_acc_n = setup.N
Uses: setup.N
Defs: 
Assigns: power_quad_acc_n

Has undefed ass power_quad_acc_n
Looking at GIR GIR: Define power_quad_acc_input
Uses: power_quad_acc_n
Defs: power_quad_acc_input.re,power_quad_acc_input.im
Assigns: 

Has unassed use power_quad_acc_n
Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i72{
power_quad_acc_input[i72].im = setup.twiddle[i72]}
Uses: power_quad_acc_n,setup.twiddle
Defs: 
Assigns: power_quad_acc_input.im

Has unassed use power_quad_acc_n
Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i73{
power_quad_acc_input[i73].re = setup.e[i73]}
Uses: power_quad_acc_n,setup.e
Defs: 
Assigns: power_quad_acc_input.re

Has unassed use power_quad_acc_n
Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i74{
output[i74].f32_1 = power_quad_acc_output[i74].im}
Uses: power_quad_acc_n,power_quad_acc_output.im
Defs: 
Assigns: output.f32_1

Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i75{
output[i75].f32_2 = power_quad_acc_output[i75].re}
Uses: power_quad_acc_n,power_quad_acc_output.re
Defs: 
Assigns: output.f32_2

Looking at GIR GIR: free power_quad_acc_input
Uses: 
Defs: 
Assigns: 

Looking at GIR GIR: free power_quad_acc_output
Uses: 
Defs: 
Assigns: 

Looking at GIR GIR: free power_quad_acc_n
Uses: 
Defs: 
Assigns: 

Looking at GIR GIR: Define power_quad_acc_output
Uses: power_quad_acc_n
Defs: power_quad_acc_output.re,power_quad_acc_output.im
Assigns: 

Has unassed use power_quad_acc_n
Looking at GIR GIR: Define power_quad_acc_n
Uses: 
Defs: power_quad_acc_n
Assigns: 

Looking at GIR GIR: power_quad_acc_n = setup.N
Uses: setup.N
Defs: 
Assigns: power_quad_acc_n

Has undefed ass power_quad_acc_n
Looking at GIR GIR: Define power_quad_acc_input
Uses: power_quad_acc_n
Defs: power_quad_acc_input.re,power_quad_acc_input.im
Assigns: 

Has unassed use power_quad_acc_n
Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i77{
power_quad_acc_input[i77].im = setup.twiddle[i77]}
Uses: power_quad_acc_n,setup.twiddle
Defs: 
Assigns: power_quad_acc_input.im

Has unassed use power_quad_acc_n
Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i78{
power_quad_acc_input[i78].re = setup.e[i78]}
Uses: power_quad_acc_n,setup.e
Defs: 
Assigns: power_quad_acc_input.re

Has unassed use power_quad_acc_n
Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i79{
output[i79].f32_1 = power_quad_acc_output[i79].re}
Uses: power_quad_acc_n,power_quad_acc_output.re
Defs: 
Assigns: output.f32_1

Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i80{
output[i80].f32_2 = power_quad_acc_output[i80].im}
Uses: power_quad_acc_n,power_quad_acc_output.im
Defs: 
Assigns: output.f32_2

Looking at GIR GIR: free power_quad_acc_input
Uses: 
Defs: 
Assigns: 

Looking at GIR GIR: free power_quad_acc_output
Uses: 
Defs: 
Assigns: 

Looking at GIR GIR: free power_quad_acc_n
Uses: 
Defs: 
Assigns: 

Looking at GIR GIR: Define power_quad_acc_output
Uses: power_quad_acc_n
Defs: power_quad_acc_output.re,power_quad_acc_output.im
Assigns: 

Has unassed use power_quad_acc_n
Looking at GIR GIR: Define power_quad_acc_n
Uses: 
Defs: power_quad_acc_n
Assigns: 

Looking at GIR GIR: power_quad_acc_n = setup.N
Uses: setup.N
Defs: 
Assigns: power_quad_acc_n

Has undefed ass power_quad_acc_n
Looking at GIR GIR: Define power_quad_acc_input
Uses: power_quad_acc_n
Defs: power_quad_acc_input.re,power_quad_acc_input.im
Assigns: 

Has unassed use power_quad_acc_n
Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i82{
power_quad_acc_input[i82].im = input[i82].f32_1}
Uses: power_quad_acc_n,input.f32_1
Defs: 
Assigns: power_quad_acc_input.im

Has unassed use power_quad_acc_n
Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i83{
power_quad_acc_input[i83].re = setup.e[i83]}
Uses: power_quad_acc_n,setup.e
Defs: 
Assigns: power_quad_acc_input.re

Has unassed use power_quad_acc_n
Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i84{
output[i84].f32_1 = power_quad_acc_output[i84].im}
Uses: power_quad_acc_n,power_quad_acc_output.im
Defs: 
Assigns: output.f32_1

Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i85{
output[i85].f32_2 = power_quad_acc_output[i85].re}
Uses: power_quad_acc_n,power_quad_acc_output.re
Defs: 
Assigns: output.f32_2

Looking at GIR GIR: free power_quad_acc_input
Uses: 
Defs: 
Assigns: 

Looking at GIR GIR: free power_quad_acc_output
Uses: 
Defs: 
Assigns: 

Looking at GIR GIR: free power_quad_acc_n
Uses: 
Defs: 
Assigns: 

Looking at GIR GIR: Define power_quad_acc_output
Uses: power_quad_acc_n
Defs: power_quad_acc_output.re,power_quad_acc_output.im
Assigns: 

Has unassed use power_quad_acc_n
Looking at GIR GIR: Define power_quad_acc_n
Uses: 
Defs: power_quad_acc_n
Assigns: 

Looking at GIR GIR: power_quad_acc_n = setup.N
Uses: setup.N
Defs: 
Assigns: power_quad_acc_n

Has undefed ass power_quad_acc_n
Looking at GIR GIR: Define power_quad_acc_input
Uses: power_quad_acc_n
Defs: power_quad_acc_input.re,power_quad_acc_input.im
Assigns: 

Has unassed use power_quad_acc_n
Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i87{
power_quad_acc_input[i87].im = input[i87].f32_1}
Uses: power_quad_acc_n,input.f32_1
Defs: 
Assigns: power_quad_acc_input.im

Has unassed use power_quad_acc_n
Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i88{
power_quad_acc_input[i88].re = setup.e[i88]}
Uses: power_quad_acc_n,setup.e
Defs: 
Assigns: power_quad_acc_input.re

Has unassed use power_quad_acc_n
Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i89{
output[i89].f32_1 = power_quad_acc_output[i89].re}
Uses: power_quad_acc_n,power_quad_acc_output.re
Defs: 
Assigns: output.f32_1

Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i90{
output[i90].f32_2 = power_quad_acc_output[i90].im}
Uses: power_quad_acc_n,power_quad_acc_output.im
Defs: 
Assigns: output.f32_2

Looking at GIR GIR: free power_quad_acc_input
Uses: 
Defs: 
Assigns: 

Looking at GIR GIR: free power_quad_acc_output
Uses: 
Defs: 
Assigns: 

Looking at GIR GIR: free power_quad_acc_n
Uses: 
Defs: 
Assigns: 

Looking at GIR GIR: Define power_quad_acc_output
Uses: power_quad_acc_n
Defs: power_quad_acc_output.re,power_quad_acc_output.im
Assigns: 

Has unassed use power_quad_acc_n
Looking at GIR GIR: Define power_quad_acc_n
Uses: 
Defs: power_quad_acc_n
Assigns: 

Looking at GIR GIR: power_quad_acc_n = setup.N
Uses: setup.N
Defs: 
Assigns: power_quad_acc_n

Has undefed ass power_quad_acc_n
Looking at GIR GIR: Define power_quad_acc_input
Uses: power_quad_acc_n
Defs: power_quad_acc_input.re,power_quad_acc_input.im
Assigns: 

Has unassed use power_quad_acc_n
Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i92{
power_quad_acc_input[i92].im = input[i92].f32_2}
Uses: power_quad_acc_n,input.f32_2
Defs: 
Assigns: power_quad_acc_input.im

Has unassed use power_quad_acc_n
Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i93{
power_quad_acc_input[i93].re = setup.e[i93]}
Uses: power_quad_acc_n,setup.e
Defs: 
Assigns: power_quad_acc_input.re

Has unassed use power_quad_acc_n
Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i94{
output[i94].f32_1 = power_quad_acc_output[i94].im}
Uses: power_quad_acc_n,power_quad_acc_output.im
Defs: 
Assigns: output.f32_1

Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i95{
output[i95].f32_2 = power_quad_acc_output[i95].re}
Uses: power_quad_acc_n,power_quad_acc_output.re
Defs: 
Assigns: output.f32_2

Looking at GIR GIR: free power_quad_acc_input
Uses: 
Defs: 
Assigns: 

Looking at GIR GIR: free power_quad_acc_output
Uses: 
Defs: 
Assigns: 

Looking at GIR GIR: free power_quad_acc_n
Uses: 
Defs: 
Assigns: 

Looking at GIR GIR: Define power_quad_acc_output
Uses: power_quad_acc_n
Defs: power_quad_acc_output.re,power_quad_acc_output.im
Assigns: 

Has unassed use power_quad_acc_n
Looking at GIR GIR: Define power_quad_acc_n
Uses: 
Defs: power_quad_acc_n
Assigns: 

Looking at GIR GIR: power_quad_acc_n = setup.N
Uses: setup.N
Defs: 
Assigns: power_quad_acc_n

Has undefed ass power_quad_acc_n
Looking at GIR GIR: Define power_quad_acc_input
Uses: power_quad_acc_n
Defs: power_quad_acc_input.re,power_quad_acc_input.im
Assigns: 

Has unassed use power_quad_acc_n
Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i97{
power_quad_acc_input[i97].im = input[i97].f32_2}
Uses: power_quad_acc_n,input.f32_2
Defs: 
Assigns: power_quad_acc_input.im

Has unassed use power_quad_acc_n
Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i98{
power_quad_acc_input[i98].re = setup.e[i98]}
Uses: power_quad_acc_n,setup.e
Defs: 
Assigns: power_quad_acc_input.re

Has unassed use power_quad_acc_n
Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i99{
output[i99].f32_1 = power_quad_acc_output[i99].re}
Uses: power_quad_acc_n,power_quad_acc_output.re
Defs: 
Assigns: output.f32_1

Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i100{
output[i100].f32_2 = power_quad_acc_output[i100].im}
Uses: power_quad_acc_n,power_quad_acc_output.im
Defs: 
Assigns: output.f32_2

Looking at GIR GIR: free power_quad_acc_input
Uses: 
Defs: 
Assigns: 

Looking at GIR GIR: free power_quad_acc_output
Uses: 
Defs: 
Assigns: 

Looking at GIR GIR: free power_quad_acc_n
Uses: 
Defs: 
Assigns: 

Looking at GIR GIR: Define power_quad_acc_output
Uses: power_quad_acc_n
Defs: power_quad_acc_output.re,power_quad_acc_output.im
Assigns: 

Has unassed use power_quad_acc_n
Looking at GIR GIR: Define power_quad_acc_n
Uses: 
Defs: power_quad_acc_n
Assigns: 

Looking at GIR GIR: power_quad_acc_n = setup.N
Uses: setup.N
Defs: 
Assigns: power_quad_acc_n

Has undefed ass power_quad_acc_n
Looking at GIR GIR: Define power_quad_acc_input
Uses: power_quad_acc_n
Defs: power_quad_acc_input.re,power_quad_acc_input.im
Assigns: 

Has unassed use power_quad_acc_n
Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i102{
power_quad_acc_input[i102].im = work[i102].f32_1}
Uses: power_quad_acc_n,work.f32_1
Defs: 
Assigns: power_quad_acc_input.im

Has unassed use power_quad_acc_n
Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i103{
power_quad_acc_input[i103].re = setup.e[i103]}
Uses: power_quad_acc_n,setup.e
Defs: 
Assigns: power_quad_acc_input.re

Has unassed use power_quad_acc_n
Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i104{
output[i104].f32_1 = power_quad_acc_output[i104].im}
Uses: power_quad_acc_n,power_quad_acc_output.im
Defs: 
Assigns: output.f32_1

Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i105{
output[i105].f32_2 = power_quad_acc_output[i105].re}
Uses: power_quad_acc_n,power_quad_acc_output.re
Defs: 
Assigns: output.f32_2

Looking at GIR GIR: free power_quad_acc_input
Uses: 
Defs: 
Assigns: 

Looking at GIR GIR: free power_quad_acc_output
Uses: 
Defs: 
Assigns: 

Looking at GIR GIR: free power_quad_acc_n
Uses: 
Defs: 
Assigns: 

Looking at GIR GIR: Define power_quad_acc_output
Uses: power_quad_acc_n
Defs: power_quad_acc_output.re,power_quad_acc_output.im
Assigns: 

Has unassed use power_quad_acc_n
Looking at GIR GIR: Define power_quad_acc_n
Uses: 
Defs: power_quad_acc_n
Assigns: 

Looking at GIR GIR: power_quad_acc_n = setup.N
Uses: setup.N
Defs: 
Assigns: power_quad_acc_n

Has undefed ass power_quad_acc_n
Looking at GIR GIR: Define power_quad_acc_input
Uses: power_quad_acc_n
Defs: power_quad_acc_input.re,power_quad_acc_input.im
Assigns: 

Has unassed use power_quad_acc_n
Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i107{
power_quad_acc_input[i107].im = work[i107].f32_1}
Uses: power_quad_acc_n,work.f32_1
Defs: 
Assigns: power_quad_acc_input.im

Has unassed use power_quad_acc_n
Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i108{
power_quad_acc_input[i108].re = setup.e[i108]}
Uses: power_quad_acc_n,setup.e
Defs: 
Assigns: power_quad_acc_input.re

Has unassed use power_quad_acc_n
Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i109{
output[i109].f32_1 = power_quad_acc_output[i109].re}
Uses: power_quad_acc_n,power_quad_acc_output.re
Defs: 
Assigns: output.f32_1

Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i110{
output[i110].f32_2 = power_quad_acc_output[i110].im}
Uses: power_quad_acc_n,power_quad_acc_output.im
Defs: 
Assigns: output.f32_2

Looking at GIR GIR: free power_quad_acc_input
Uses: 
Defs: 
Assigns: 

Looking at GIR GIR: free power_quad_acc_output
Uses: 
Defs: 
Assigns: 

Looking at GIR GIR: free power_quad_acc_n
Uses: 
Defs: 
Assigns: 

Looking at GIR GIR: Define power_quad_acc_output
Uses: power_quad_acc_n
Defs: power_quad_acc_output.re,power_quad_acc_output.im
Assigns: 

Has unassed use power_quad_acc_n
Looking at GIR GIR: Define power_quad_acc_n
Uses: 
Defs: power_quad_acc_n
Assigns: 

Looking at GIR GIR: power_quad_acc_n = setup.N
Uses: setup.N
Defs: 
Assigns: power_quad_acc_n

Has undefed ass power_quad_acc_n
Looking at GIR GIR: Define power_quad_acc_input
Uses: power_quad_acc_n
Defs: power_quad_acc_input.re,power_quad_acc_input.im
Assigns: 

Has unassed use power_quad_acc_n
Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i112{
power_quad_acc_input[i112].im = work[i112].f32_2}
Uses: power_quad_acc_n,work.f32_2
Defs: 
Assigns: power_quad_acc_input.im

Has unassed use power_quad_acc_n
Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i113{
power_quad_acc_input[i113].re = setup.e[i113]}
Uses: power_quad_acc_n,setup.e
Defs: 
Assigns: power_quad_acc_input.re

Has unassed use power_quad_acc_n
Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i114{
output[i114].f32_1 = power_quad_acc_output[i114].im}
Uses: power_quad_acc_n,power_quad_acc_output.im
Defs: 
Assigns: output.f32_1

Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i115{
output[i115].f32_2 = power_quad_acc_output[i115].re}
Uses: power_quad_acc_n,power_quad_acc_output.re
Defs: 
Assigns: output.f32_2

Looking at GIR GIR: free power_quad_acc_input
Uses: 
Defs: 
Assigns: 

Looking at GIR GIR: free power_quad_acc_output
Uses: 
Defs: 
Assigns: 

Looking at GIR GIR: free power_quad_acc_n
Uses: 
Defs: 
Assigns: 

Looking at GIR GIR: Define power_quad_acc_output
Uses: power_quad_acc_n
Defs: power_quad_acc_output.re,power_quad_acc_output.im
Assigns: 

Has unassed use power_quad_acc_n
Looking at GIR GIR: Define power_quad_acc_n
Uses: 
Defs: power_quad_acc_n
Assigns: 

Looking at GIR GIR: power_quad_acc_n = setup.N
Uses: setup.N
Defs: 
Assigns: power_quad_acc_n

Has undefed ass power_quad_acc_n
Looking at GIR GIR: Define power_quad_acc_input
Uses: power_quad_acc_n
Defs: power_quad_acc_input.re,power_quad_acc_input.im
Assigns: 

Has unassed use power_quad_acc_n
Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i117{
power_quad_acc_input[i117].im = work[i117].f32_2}
Uses: power_quad_acc_n,work.f32_2
Defs: 
Assigns: power_quad_acc_input.im

Has unassed use power_quad_acc_n
Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i118{
power_quad_acc_input[i118].re = setup.e[i118]}
Uses: power_quad_acc_n,setup.e
Defs: 
Assigns: power_quad_acc_input.re

Has unassed use power_quad_acc_n
Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i119{
output[i119].f32_1 = power_quad_acc_output[i119].re}
Uses: power_quad_acc_n,power_quad_acc_output.re
Defs: 
Assigns: output.f32_1

Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i120{
output[i120].f32_2 = power_quad_acc_output[i120].im}
Uses: power_quad_acc_n,power_quad_acc_output.im
Defs: 
Assigns: output.f32_2

Looking at GIR GIR: free power_quad_acc_input
Uses: 
Defs: 
Assigns: 

Looking at GIR GIR: free power_quad_acc_output
Uses: 
Defs: 
Assigns: 

Looking at GIR GIR: free power_quad_acc_n
Uses: 
Defs: 
Assigns: 

Looking at GIR GIR: Define power_quad_acc_output
Uses: power_quad_acc_n
Defs: power_quad_acc_output.re,power_quad_acc_output.im
Assigns: 

Has unassed use power_quad_acc_n
Looking at GIR GIR: Define power_quad_acc_n
Uses: 
Defs: power_quad_acc_n
Assigns: 

Looking at GIR GIR: power_quad_acc_n = setup.N
Uses: setup.N
Defs: 
Assigns: power_quad_acc_n

Has undefed ass power_quad_acc_n
Looking at GIR GIR: Define power_quad_acc_input
Uses: power_quad_acc_n
Defs: power_quad_acc_input.re,power_quad_acc_input.im
Assigns: 

Has unassed use power_quad_acc_n
Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i122{
power_quad_acc_input[i122].im = setup.data[i122]}
Uses: power_quad_acc_n,setup.data
Defs: 
Assigns: power_quad_acc_input.im

Has unassed use power_quad_acc_n
Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i123{
power_quad_acc_input[i123].re = setup.twiddle[i123]}
Uses: power_quad_acc_n,setup.twiddle
Defs: 
Assigns: power_quad_acc_input.re

Has unassed use power_quad_acc_n
Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i124{
output[i124].f32_1 = power_quad_acc_output[i124].im}
Uses: power_quad_acc_n,power_quad_acc_output.im
Defs: 
Assigns: output.f32_1

Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i125{
output[i125].f32_2 = power_quad_acc_output[i125].re}
Uses: power_quad_acc_n,power_quad_acc_output.re
Defs: 
Assigns: output.f32_2

Looking at GIR GIR: free power_quad_acc_input
Uses: 
Defs: 
Assigns: 

Looking at GIR GIR: free power_quad_acc_output
Uses: 
Defs: 
Assigns: 

Looking at GIR GIR: free power_quad_acc_n
Uses: 
Defs: 
Assigns: 

Looking at GIR GIR: Define power_quad_acc_output
Uses: power_quad_acc_n
Defs: power_quad_acc_output.re,power_quad_acc_output.im
Assigns: 

Has unassed use power_quad_acc_n
Looking at GIR GIR: Define power_quad_acc_n
Uses: 
Defs: power_quad_acc_n
Assigns: 

Looking at GIR GIR: power_quad_acc_n = setup.N
Uses: setup.N
Defs: 
Assigns: power_quad_acc_n

Has undefed ass power_quad_acc_n
Looking at GIR GIR: Define power_quad_acc_input
Uses: power_quad_acc_n
Defs: power_quad_acc_input.re,power_quad_acc_input.im
Assigns: 

Has unassed use power_quad_acc_n
Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i127{
power_quad_acc_input[i127].im = setup.data[i127]}
Uses: power_quad_acc_n,setup.data
Defs: 
Assigns: power_quad_acc_input.im

Has unassed use power_quad_acc_n
Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i128{
power_quad_acc_input[i128].re = setup.twiddle[i128]}
Uses: power_quad_acc_n,setup.twiddle
Defs: 
Assigns: power_quad_acc_input.re

Has unassed use power_quad_acc_n
Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i129{
output[i129].f32_1 = power_quad_acc_output[i129].re}
Uses: power_quad_acc_n,power_quad_acc_output.re
Defs: 
Assigns: output.f32_1

Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i130{
output[i130].f32_2 = power_quad_acc_output[i130].im}
Uses: power_quad_acc_n,power_quad_acc_output.im
Defs: 
Assigns: output.f32_2

Looking at GIR GIR: free power_quad_acc_input
Uses: 
Defs: 
Assigns: 

Looking at GIR GIR: free power_quad_acc_output
Uses: 
Defs: 
Assigns: 

Looking at GIR GIR: free power_quad_acc_n
Uses: 
Defs: 
Assigns: 

Looking at GIR GIR: Define power_quad_acc_output
Uses: power_quad_acc_n
Defs: power_quad_acc_output.re,power_quad_acc_output.im
Assigns: 

Has unassed use power_quad_acc_n
Looking at GIR GIR: Define power_quad_acc_n
Uses: 
Defs: power_quad_acc_n
Assigns: 

Looking at GIR GIR: power_quad_acc_n = setup.N
Uses: setup.N
Defs: 
Assigns: power_quad_acc_n

Has undefed ass power_quad_acc_n
Looking at GIR GIR: Define power_quad_acc_input
Uses: power_quad_acc_n
Defs: power_quad_acc_input.re,power_quad_acc_input.im
Assigns: 

Has unassed use power_quad_acc_n
Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i132{
power_quad_acc_input[i132].im = setup.e[i132]}
Uses: power_quad_acc_n,setup.e
Defs: 
Assigns: power_quad_acc_input.im

Has unassed use power_quad_acc_n
Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i133{
power_quad_acc_input[i133].re = setup.twiddle[i133]}
Uses: power_quad_acc_n,setup.twiddle
Defs: 
Assigns: power_quad_acc_input.re

Has unassed use power_quad_acc_n
Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i134{
output[i134].f32_1 = power_quad_acc_output[i134].im}
Uses: power_quad_acc_n,power_quad_acc_output.im
Defs: 
Assigns: output.f32_1

Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i135{
output[i135].f32_2 = power_quad_acc_output[i135].re}
Uses: power_quad_acc_n,power_quad_acc_output.re
Defs: 
Assigns: output.f32_2

Looking at GIR GIR: free power_quad_acc_input
Uses: 
Defs: 
Assigns: 

Looking at GIR GIR: free power_quad_acc_output
Uses: 
Defs: 
Assigns: 

Looking at GIR GIR: free power_quad_acc_n
Uses: 
Defs: 
Assigns: 

Looking at GIR GIR: Define power_quad_acc_output
Uses: power_quad_acc_n
Defs: power_quad_acc_output.re,power_quad_acc_output.im
Assigns: 

Has unassed use power_quad_acc_n
Looking at GIR GIR: Define power_quad_acc_n
Uses: 
Defs: power_quad_acc_n
Assigns: 

Looking at GIR GIR: power_quad_acc_n = setup.N
Uses: setup.N
Defs: 
Assigns: power_quad_acc_n

Has undefed ass power_quad_acc_n
Looking at GIR GIR: Define power_quad_acc_input
Uses: power_quad_acc_n
Defs: power_quad_acc_input.re,power_quad_acc_input.im
Assigns: 

Has unassed use power_quad_acc_n
Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i137{
power_quad_acc_input[i137].im = setup.e[i137]}
Uses: power_quad_acc_n,setup.e
Defs: 
Assigns: power_quad_acc_input.im

Has unassed use power_quad_acc_n
Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i138{
power_quad_acc_input[i138].re = setup.twiddle[i138]}
Uses: power_quad_acc_n,setup.twiddle
Defs: 
Assigns: power_quad_acc_input.re

Has unassed use power_quad_acc_n
Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i139{
output[i139].f32_1 = power_quad_acc_output[i139].re}
Uses: power_quad_acc_n,power_quad_acc_output.re
Defs: 
Assigns: output.f32_1

Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i140{
output[i140].f32_2 = power_quad_acc_output[i140].im}
Uses: power_quad_acc_n,power_quad_acc_output.im
Defs: 
Assigns: output.f32_2

Looking at GIR GIR: free power_quad_acc_input
Uses: 
Defs: 
Assigns: 

Looking at GIR GIR: free power_quad_acc_output
Uses: 
Defs: 
Assigns: 

Looking at GIR GIR: free power_quad_acc_n
Uses: 
Defs: 
Assigns: 

Looking at GIR GIR: Define power_quad_acc_output
Uses: power_quad_acc_n
Defs: power_quad_acc_output.re,power_quad_acc_output.im
Assigns: 

Has unassed use power_quad_acc_n
Looking at GIR GIR: Define power_quad_acc_n
Uses: 
Defs: power_quad_acc_n
Assigns: 

Looking at GIR GIR: power_quad_acc_n = setup.N
Uses: setup.N
Defs: 
Assigns: power_quad_acc_n

Has undefed ass power_quad_acc_n
Looking at GIR GIR: Define power_quad_acc_input
Uses: power_quad_acc_n
Defs: power_quad_acc_input.re,power_quad_acc_input.im
Assigns: 

Has unassed use power_quad_acc_n
Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i142{
power_quad_acc_input[i142].im = input[i142].f32_1}
Uses: power_quad_acc_n,input.f32_1
Defs: 
Assigns: power_quad_acc_input.im

Has unassed use power_quad_acc_n
Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i143{
power_quad_acc_input[i143].re = setup.twiddle[i143]}
Uses: power_quad_acc_n,setup.twiddle
Defs: 
Assigns: power_quad_acc_input.re

Has unassed use power_quad_acc_n
Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i144{
output[i144].f32_1 = power_quad_acc_output[i144].im}
Uses: power_quad_acc_n,power_quad_acc_output.im
Defs: 
Assigns: output.f32_1

Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i145{
output[i145].f32_2 = power_quad_acc_output[i145].re}
Uses: power_quad_acc_n,power_quad_acc_output.re
Defs: 
Assigns: output.f32_2

Looking at GIR GIR: free power_quad_acc_input
Uses: 
Defs: 
Assigns: 

Looking at GIR GIR: free power_quad_acc_output
Uses: 
Defs: 
Assigns: 

Looking at GIR GIR: free power_quad_acc_n
Uses: 
Defs: 
Assigns: 

Looking at GIR GIR: Define power_quad_acc_output
Uses: power_quad_acc_n
Defs: power_quad_acc_output.re,power_quad_acc_output.im
Assigns: 

Has unassed use power_quad_acc_n
Looking at GIR GIR: Define power_quad_acc_n
Uses: 
Defs: power_quad_acc_n
Assigns: 

Looking at GIR GIR: power_quad_acc_n = setup.N
Uses: setup.N
Defs: 
Assigns: power_quad_acc_n

Has undefed ass power_quad_acc_n
Looking at GIR GIR: Define power_quad_acc_input
Uses: power_quad_acc_n
Defs: power_quad_acc_input.re,power_quad_acc_input.im
Assigns: 

Has unassed use power_quad_acc_n
Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i147{
power_quad_acc_input[i147].im = input[i147].f32_1}
Uses: power_quad_acc_n,input.f32_1
Defs: 
Assigns: power_quad_acc_input.im

Has unassed use power_quad_acc_n
Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i148{
power_quad_acc_input[i148].re = setup.twiddle[i148]}
Uses: power_quad_acc_n,setup.twiddle
Defs: 
Assigns: power_quad_acc_input.re

Has unassed use power_quad_acc_n
Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i149{
output[i149].f32_1 = power_quad_acc_output[i149].re}
Uses: power_quad_acc_n,power_quad_acc_output.re
Defs: 
Assigns: output.f32_1

Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i150{
output[i150].f32_2 = power_quad_acc_output[i150].im}
Uses: power_quad_acc_n,power_quad_acc_output.im
Defs: 
Assigns: output.f32_2

Looking at GIR GIR: free power_quad_acc_input
Uses: 
Defs: 
Assigns: 

Looking at GIR GIR: free power_quad_acc_output
Uses: 
Defs: 
Assigns: 

Looking at GIR GIR: free power_quad_acc_n
Uses: 
Defs: 
Assigns: 

Looking at GIR GIR: Define power_quad_acc_output
Uses: power_quad_acc_n
Defs: power_quad_acc_output.re,power_quad_acc_output.im
Assigns: 

Has unassed use power_quad_acc_n
Looking at GIR GIR: Define power_quad_acc_n
Uses: 
Defs: power_quad_acc_n
Assigns: 

Looking at GIR GIR: power_quad_acc_n = setup.N
Uses: setup.N
Defs: 
Assigns: power_quad_acc_n

Has undefed ass power_quad_acc_n
Looking at GIR GIR: Define power_quad_acc_input
Uses: power_quad_acc_n
Defs: power_quad_acc_input.re,power_quad_acc_input.im
Assigns: 

Has unassed use power_quad_acc_n
Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i152{
power_quad_acc_input[i152].im = input[i152].f32_2}
Uses: power_quad_acc_n,input.f32_2
Defs: 
Assigns: power_quad_acc_input.im

Has unassed use power_quad_acc_n
Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i153{
power_quad_acc_input[i153].re = setup.twiddle[i153]}
Uses: power_quad_acc_n,setup.twiddle
Defs: 
Assigns: power_quad_acc_input.re

Has unassed use power_quad_acc_n
Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i154{
output[i154].f32_1 = power_quad_acc_output[i154].im}
Uses: power_quad_acc_n,power_quad_acc_output.im
Defs: 
Assigns: output.f32_1

Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i155{
output[i155].f32_2 = power_quad_acc_output[i155].re}
Uses: power_quad_acc_n,power_quad_acc_output.re
Defs: 
Assigns: output.f32_2

Looking at GIR GIR: free power_quad_acc_input
Uses: 
Defs: 
Assigns: 

Looking at GIR GIR: free power_quad_acc_output
Uses: 
Defs: 
Assigns: 

Looking at GIR GIR: free power_quad_acc_n
Uses: 
Defs: 
Assigns: 

Looking at GIR GIR: Define power_quad_acc_output
Uses: power_quad_acc_n
Defs: power_quad_acc_output.re,power_quad_acc_output.im
Assigns: 

Has unassed use power_quad_acc_n
Looking at GIR GIR: Define power_quad_acc_n
Uses: 
Defs: power_quad_acc_n
Assigns: 

Looking at GIR GIR: power_quad_acc_n = setup.N
Uses: setup.N
Defs: 
Assigns: power_quad_acc_n

Has undefed ass power_quad_acc_n
Looking at GIR GIR: Define power_quad_acc_input
Uses: power_quad_acc_n
Defs: power_quad_acc_input.re,power_quad_acc_input.im
Assigns: 

Has unassed use power_quad_acc_n
Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i157{
power_quad_acc_input[i157].im = input[i157].f32_2}
Uses: power_quad_acc_n,input.f32_2
Defs: 
Assigns: power_quad_acc_input.im

Has unassed use power_quad_acc_n
Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i158{
power_quad_acc_input[i158].re = setup.twiddle[i158]}
Uses: power_quad_acc_n,setup.twiddle
Defs: 
Assigns: power_quad_acc_input.re

Has unassed use power_quad_acc_n
Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i159{
output[i159].f32_1 = power_quad_acc_output[i159].re}
Uses: power_quad_acc_n,power_quad_acc_output.re
Defs: 
Assigns: output.f32_1

Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i160{
output[i160].f32_2 = power_quad_acc_output[i160].im}
Uses: power_quad_acc_n,power_quad_acc_output.im
Defs: 
Assigns: output.f32_2

Looking at GIR GIR: free power_quad_acc_input
Uses: 
Defs: 
Assigns: 

Looking at GIR GIR: free power_quad_acc_output
Uses: 
Defs: 
Assigns: 

Looking at GIR GIR: free power_quad_acc_n
Uses: 
Defs: 
Assigns: 

Looking at GIR GIR: Define power_quad_acc_output
Uses: power_quad_acc_n
Defs: power_quad_acc_output.re,power_quad_acc_output.im
Assigns: 

Has unassed use power_quad_acc_n
Looking at GIR GIR: Define power_quad_acc_n
Uses: 
Defs: power_quad_acc_n
Assigns: 

Looking at GIR GIR: power_quad_acc_n = setup.N
Uses: setup.N
Defs: 
Assigns: power_quad_acc_n

Has undefed ass power_quad_acc_n
Looking at GIR GIR: Define power_quad_acc_input
Uses: power_quad_acc_n
Defs: power_quad_acc_input.re,power_quad_acc_input.im
Assigns: 

Has unassed use power_quad_acc_n
Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i162{
power_quad_acc_input[i162].im = work[i162].f32_1}
Uses: power_quad_acc_n,work.f32_1
Defs: 
Assigns: power_quad_acc_input.im

Has unassed use power_quad_acc_n
Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i163{
power_quad_acc_input[i163].re = setup.twiddle[i163]}
Uses: power_quad_acc_n,setup.twiddle
Defs: 
Assigns: power_quad_acc_input.re

Has unassed use power_quad_acc_n
Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i164{
output[i164].f32_1 = power_quad_acc_output[i164].im}
Uses: power_quad_acc_n,power_quad_acc_output.im
Defs: 
Assigns: output.f32_1

Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i165{
output[i165].f32_2 = power_quad_acc_output[i165].re}
Uses: power_quad_acc_n,power_quad_acc_output.re
Defs: 
Assigns: output.f32_2

Looking at GIR GIR: free power_quad_acc_input
Uses: 
Defs: 
Assigns: 

Looking at GIR GIR: free power_quad_acc_output
Uses: 
Defs: 
Assigns: 

Looking at GIR GIR: free power_quad_acc_n
Uses: 
Defs: 
Assigns: 

Looking at GIR GIR: Define power_quad_acc_output
Uses: power_quad_acc_n
Defs: power_quad_acc_output.re,power_quad_acc_output.im
Assigns: 

Has unassed use power_quad_acc_n
Looking at GIR GIR: Define power_quad_acc_n
Uses: 
Defs: power_quad_acc_n
Assigns: 

Looking at GIR GIR: power_quad_acc_n = setup.N
Uses: setup.N
Defs: 
Assigns: power_quad_acc_n

Has undefed ass power_quad_acc_n
Looking at GIR GIR: Define power_quad_acc_input
Uses: power_quad_acc_n
Defs: power_quad_acc_input.re,power_quad_acc_input.im
Assigns: 

Has unassed use power_quad_acc_n
Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i167{
power_quad_acc_input[i167].im = work[i167].f32_1}
Uses: power_quad_acc_n,work.f32_1
Defs: 
Assigns: power_quad_acc_input.im

Has unassed use power_quad_acc_n
Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i168{
power_quad_acc_input[i168].re = setup.twiddle[i168]}
Uses: power_quad_acc_n,setup.twiddle
Defs: 
Assigns: power_quad_acc_input.re

Has unassed use power_quad_acc_n
Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i169{
output[i169].f32_1 = power_quad_acc_output[i169].re}
Uses: power_quad_acc_n,power_quad_acc_output.re
Defs: 
Assigns: output.f32_1

Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i170{
output[i170].f32_2 = power_quad_acc_output[i170].im}
Uses: power_quad_acc_n,power_quad_acc_output.im
Defs: 
Assigns: output.f32_2

Looking at GIR GIR: free power_quad_acc_input
Uses: 
Defs: 
Assigns: 

Looking at GIR GIR: free power_quad_acc_output
Uses: 
Defs: 
Assigns: 

Looking at GIR GIR: free power_quad_acc_n
Uses: 
Defs: 
Assigns: 

Looking at GIR GIR: Define power_quad_acc_output
Uses: power_quad_acc_n
Defs: power_quad_acc_output.re,power_quad_acc_output.im
Assigns: 

Has unassed use power_quad_acc_n
Looking at GIR GIR: Define power_quad_acc_n
Uses: 
Defs: power_quad_acc_n
Assigns: 

Looking at GIR GIR: power_quad_acc_n = setup.N
Uses: setup.N
Defs: 
Assigns: power_quad_acc_n

Has undefed ass power_quad_acc_n
Looking at GIR GIR: Define power_quad_acc_input
Uses: power_quad_acc_n
Defs: power_quad_acc_input.re,power_quad_acc_input.im
Assigns: 

Has unassed use power_quad_acc_n
Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i172{
power_quad_acc_input[i172].im = work[i172].f32_2}
Uses: power_quad_acc_n,work.f32_2
Defs: 
Assigns: power_quad_acc_input.im

Has unassed use power_quad_acc_n
Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i173{
power_quad_acc_input[i173].re = setup.twiddle[i173]}
Uses: power_quad_acc_n,setup.twiddle
Defs: 
Assigns: power_quad_acc_input.re

Has unassed use power_quad_acc_n
Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i174{
output[i174].f32_1 = power_quad_acc_output[i174].im}
Uses: power_quad_acc_n,power_quad_acc_output.im
Defs: 
Assigns: output.f32_1

Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i175{
output[i175].f32_2 = power_quad_acc_output[i175].re}
Uses: power_quad_acc_n,power_quad_acc_output.re
Defs: 
Assigns: output.f32_2

Looking at GIR GIR: free power_quad_acc_input
Uses: 
Defs: 
Assigns: 

Looking at GIR GIR: free power_quad_acc_output
Uses: 
Defs: 
Assigns: 

Looking at GIR GIR: free power_quad_acc_n
Uses: 
Defs: 
Assigns: 

Looking at GIR GIR: Define power_quad_acc_output
Uses: power_quad_acc_n
Defs: power_quad_acc_output.re,power_quad_acc_output.im
Assigns: 

Has unassed use power_quad_acc_n
Looking at GIR GIR: Define power_quad_acc_n
Uses: 
Defs: power_quad_acc_n
Assigns: 

Looking at GIR GIR: power_quad_acc_n = setup.N
Uses: setup.N
Defs: 
Assigns: power_quad_acc_n

Has undefed ass power_quad_acc_n
Looking at GIR GIR: Define power_quad_acc_input
Uses: power_quad_acc_n
Defs: power_quad_acc_input.re,power_quad_acc_input.im
Assigns: 

Has unassed use power_quad_acc_n
Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i177{
power_quad_acc_input[i177].im = work[i177].f32_2}
Uses: power_quad_acc_n,work.f32_2
Defs: 
Assigns: power_quad_acc_input.im

Has unassed use power_quad_acc_n
Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i178{
power_quad_acc_input[i178].re = setup.twiddle[i178]}
Uses: power_quad_acc_n,setup.twiddle
Defs: 
Assigns: power_quad_acc_input.re

Has unassed use power_quad_acc_n
Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i179{
output[i179].f32_1 = power_quad_acc_output[i179].re}
Uses: power_quad_acc_n,power_quad_acc_output.re
Defs: 
Assigns: output.f32_1

Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i180{
output[i180].f32_2 = power_quad_acc_output[i180].im}
Uses: power_quad_acc_n,power_quad_acc_output.im
Defs: 
Assigns: output.f32_2

Looking at GIR GIR: free power_quad_acc_input
Uses: 
Defs: 
Assigns: 

Looking at GIR GIR: free power_quad_acc_output
Uses: 
Defs: 
Assigns: 

Looking at GIR GIR: free power_quad_acc_n
Uses: 
Defs: 
Assigns: 

Looking at GIR GIR: Define power_quad_acc_output
Uses: power_quad_acc_n
Defs: power_quad_acc_output.re,power_quad_acc_output.im
Assigns: 

Has unassed use power_quad_acc_n
Looking at GIR GIR: Define power_quad_acc_n
Uses: 
Defs: power_quad_acc_n
Assigns: 

Looking at GIR GIR: power_quad_acc_n = setup.N
Uses: setup.N
Defs: 
Assigns: power_quad_acc_n

Has undefed ass power_quad_acc_n
Looking at GIR GIR: Define power_quad_acc_input
Uses: power_quad_acc_n
Defs: power_quad_acc_input.re,power_quad_acc_input.im
Assigns: 

Has unassed use power_quad_acc_n
Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i182{
power_quad_acc_input[i182].im = setup.data[i182]}
Uses: power_quad_acc_n,setup.data
Defs: 
Assigns: power_quad_acc_input.im

Has unassed use power_quad_acc_n
Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i183{
power_quad_acc_input[i183].re = input[i183].f32_1}
Uses: power_quad_acc_n,input.f32_1
Defs: 
Assigns: power_quad_acc_input.re

Has unassed use power_quad_acc_n
Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i184{
output[i184].f32_1 = power_quad_acc_output[i184].im}
Uses: power_quad_acc_n,power_quad_acc_output.im
Defs: 
Assigns: output.f32_1

Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i185{
output[i185].f32_2 = power_quad_acc_output[i185].re}
Uses: power_quad_acc_n,power_quad_acc_output.re
Defs: 
Assigns: output.f32_2

Looking at GIR GIR: free power_quad_acc_input
Uses: 
Defs: 
Assigns: 

Looking at GIR GIR: free power_quad_acc_output
Uses: 
Defs: 
Assigns: 

Looking at GIR GIR: free power_quad_acc_n
Uses: 
Defs: 
Assigns: 

Looking at GIR GIR: Define power_quad_acc_output
Uses: power_quad_acc_n
Defs: power_quad_acc_output.re,power_quad_acc_output.im
Assigns: 

Has unassed use power_quad_acc_n
Looking at GIR GIR: Define power_quad_acc_n
Uses: 
Defs: power_quad_acc_n
Assigns: 

Looking at GIR GIR: power_quad_acc_n = setup.N
Uses: setup.N
Defs: 
Assigns: power_quad_acc_n

Has undefed ass power_quad_acc_n
Looking at GIR GIR: Define power_quad_acc_input
Uses: power_quad_acc_n
Defs: power_quad_acc_input.re,power_quad_acc_input.im
Assigns: 

Has unassed use power_quad_acc_n
Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i187{
power_quad_acc_input[i187].im = setup.data[i187]}
Uses: power_quad_acc_n,setup.data
Defs: 
Assigns: power_quad_acc_input.im

Has unassed use power_quad_acc_n
Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i188{
power_quad_acc_input[i188].re = input[i188].f32_1}
Uses: power_quad_acc_n,input.f32_1
Defs: 
Assigns: power_quad_acc_input.re

Has unassed use power_quad_acc_n
Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i189{
output[i189].f32_1 = power_quad_acc_output[i189].re}
Uses: power_quad_acc_n,power_quad_acc_output.re
Defs: 
Assigns: output.f32_1

Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i190{
output[i190].f32_2 = power_quad_acc_output[i190].im}
Uses: power_quad_acc_n,power_quad_acc_output.im
Defs: 
Assigns: output.f32_2

Looking at GIR GIR: free power_quad_acc_input
Uses: 
Defs: 
Assigns: 

Looking at GIR GIR: free power_quad_acc_output
Uses: 
Defs: 
Assigns: 

Looking at GIR GIR: free power_quad_acc_n
Uses: 
Defs: 
Assigns: 

Looking at GIR GIR: Define power_quad_acc_output
Uses: power_quad_acc_n
Defs: power_quad_acc_output.re,power_quad_acc_output.im
Assigns: 

Has unassed use power_quad_acc_n
Looking at GIR GIR: Define power_quad_acc_n
Uses: 
Defs: power_quad_acc_n
Assigns: 

Looking at GIR GIR: power_quad_acc_n = setup.N
Uses: setup.N
Defs: 
Assigns: power_quad_acc_n

Has undefed ass power_quad_acc_n
Looking at GIR GIR: Define power_quad_acc_input
Uses: power_quad_acc_n
Defs: power_quad_acc_input.re,power_quad_acc_input.im
Assigns: 

Has unassed use power_quad_acc_n
Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i192{
power_quad_acc_input[i192].im = setup.e[i192]}
Uses: power_quad_acc_n,setup.e
Defs: 
Assigns: power_quad_acc_input.im

Has unassed use power_quad_acc_n
Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i193{
power_quad_acc_input[i193].re = input[i193].f32_1}
Uses: power_quad_acc_n,input.f32_1
Defs: 
Assigns: power_quad_acc_input.re

Has unassed use power_quad_acc_n
Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i194{
output[i194].f32_1 = power_quad_acc_output[i194].im}
Uses: power_quad_acc_n,power_quad_acc_output.im
Defs: 
Assigns: output.f32_1

Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i195{
output[i195].f32_2 = power_quad_acc_output[i195].re}
Uses: power_quad_acc_n,power_quad_acc_output.re
Defs: 
Assigns: output.f32_2

Looking at GIR GIR: free power_quad_acc_input
Uses: 
Defs: 
Assigns: 

Looking at GIR GIR: free power_quad_acc_output
Uses: 
Defs: 
Assigns: 

Looking at GIR GIR: free power_quad_acc_n
Uses: 
Defs: 
Assigns: 

Looking at GIR GIR: Define power_quad_acc_output
Uses: power_quad_acc_n
Defs: power_quad_acc_output.re,power_quad_acc_output.im
Assigns: 

Has unassed use power_quad_acc_n
Looking at GIR GIR: Define power_quad_acc_n
Uses: 
Defs: power_quad_acc_n
Assigns: 

Looking at GIR GIR: power_quad_acc_n = setup.N
Uses: setup.N
Defs: 
Assigns: power_quad_acc_n

Has undefed ass power_quad_acc_n
Looking at GIR GIR: Define power_quad_acc_input
Uses: power_quad_acc_n
Defs: power_quad_acc_input.re,power_quad_acc_input.im
Assigns: 

Has unassed use power_quad_acc_n
Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i197{
power_quad_acc_input[i197].im = setup.e[i197]}
Uses: power_quad_acc_n,setup.e
Defs: 
Assigns: power_quad_acc_input.im

Has unassed use power_quad_acc_n
Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i198{
power_quad_acc_input[i198].re = input[i198].f32_1}
Uses: power_quad_acc_n,input.f32_1
Defs: 
Assigns: power_quad_acc_input.re

Has unassed use power_quad_acc_n
Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i199{
output[i199].f32_1 = power_quad_acc_output[i199].re}
Uses: power_quad_acc_n,power_quad_acc_output.re
Defs: 
Assigns: output.f32_1

Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i200{
output[i200].f32_2 = power_quad_acc_output[i200].im}
Uses: power_quad_acc_n,power_quad_acc_output.im
Defs: 
Assigns: output.f32_2

Looking at GIR GIR: free power_quad_acc_input
Uses: 
Defs: 
Assigns: 

Looking at GIR GIR: free power_quad_acc_output
Uses: 
Defs: 
Assigns: 

Looking at GIR GIR: free power_quad_acc_n
Uses: 
Defs: 
Assigns: 

Looking at GIR GIR: Define power_quad_acc_output
Uses: power_quad_acc_n
Defs: power_quad_acc_output.re,power_quad_acc_output.im
Assigns: 

Has unassed use power_quad_acc_n
Looking at GIR GIR: Define power_quad_acc_n
Uses: 
Defs: power_quad_acc_n
Assigns: 

Looking at GIR GIR: power_quad_acc_n = setup.N
Uses: setup.N
Defs: 
Assigns: power_quad_acc_n

Has undefed ass power_quad_acc_n
Looking at GIR GIR: Define power_quad_acc_input
Uses: power_quad_acc_n
Defs: power_quad_acc_input.re,power_quad_acc_input.im
Assigns: 

Has unassed use power_quad_acc_n
Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i202{
power_quad_acc_input[i202].im = setup.twiddle[i202]}
Uses: power_quad_acc_n,setup.twiddle
Defs: 
Assigns: power_quad_acc_input.im

Has unassed use power_quad_acc_n
Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i203{
power_quad_acc_input[i203].re = input[i203].f32_1}
Uses: power_quad_acc_n,input.f32_1
Defs: 
Assigns: power_quad_acc_input.re

Has unassed use power_quad_acc_n
Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i204{
output[i204].f32_1 = power_quad_acc_output[i204].im}
Uses: power_quad_acc_n,power_quad_acc_output.im
Defs: 
Assigns: output.f32_1

Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i205{
output[i205].f32_2 = power_quad_acc_output[i205].re}
Uses: power_quad_acc_n,power_quad_acc_output.re
Defs: 
Assigns: output.f32_2

Looking at GIR GIR: free power_quad_acc_input
Uses: 
Defs: 
Assigns: 

Looking at GIR GIR: free power_quad_acc_output
Uses: 
Defs: 
Assigns: 

Looking at GIR GIR: free power_quad_acc_n
Uses: 
Defs: 
Assigns: 

Looking at GIR GIR: Define power_quad_acc_output
Uses: power_quad_acc_n
Defs: power_quad_acc_output.re,power_quad_acc_output.im
Assigns: 

Has unassed use power_quad_acc_n
Looking at GIR GIR: Define power_quad_acc_n
Uses: 
Defs: power_quad_acc_n
Assigns: 

Looking at GIR GIR: power_quad_acc_n = setup.N
Uses: setup.N
Defs: 
Assigns: power_quad_acc_n

Has undefed ass power_quad_acc_n
Looking at GIR GIR: Define power_quad_acc_input
Uses: power_quad_acc_n
Defs: power_quad_acc_input.re,power_quad_acc_input.im
Assigns: 

Has unassed use power_quad_acc_n
Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i207{
power_quad_acc_input[i207].im = setup.twiddle[i207]}
Uses: power_quad_acc_n,setup.twiddle
Defs: 
Assigns: power_quad_acc_input.im

Has unassed use power_quad_acc_n
Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i208{
power_quad_acc_input[i208].re = input[i208].f32_1}
Uses: power_quad_acc_n,input.f32_1
Defs: 
Assigns: power_quad_acc_input.re

Has unassed use power_quad_acc_n
Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i209{
output[i209].f32_1 = power_quad_acc_output[i209].re}
Uses: power_quad_acc_n,power_quad_acc_output.re
Defs: 
Assigns: output.f32_1

Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i210{
output[i210].f32_2 = power_quad_acc_output[i210].im}
Uses: power_quad_acc_n,power_quad_acc_output.im
Defs: 
Assigns: output.f32_2

Looking at GIR GIR: free power_quad_acc_input
Uses: 
Defs: 
Assigns: 

Looking at GIR GIR: free power_quad_acc_output
Uses: 
Defs: 
Assigns: 

Looking at GIR GIR: free power_quad_acc_n
Uses: 
Defs: 
Assigns: 

Looking at GIR GIR: Define power_quad_acc_output
Uses: power_quad_acc_n
Defs: power_quad_acc_output.re,power_quad_acc_output.im
Assigns: 

Has unassed use power_quad_acc_n
Looking at GIR GIR: Define power_quad_acc_n
Uses: 
Defs: power_quad_acc_n
Assigns: 

Looking at GIR GIR: power_quad_acc_n = setup.N
Uses: setup.N
Defs: 
Assigns: power_quad_acc_n

Has undefed ass power_quad_acc_n
Looking at GIR GIR: Define power_quad_acc_input
Uses: power_quad_acc_n
Defs: power_quad_acc_input.re,power_quad_acc_input.im
Assigns: 

Has unassed use power_quad_acc_n
Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i212{
power_quad_acc_input[i212].im = input[i212].f32_2}
Uses: power_quad_acc_n,input.f32_2
Defs: 
Assigns: power_quad_acc_input.im

Has unassed use power_quad_acc_n
Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i213{
power_quad_acc_input[i213].re = input[i213].f32_1}
Uses: power_quad_acc_n,input.f32_1
Defs: 
Assigns: power_quad_acc_input.re

Has unassed use power_quad_acc_n
Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i214{
output[i214].f32_1 = power_quad_acc_output[i214].im}
Uses: power_quad_acc_n,power_quad_acc_output.im
Defs: 
Assigns: output.f32_1

Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i215{
output[i215].f32_2 = power_quad_acc_output[i215].re}
Uses: power_quad_acc_n,power_quad_acc_output.re
Defs: 
Assigns: output.f32_2

Looking at GIR GIR: free power_quad_acc_input
Uses: 
Defs: 
Assigns: 

Looking at GIR GIR: free power_quad_acc_output
Uses: 
Defs: 
Assigns: 

Looking at GIR GIR: free power_quad_acc_n
Uses: 
Defs: 
Assigns: 

Looking at GIR GIR: Define power_quad_acc_output
Uses: power_quad_acc_n
Defs: power_quad_acc_output.re,power_quad_acc_output.im
Assigns: 

Has unassed use power_quad_acc_n
Looking at GIR GIR: Define power_quad_acc_n
Uses: 
Defs: power_quad_acc_n
Assigns: 

Looking at GIR GIR: power_quad_acc_n = setup.N
Uses: setup.N
Defs: 
Assigns: power_quad_acc_n

Has undefed ass power_quad_acc_n
Looking at GIR GIR: Define power_quad_acc_input
Uses: power_quad_acc_n
Defs: power_quad_acc_input.re,power_quad_acc_input.im
Assigns: 

Has unassed use power_quad_acc_n
Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i217{
power_quad_acc_input[i217].im = input[i217].f32_2}
Uses: power_quad_acc_n,input.f32_2
Defs: 
Assigns: power_quad_acc_input.im

Has unassed use power_quad_acc_n
Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i218{
power_quad_acc_input[i218].re = input[i218].f32_1}
Uses: power_quad_acc_n,input.f32_1
Defs: 
Assigns: power_quad_acc_input.re

Has unassed use power_quad_acc_n
Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i219{
output[i219].f32_1 = power_quad_acc_output[i219].re}
Uses: power_quad_acc_n,power_quad_acc_output.re
Defs: 
Assigns: output.f32_1

Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i220{
output[i220].f32_2 = power_quad_acc_output[i220].im}
Uses: power_quad_acc_n,power_quad_acc_output.im
Defs: 
Assigns: output.f32_2

Looking at GIR GIR: free power_quad_acc_input
Uses: 
Defs: 
Assigns: 

Looking at GIR GIR: free power_quad_acc_output
Uses: 
Defs: 
Assigns: 

Looking at GIR GIR: free power_quad_acc_n
Uses: 
Defs: 
Assigns: 

Looking at GIR GIR: Define power_quad_acc_output
Uses: power_quad_acc_n
Defs: power_quad_acc_output.re,power_quad_acc_output.im
Assigns: 

Has unassed use power_quad_acc_n
Looking at GIR GIR: Define power_quad_acc_n
Uses: 
Defs: power_quad_acc_n
Assigns: 

Looking at GIR GIR: power_quad_acc_n = setup.N
Uses: setup.N
Defs: 
Assigns: power_quad_acc_n

Has undefed ass power_quad_acc_n
Looking at GIR GIR: Define power_quad_acc_input
Uses: power_quad_acc_n
Defs: power_quad_acc_input.re,power_quad_acc_input.im
Assigns: 

Has unassed use power_quad_acc_n
Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i222{
power_quad_acc_input[i222].im = work[i222].f32_1}
Uses: power_quad_acc_n,work.f32_1
Defs: 
Assigns: power_quad_acc_input.im

Has unassed use power_quad_acc_n
Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i223{
power_quad_acc_input[i223].re = input[i223].f32_1}
Uses: power_quad_acc_n,input.f32_1
Defs: 
Assigns: power_quad_acc_input.re

Has unassed use power_quad_acc_n
Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i224{
output[i224].f32_1 = power_quad_acc_output[i224].im}
Uses: power_quad_acc_n,power_quad_acc_output.im
Defs: 
Assigns: output.f32_1

Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i225{
output[i225].f32_2 = power_quad_acc_output[i225].re}
Uses: power_quad_acc_n,power_quad_acc_output.re
Defs: 
Assigns: output.f32_2

Looking at GIR GIR: free power_quad_acc_input
Uses: 
Defs: 
Assigns: 

Looking at GIR GIR: free power_quad_acc_output
Uses: 
Defs: 
Assigns: 

Looking at GIR GIR: free power_quad_acc_n
Uses: 
Defs: 
Assigns: 

Looking at GIR GIR: Define power_quad_acc_output
Uses: power_quad_acc_n
Defs: power_quad_acc_output.re,power_quad_acc_output.im
Assigns: 

Has unassed use power_quad_acc_n
Looking at GIR GIR: Define power_quad_acc_n
Uses: 
Defs: power_quad_acc_n
Assigns: 

Looking at GIR GIR: power_quad_acc_n = setup.N
Uses: setup.N
Defs: 
Assigns: power_quad_acc_n

Has undefed ass power_quad_acc_n
Looking at GIR GIR: Define power_quad_acc_input
Uses: power_quad_acc_n
Defs: power_quad_acc_input.re,power_quad_acc_input.im
Assigns: 

Has unassed use power_quad_acc_n
Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i227{
power_quad_acc_input[i227].im = work[i227].f32_1}
Uses: power_quad_acc_n,work.f32_1
Defs: 
Assigns: power_quad_acc_input.im

Has unassed use power_quad_acc_n
Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i228{
power_quad_acc_input[i228].re = input[i228].f32_1}
Uses: power_quad_acc_n,input.f32_1
Defs: 
Assigns: power_quad_acc_input.re

Has unassed use power_quad_acc_n
Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i229{
output[i229].f32_1 = power_quad_acc_output[i229].re}
Uses: power_quad_acc_n,power_quad_acc_output.re
Defs: 
Assigns: output.f32_1

Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i230{
output[i230].f32_2 = power_quad_acc_output[i230].im}
Uses: power_quad_acc_n,power_quad_acc_output.im
Defs: 
Assigns: output.f32_2

Looking at GIR GIR: free power_quad_acc_input
Uses: 
Defs: 
Assigns: 

Looking at GIR GIR: free power_quad_acc_output
Uses: 
Defs: 
Assigns: 

Looking at GIR GIR: free power_quad_acc_n
Uses: 
Defs: 
Assigns: 

Looking at GIR GIR: Define power_quad_acc_output
Uses: power_quad_acc_n
Defs: power_quad_acc_output.re,power_quad_acc_output.im
Assigns: 

Has unassed use power_quad_acc_n
Looking at GIR GIR: Define power_quad_acc_n
Uses: 
Defs: power_quad_acc_n
Assigns: 

Looking at GIR GIR: power_quad_acc_n = setup.N
Uses: setup.N
Defs: 
Assigns: power_quad_acc_n

Has undefed ass power_quad_acc_n
Looking at GIR GIR: Define power_quad_acc_input
Uses: power_quad_acc_n
Defs: power_quad_acc_input.re,power_quad_acc_input.im
Assigns: 

Has unassed use power_quad_acc_n
Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i232{
power_quad_acc_input[i232].im = work[i232].f32_2}
Uses: power_quad_acc_n,work.f32_2
Defs: 
Assigns: power_quad_acc_input.im

Has unassed use power_quad_acc_n
Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i233{
power_quad_acc_input[i233].re = input[i233].f32_1}
Uses: power_quad_acc_n,input.f32_1
Defs: 
Assigns: power_quad_acc_input.re

Has unassed use power_quad_acc_n
Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i234{
output[i234].f32_1 = power_quad_acc_output[i234].im}
Uses: power_quad_acc_n,power_quad_acc_output.im
Defs: 
Assigns: output.f32_1

Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i235{
output[i235].f32_2 = power_quad_acc_output[i235].re}
Uses: power_quad_acc_n,power_quad_acc_output.re
Defs: 
Assigns: output.f32_2

Looking at GIR GIR: free power_quad_acc_input
Uses: 
Defs: 
Assigns: 

Looking at GIR GIR: free power_quad_acc_output
Uses: 
Defs: 
Assigns: 

Looking at GIR GIR: free power_quad_acc_n
Uses: 
Defs: 
Assigns: 

Looking at GIR GIR: Define power_quad_acc_output
Uses: power_quad_acc_n
Defs: power_quad_acc_output.re,power_quad_acc_output.im
Assigns: 

Has unassed use power_quad_acc_n
Looking at GIR GIR: Define power_quad_acc_n
Uses: 
Defs: power_quad_acc_n
Assigns: 

Looking at GIR GIR: power_quad_acc_n = setup.N
Uses: setup.N
Defs: 
Assigns: power_quad_acc_n

Has undefed ass power_quad_acc_n
Looking at GIR GIR: Define power_quad_acc_input
Uses: power_quad_acc_n
Defs: power_quad_acc_input.re,power_quad_acc_input.im
Assigns: 

Has unassed use power_quad_acc_n
Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i237{
power_quad_acc_input[i237].im = work[i237].f32_2}
Uses: power_quad_acc_n,work.f32_2
Defs: 
Assigns: power_quad_acc_input.im

Has unassed use power_quad_acc_n
Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i238{
power_quad_acc_input[i238].re = input[i238].f32_1}
Uses: power_quad_acc_n,input.f32_1
Defs: 
Assigns: power_quad_acc_input.re

Has unassed use power_quad_acc_n
Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i239{
output[i239].f32_1 = power_quad_acc_output[i239].re}
Uses: power_quad_acc_n,power_quad_acc_output.re
Defs: 
Assigns: output.f32_1

Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i240{
output[i240].f32_2 = power_quad_acc_output[i240].im}
Uses: power_quad_acc_n,power_quad_acc_output.im
Defs: 
Assigns: output.f32_2

Looking at GIR GIR: free power_quad_acc_input
Uses: 
Defs: 
Assigns: 

Looking at GIR GIR: free power_quad_acc_output
Uses: 
Defs: 
Assigns: 

Looking at GIR GIR: free power_quad_acc_n
Uses: 
Defs: 
Assigns: 

Looking at GIR GIR: Define power_quad_acc_output
Uses: power_quad_acc_n
Defs: power_quad_acc_output.re,power_quad_acc_output.im
Assigns: 

Has unassed use power_quad_acc_n
Looking at GIR GIR: Define power_quad_acc_n
Uses: 
Defs: power_quad_acc_n
Assigns: 

Looking at GIR GIR: power_quad_acc_n = setup.N
Uses: setup.N
Defs: 
Assigns: power_quad_acc_n

Has undefed ass power_quad_acc_n
Looking at GIR GIR: Define power_quad_acc_input
Uses: power_quad_acc_n
Defs: power_quad_acc_input.re,power_quad_acc_input.im
Assigns: 

Has unassed use power_quad_acc_n
Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i242{
power_quad_acc_input[i242].im = setup.data[i242]}
Uses: power_quad_acc_n,setup.data
Defs: 
Assigns: power_quad_acc_input.im

Has unassed use power_quad_acc_n
Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i243{
power_quad_acc_input[i243].re = input[i243].f32_2}
Uses: power_quad_acc_n,input.f32_2
Defs: 
Assigns: power_quad_acc_input.re

Has unassed use power_quad_acc_n
Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i244{
output[i244].f32_1 = power_quad_acc_output[i244].im}
Uses: power_quad_acc_n,power_quad_acc_output.im
Defs: 
Assigns: output.f32_1

Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i245{
output[i245].f32_2 = power_quad_acc_output[i245].re}
Uses: power_quad_acc_n,power_quad_acc_output.re
Defs: 
Assigns: output.f32_2

Looking at GIR GIR: free power_quad_acc_input
Uses: 
Defs: 
Assigns: 

Looking at GIR GIR: free power_quad_acc_output
Uses: 
Defs: 
Assigns: 

Looking at GIR GIR: free power_quad_acc_n
Uses: 
Defs: 
Assigns: 

Looking at GIR GIR: Define power_quad_acc_output
Uses: power_quad_acc_n
Defs: power_quad_acc_output.re,power_quad_acc_output.im
Assigns: 

Has unassed use power_quad_acc_n
Looking at GIR GIR: Define power_quad_acc_n
Uses: 
Defs: power_quad_acc_n
Assigns: 

Looking at GIR GIR: power_quad_acc_n = setup.N
Uses: setup.N
Defs: 
Assigns: power_quad_acc_n

Has undefed ass power_quad_acc_n
Looking at GIR GIR: Define power_quad_acc_input
Uses: power_quad_acc_n
Defs: power_quad_acc_input.re,power_quad_acc_input.im
Assigns: 

Has unassed use power_quad_acc_n
Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i247{
power_quad_acc_input[i247].im = setup.data[i247]}
Uses: power_quad_acc_n,setup.data
Defs: 
Assigns: power_quad_acc_input.im

Has unassed use power_quad_acc_n
Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i248{
power_quad_acc_input[i248].re = input[i248].f32_2}
Uses: power_quad_acc_n,input.f32_2
Defs: 
Assigns: power_quad_acc_input.re

Has unassed use power_quad_acc_n
Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i249{
output[i249].f32_1 = power_quad_acc_output[i249].re}
Uses: power_quad_acc_n,power_quad_acc_output.re
Defs: 
Assigns: output.f32_1

Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i250{
output[i250].f32_2 = power_quad_acc_output[i250].im}
Uses: power_quad_acc_n,power_quad_acc_output.im
Defs: 
Assigns: output.f32_2

Looking at GIR GIR: free power_quad_acc_input
Uses: 
Defs: 
Assigns: 

Looking at GIR GIR: free power_quad_acc_output
Uses: 
Defs: 
Assigns: 

Looking at GIR GIR: free power_quad_acc_n
Uses: 
Defs: 
Assigns: 

Looking at GIR GIR: Define power_quad_acc_output
Uses: power_quad_acc_n
Defs: power_quad_acc_output.re,power_quad_acc_output.im
Assigns: 

Has unassed use power_quad_acc_n
Looking at GIR GIR: Define power_quad_acc_n
Uses: 
Defs: power_quad_acc_n
Assigns: 

Looking at GIR GIR: power_quad_acc_n = setup.N
Uses: setup.N
Defs: 
Assigns: power_quad_acc_n

Has undefed ass power_quad_acc_n
Looking at GIR GIR: Define power_quad_acc_input
Uses: power_quad_acc_n
Defs: power_quad_acc_input.re,power_quad_acc_input.im
Assigns: 

Has unassed use power_quad_acc_n
Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i252{
power_quad_acc_input[i252].im = setup.e[i252]}
Uses: power_quad_acc_n,setup.e
Defs: 
Assigns: power_quad_acc_input.im

Has unassed use power_quad_acc_n
Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i253{
power_quad_acc_input[i253].re = input[i253].f32_2}
Uses: power_quad_acc_n,input.f32_2
Defs: 
Assigns: power_quad_acc_input.re

Has unassed use power_quad_acc_n
Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i254{
output[i254].f32_1 = power_quad_acc_output[i254].im}
Uses: power_quad_acc_n,power_quad_acc_output.im
Defs: 
Assigns: output.f32_1

Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i255{
output[i255].f32_2 = power_quad_acc_output[i255].re}
Uses: power_quad_acc_n,power_quad_acc_output.re
Defs: 
Assigns: output.f32_2

Looking at GIR GIR: free power_quad_acc_input
Uses: 
Defs: 
Assigns: 

Looking at GIR GIR: free power_quad_acc_output
Uses: 
Defs: 
Assigns: 

Looking at GIR GIR: free power_quad_acc_n
Uses: 
Defs: 
Assigns: 

Looking at GIR GIR: Define power_quad_acc_output
Uses: power_quad_acc_n
Defs: power_quad_acc_output.re,power_quad_acc_output.im
Assigns: 

Has unassed use power_quad_acc_n
Looking at GIR GIR: Define power_quad_acc_n
Uses: 
Defs: power_quad_acc_n
Assigns: 

Looking at GIR GIR: power_quad_acc_n = setup.N
Uses: setup.N
Defs: 
Assigns: power_quad_acc_n

Has undefed ass power_quad_acc_n
Looking at GIR GIR: Define power_quad_acc_input
Uses: power_quad_acc_n
Defs: power_quad_acc_input.re,power_quad_acc_input.im
Assigns: 

Has unassed use power_quad_acc_n
Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i257{
power_quad_acc_input[i257].im = setup.e[i257]}
Uses: power_quad_acc_n,setup.e
Defs: 
Assigns: power_quad_acc_input.im

Has unassed use power_quad_acc_n
Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i258{
power_quad_acc_input[i258].re = input[i258].f32_2}
Uses: power_quad_acc_n,input.f32_2
Defs: 
Assigns: power_quad_acc_input.re

Has unassed use power_quad_acc_n
Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i259{
output[i259].f32_1 = power_quad_acc_output[i259].re}
Uses: power_quad_acc_n,power_quad_acc_output.re
Defs: 
Assigns: output.f32_1

Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i260{
output[i260].f32_2 = power_quad_acc_output[i260].im}
Uses: power_quad_acc_n,power_quad_acc_output.im
Defs: 
Assigns: output.f32_2

Looking at GIR GIR: free power_quad_acc_input
Uses: 
Defs: 
Assigns: 

Looking at GIR GIR: free power_quad_acc_output
Uses: 
Defs: 
Assigns: 

Looking at GIR GIR: free power_quad_acc_n
Uses: 
Defs: 
Assigns: 

Looking at GIR GIR: Define power_quad_acc_output
Uses: power_quad_acc_n
Defs: power_quad_acc_output.re,power_quad_acc_output.im
Assigns: 

Has unassed use power_quad_acc_n
Looking at GIR GIR: Define power_quad_acc_n
Uses: 
Defs: power_quad_acc_n
Assigns: 

Looking at GIR GIR: power_quad_acc_n = setup.N
Uses: setup.N
Defs: 
Assigns: power_quad_acc_n

Has undefed ass power_quad_acc_n
Looking at GIR GIR: Define power_quad_acc_input
Uses: power_quad_acc_n
Defs: power_quad_acc_input.re,power_quad_acc_input.im
Assigns: 

Has unassed use power_quad_acc_n
Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i262{
power_quad_acc_input[i262].im = setup.twiddle[i262]}
Uses: power_quad_acc_n,setup.twiddle
Defs: 
Assigns: power_quad_acc_input.im

Has unassed use power_quad_acc_n
Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i263{
power_quad_acc_input[i263].re = input[i263].f32_2}
Uses: power_quad_acc_n,input.f32_2
Defs: 
Assigns: power_quad_acc_input.re

Has unassed use power_quad_acc_n
Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i264{
output[i264].f32_1 = power_quad_acc_output[i264].im}
Uses: power_quad_acc_n,power_quad_acc_output.im
Defs: 
Assigns: output.f32_1

Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i265{
output[i265].f32_2 = power_quad_acc_output[i265].re}
Uses: power_quad_acc_n,power_quad_acc_output.re
Defs: 
Assigns: output.f32_2

Looking at GIR GIR: free power_quad_acc_input
Uses: 
Defs: 
Assigns: 

Looking at GIR GIR: free power_quad_acc_output
Uses: 
Defs: 
Assigns: 

Looking at GIR GIR: free power_quad_acc_n
Uses: 
Defs: 
Assigns: 

Looking at GIR GIR: Define power_quad_acc_output
Uses: power_quad_acc_n
Defs: power_quad_acc_output.re,power_quad_acc_output.im
Assigns: 

Has unassed use power_quad_acc_n
Looking at GIR GIR: Define power_quad_acc_n
Uses: 
Defs: power_quad_acc_n
Assigns: 

Looking at GIR GIR: power_quad_acc_n = setup.N
Uses: setup.N
Defs: 
Assigns: power_quad_acc_n

Has undefed ass power_quad_acc_n
Looking at GIR GIR: Define power_quad_acc_input
Uses: power_quad_acc_n
Defs: power_quad_acc_input.re,power_quad_acc_input.im
Assigns: 

Has unassed use power_quad_acc_n
Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i267{
power_quad_acc_input[i267].im = setup.twiddle[i267]}
Uses: power_quad_acc_n,setup.twiddle
Defs: 
Assigns: power_quad_acc_input.im

Has unassed use power_quad_acc_n
Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i268{
power_quad_acc_input[i268].re = input[i268].f32_2}
Uses: power_quad_acc_n,input.f32_2
Defs: 
Assigns: power_quad_acc_input.re

Has unassed use power_quad_acc_n
Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i269{
output[i269].f32_1 = power_quad_acc_output[i269].re}
Uses: power_quad_acc_n,power_quad_acc_output.re
Defs: 
Assigns: output.f32_1

Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i270{
output[i270].f32_2 = power_quad_acc_output[i270].im}
Uses: power_quad_acc_n,power_quad_acc_output.im
Defs: 
Assigns: output.f32_2

Looking at GIR GIR: free power_quad_acc_input
Uses: 
Defs: 
Assigns: 

Looking at GIR GIR: free power_quad_acc_output
Uses: 
Defs: 
Assigns: 

Looking at GIR GIR: free power_quad_acc_n
Uses: 
Defs: 
Assigns: 

Looking at GIR GIR: Define power_quad_acc_output
Uses: power_quad_acc_n
Defs: power_quad_acc_output.re,power_quad_acc_output.im
Assigns: 

Has unassed use power_quad_acc_n
Looking at GIR GIR: Define power_quad_acc_n
Uses: 
Defs: power_quad_acc_n
Assigns: 

Looking at GIR GIR: power_quad_acc_n = setup.N
Uses: setup.N
Defs: 
Assigns: power_quad_acc_n

Has undefed ass power_quad_acc_n
Looking at GIR GIR: Define power_quad_acc_input
Uses: power_quad_acc_n
Defs: power_quad_acc_input.re,power_quad_acc_input.im
Assigns: 

Has unassed use power_quad_acc_n
Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i272{
power_quad_acc_input[i272].im = input[i272].f32_1}
Uses: power_quad_acc_n,input.f32_1
Defs: 
Assigns: power_quad_acc_input.im

Has unassed use power_quad_acc_n
Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i273{
power_quad_acc_input[i273].re = input[i273].f32_2}
Uses: power_quad_acc_n,input.f32_2
Defs: 
Assigns: power_quad_acc_input.re

Has unassed use power_quad_acc_n
Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i274{
output[i274].f32_1 = power_quad_acc_output[i274].im}
Uses: power_quad_acc_n,power_quad_acc_output.im
Defs: 
Assigns: output.f32_1

Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i275{
output[i275].f32_2 = power_quad_acc_output[i275].re}
Uses: power_quad_acc_n,power_quad_acc_output.re
Defs: 
Assigns: output.f32_2

Looking at GIR GIR: free power_quad_acc_input
Uses: 
Defs: 
Assigns: 

Looking at GIR GIR: free power_quad_acc_output
Uses: 
Defs: 
Assigns: 

Looking at GIR GIR: free power_quad_acc_n
Uses: 
Defs: 
Assigns: 

Looking at GIR GIR: Define power_quad_acc_output
Uses: power_quad_acc_n
Defs: power_quad_acc_output.re,power_quad_acc_output.im
Assigns: 

Has unassed use power_quad_acc_n
Looking at GIR GIR: Define power_quad_acc_n
Uses: 
Defs: power_quad_acc_n
Assigns: 

Looking at GIR GIR: power_quad_acc_n = setup.N
Uses: setup.N
Defs: 
Assigns: power_quad_acc_n

Has undefed ass power_quad_acc_n
Looking at GIR GIR: Define power_quad_acc_input
Uses: power_quad_acc_n
Defs: power_quad_acc_input.re,power_quad_acc_input.im
Assigns: 

Has unassed use power_quad_acc_n
Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i277{
power_quad_acc_input[i277].im = input[i277].f32_1}
Uses: power_quad_acc_n,input.f32_1
Defs: 
Assigns: power_quad_acc_input.im

Has unassed use power_quad_acc_n
Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i278{
power_quad_acc_input[i278].re = input[i278].f32_2}
Uses: power_quad_acc_n,input.f32_2
Defs: 
Assigns: power_quad_acc_input.re

Has unassed use power_quad_acc_n
Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i279{
output[i279].f32_1 = power_quad_acc_output[i279].re}
Uses: power_quad_acc_n,power_quad_acc_output.re
Defs: 
Assigns: output.f32_1

Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i280{
output[i280].f32_2 = power_quad_acc_output[i280].im}
Uses: power_quad_acc_n,power_quad_acc_output.im
Defs: 
Assigns: output.f32_2

Looking at GIR GIR: free power_quad_acc_input
Uses: 
Defs: 
Assigns: 

Looking at GIR GIR: free power_quad_acc_output
Uses: 
Defs: 
Assigns: 

Looking at GIR GIR: free power_quad_acc_n
Uses: 
Defs: 
Assigns: 

Looking at GIR GIR: Define power_quad_acc_output
Uses: power_quad_acc_n
Defs: power_quad_acc_output.re,power_quad_acc_output.im
Assigns: 

Has unassed use power_quad_acc_n
Looking at GIR GIR: Define power_quad_acc_n
Uses: 
Defs: power_quad_acc_n
Assigns: 

Looking at GIR GIR: power_quad_acc_n = setup.N
Uses: setup.N
Defs: 
Assigns: power_quad_acc_n

Has undefed ass power_quad_acc_n
Looking at GIR GIR: Define power_quad_acc_input
Uses: power_quad_acc_n
Defs: power_quad_acc_input.re,power_quad_acc_input.im
Assigns: 

Has unassed use power_quad_acc_n
Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i282{
power_quad_acc_input[i282].im = work[i282].f32_1}
Uses: power_quad_acc_n,work.f32_1
Defs: 
Assigns: power_quad_acc_input.im

Has unassed use power_quad_acc_n
Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i283{
power_quad_acc_input[i283].re = input[i283].f32_2}
Uses: power_quad_acc_n,input.f32_2
Defs: 
Assigns: power_quad_acc_input.re

Has unassed use power_quad_acc_n
Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i284{
output[i284].f32_1 = power_quad_acc_output[i284].im}
Uses: power_quad_acc_n,power_quad_acc_output.im
Defs: 
Assigns: output.f32_1

Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i285{
output[i285].f32_2 = power_quad_acc_output[i285].re}
Uses: power_quad_acc_n,power_quad_acc_output.re
Defs: 
Assigns: output.f32_2

Looking at GIR GIR: free power_quad_acc_input
Uses: 
Defs: 
Assigns: 

Looking at GIR GIR: free power_quad_acc_output
Uses: 
Defs: 
Assigns: 

Looking at GIR GIR: free power_quad_acc_n
Uses: 
Defs: 
Assigns: 

Looking at GIR GIR: Define power_quad_acc_output
Uses: power_quad_acc_n
Defs: power_quad_acc_output.re,power_quad_acc_output.im
Assigns: 

Has unassed use power_quad_acc_n
Looking at GIR GIR: Define power_quad_acc_n
Uses: 
Defs: power_quad_acc_n
Assigns: 

Looking at GIR GIR: power_quad_acc_n = setup.N
Uses: setup.N
Defs: 
Assigns: power_quad_acc_n

Has undefed ass power_quad_acc_n
Looking at GIR GIR: Define power_quad_acc_input
Uses: power_quad_acc_n
Defs: power_quad_acc_input.re,power_quad_acc_input.im
Assigns: 

Has unassed use power_quad_acc_n
Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i287{
power_quad_acc_input[i287].im = work[i287].f32_1}
Uses: power_quad_acc_n,work.f32_1
Defs: 
Assigns: power_quad_acc_input.im

Has unassed use power_quad_acc_n
Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i288{
power_quad_acc_input[i288].re = input[i288].f32_2}
Uses: power_quad_acc_n,input.f32_2
Defs: 
Assigns: power_quad_acc_input.re

Has unassed use power_quad_acc_n
Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i289{
output[i289].f32_1 = power_quad_acc_output[i289].re}
Uses: power_quad_acc_n,power_quad_acc_output.re
Defs: 
Assigns: output.f32_1

Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i290{
output[i290].f32_2 = power_quad_acc_output[i290].im}
Uses: power_quad_acc_n,power_quad_acc_output.im
Defs: 
Assigns: output.f32_2

Looking at GIR GIR: free power_quad_acc_input
Uses: 
Defs: 
Assigns: 

Looking at GIR GIR: free power_quad_acc_output
Uses: 
Defs: 
Assigns: 

Looking at GIR GIR: free power_quad_acc_n
Uses: 
Defs: 
Assigns: 

Looking at GIR GIR: Define power_quad_acc_output
Uses: power_quad_acc_n
Defs: power_quad_acc_output.re,power_quad_acc_output.im
Assigns: 

Has unassed use power_quad_acc_n
Looking at GIR GIR: Define power_quad_acc_n
Uses: 
Defs: power_quad_acc_n
Assigns: 

Looking at GIR GIR: power_quad_acc_n = setup.N
Uses: setup.N
Defs: 
Assigns: power_quad_acc_n

Has undefed ass power_quad_acc_n
Looking at GIR GIR: Define power_quad_acc_input
Uses: power_quad_acc_n
Defs: power_quad_acc_input.re,power_quad_acc_input.im
Assigns: 

Has unassed use power_quad_acc_n
Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i292{
power_quad_acc_input[i292].im = work[i292].f32_2}
Uses: power_quad_acc_n,work.f32_2
Defs: 
Assigns: power_quad_acc_input.im

Has unassed use power_quad_acc_n
Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i293{
power_quad_acc_input[i293].re = input[i293].f32_2}
Uses: power_quad_acc_n,input.f32_2
Defs: 
Assigns: power_quad_acc_input.re

Has unassed use power_quad_acc_n
Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i294{
output[i294].f32_1 = power_quad_acc_output[i294].im}
Uses: power_quad_acc_n,power_quad_acc_output.im
Defs: 
Assigns: output.f32_1

Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i295{
output[i295].f32_2 = power_quad_acc_output[i295].re}
Uses: power_quad_acc_n,power_quad_acc_output.re
Defs: 
Assigns: output.f32_2

Looking at GIR GIR: free power_quad_acc_input
Uses: 
Defs: 
Assigns: 

Looking at GIR GIR: free power_quad_acc_output
Uses: 
Defs: 
Assigns: 

Looking at GIR GIR: free power_quad_acc_n
Uses: 
Defs: 
Assigns: 

Looking at GIR GIR: Define power_quad_acc_output
Uses: power_quad_acc_n
Defs: power_quad_acc_output.re,power_quad_acc_output.im
Assigns: 

Has unassed use power_quad_acc_n
Looking at GIR GIR: Define power_quad_acc_n
Uses: 
Defs: power_quad_acc_n
Assigns: 

Looking at GIR GIR: power_quad_acc_n = setup.N
Uses: setup.N
Defs: 
Assigns: power_quad_acc_n

Has undefed ass power_quad_acc_n
Looking at GIR GIR: Define power_quad_acc_input
Uses: power_quad_acc_n
Defs: power_quad_acc_input.re,power_quad_acc_input.im
Assigns: 

Has unassed use power_quad_acc_n
Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i297{
power_quad_acc_input[i297].im = work[i297].f32_2}
Uses: power_quad_acc_n,work.f32_2
Defs: 
Assigns: power_quad_acc_input.im

Has unassed use power_quad_acc_n
Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i298{
power_quad_acc_input[i298].re = input[i298].f32_2}
Uses: power_quad_acc_n,input.f32_2
Defs: 
Assigns: power_quad_acc_input.re

Has unassed use power_quad_acc_n
Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i299{
output[i299].f32_1 = power_quad_acc_output[i299].re}
Uses: power_quad_acc_n,power_quad_acc_output.re
Defs: 
Assigns: output.f32_1

Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i300{
output[i300].f32_2 = power_quad_acc_output[i300].im}
Uses: power_quad_acc_n,power_quad_acc_output.im
Defs: 
Assigns: output.f32_2

Looking at GIR GIR: free power_quad_acc_input
Uses: 
Defs: 
Assigns: 

Looking at GIR GIR: free power_quad_acc_output
Uses: 
Defs: 
Assigns: 

Looking at GIR GIR: free power_quad_acc_n
Uses: 
Defs: 
Assigns: 

Looking at GIR GIR: Define power_quad_acc_output
Uses: power_quad_acc_n
Defs: power_quad_acc_output.re,power_quad_acc_output.im
Assigns: 

Has unassed use power_quad_acc_n
Looking at GIR GIR: Define power_quad_acc_n
Uses: 
Defs: power_quad_acc_n
Assigns: 

Looking at GIR GIR: power_quad_acc_n = setup.N
Uses: setup.N
Defs: 
Assigns: power_quad_acc_n

Has undefed ass power_quad_acc_n
Looking at GIR GIR: Define power_quad_acc_input
Uses: power_quad_acc_n
Defs: power_quad_acc_input.re,power_quad_acc_input.im
Assigns: 

Has unassed use power_quad_acc_n
Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i302{
power_quad_acc_input[i302].im = setup.data[i302]}
Uses: power_quad_acc_n,setup.data
Defs: 
Assigns: power_quad_acc_input.im

Has unassed use power_quad_acc_n
Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i303{
power_quad_acc_input[i303].re = work[i303].f32_1}
Uses: power_quad_acc_n,work.f32_1
Defs: 
Assigns: power_quad_acc_input.re

Has unassed use power_quad_acc_n
Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i304{
output[i304].f32_1 = power_quad_acc_output[i304].im}
Uses: power_quad_acc_n,power_quad_acc_output.im
Defs: 
Assigns: output.f32_1

Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i305{
output[i305].f32_2 = power_quad_acc_output[i305].re}
Uses: power_quad_acc_n,power_quad_acc_output.re
Defs: 
Assigns: output.f32_2

Looking at GIR GIR: free power_quad_acc_input
Uses: 
Defs: 
Assigns: 

Looking at GIR GIR: free power_quad_acc_output
Uses: 
Defs: 
Assigns: 

Looking at GIR GIR: free power_quad_acc_n
Uses: 
Defs: 
Assigns: 

Looking at GIR GIR: Define power_quad_acc_output
Uses: power_quad_acc_n
Defs: power_quad_acc_output.re,power_quad_acc_output.im
Assigns: 

Has unassed use power_quad_acc_n
Looking at GIR GIR: Define power_quad_acc_n
Uses: 
Defs: power_quad_acc_n
Assigns: 

Looking at GIR GIR: power_quad_acc_n = setup.N
Uses: setup.N
Defs: 
Assigns: power_quad_acc_n

Has undefed ass power_quad_acc_n
Looking at GIR GIR: Define power_quad_acc_input
Uses: power_quad_acc_n
Defs: power_quad_acc_input.re,power_quad_acc_input.im
Assigns: 

Has unassed use power_quad_acc_n
Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i307{
power_quad_acc_input[i307].im = setup.data[i307]}
Uses: power_quad_acc_n,setup.data
Defs: 
Assigns: power_quad_acc_input.im

Has unassed use power_quad_acc_n
Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i308{
power_quad_acc_input[i308].re = work[i308].f32_1}
Uses: power_quad_acc_n,work.f32_1
Defs: 
Assigns: power_quad_acc_input.re

Has unassed use power_quad_acc_n
Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i309{
output[i309].f32_1 = power_quad_acc_output[i309].re}
Uses: power_quad_acc_n,power_quad_acc_output.re
Defs: 
Assigns: output.f32_1

Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i310{
output[i310].f32_2 = power_quad_acc_output[i310].im}
Uses: power_quad_acc_n,power_quad_acc_output.im
Defs: 
Assigns: output.f32_2

Looking at GIR GIR: free power_quad_acc_input
Uses: 
Defs: 
Assigns: 

Looking at GIR GIR: free power_quad_acc_output
Uses: 
Defs: 
Assigns: 

Looking at GIR GIR: free power_quad_acc_n
Uses: 
Defs: 
Assigns: 

Looking at GIR GIR: Define power_quad_acc_output
Uses: power_quad_acc_n
Defs: power_quad_acc_output.re,power_quad_acc_output.im
Assigns: 

Has unassed use power_quad_acc_n
Looking at GIR GIR: Define power_quad_acc_n
Uses: 
Defs: power_quad_acc_n
Assigns: 

Looking at GIR GIR: power_quad_acc_n = setup.N
Uses: setup.N
Defs: 
Assigns: power_quad_acc_n

Has undefed ass power_quad_acc_n
Looking at GIR GIR: Define power_quad_acc_input
Uses: power_quad_acc_n
Defs: power_quad_acc_input.re,power_quad_acc_input.im
Assigns: 

Has unassed use power_quad_acc_n
Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i312{
power_quad_acc_input[i312].im = setup.e[i312]}
Uses: power_quad_acc_n,setup.e
Defs: 
Assigns: power_quad_acc_input.im

Has unassed use power_quad_acc_n
Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i313{
power_quad_acc_input[i313].re = work[i313].f32_1}
Uses: power_quad_acc_n,work.f32_1
Defs: 
Assigns: power_quad_acc_input.re

Has unassed use power_quad_acc_n
Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i314{
output[i314].f32_1 = power_quad_acc_output[i314].im}
Uses: power_quad_acc_n,power_quad_acc_output.im
Defs: 
Assigns: output.f32_1

Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i315{
output[i315].f32_2 = power_quad_acc_output[i315].re}
Uses: power_quad_acc_n,power_quad_acc_output.re
Defs: 
Assigns: output.f32_2

Looking at GIR GIR: free power_quad_acc_input
Uses: 
Defs: 
Assigns: 

Looking at GIR GIR: free power_quad_acc_output
Uses: 
Defs: 
Assigns: 

Looking at GIR GIR: free power_quad_acc_n
Uses: 
Defs: 
Assigns: 

Looking at GIR GIR: Define power_quad_acc_output
Uses: power_quad_acc_n
Defs: power_quad_acc_output.re,power_quad_acc_output.im
Assigns: 

Has unassed use power_quad_acc_n
Looking at GIR GIR: Define power_quad_acc_n
Uses: 
Defs: power_quad_acc_n
Assigns: 

Looking at GIR GIR: power_quad_acc_n = setup.N
Uses: setup.N
Defs: 
Assigns: power_quad_acc_n

Has undefed ass power_quad_acc_n
Looking at GIR GIR: Define power_quad_acc_input
Uses: power_quad_acc_n
Defs: power_quad_acc_input.re,power_quad_acc_input.im
Assigns: 

Has unassed use power_quad_acc_n
Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i317{
power_quad_acc_input[i317].im = setup.e[i317]}
Uses: power_quad_acc_n,setup.e
Defs: 
Assigns: power_quad_acc_input.im

Has unassed use power_quad_acc_n
Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i318{
power_quad_acc_input[i318].re = work[i318].f32_1}
Uses: power_quad_acc_n,work.f32_1
Defs: 
Assigns: power_quad_acc_input.re

Has unassed use power_quad_acc_n
Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i319{
output[i319].f32_1 = power_quad_acc_output[i319].re}
Uses: power_quad_acc_n,power_quad_acc_output.re
Defs: 
Assigns: output.f32_1

Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i320{
output[i320].f32_2 = power_quad_acc_output[i320].im}
Uses: power_quad_acc_n,power_quad_acc_output.im
Defs: 
Assigns: output.f32_2

Looking at GIR GIR: free power_quad_acc_input
Uses: 
Defs: 
Assigns: 

Looking at GIR GIR: free power_quad_acc_output
Uses: 
Defs: 
Assigns: 

Looking at GIR GIR: free power_quad_acc_n
Uses: 
Defs: 
Assigns: 

Looking at GIR GIR: Define power_quad_acc_output
Uses: power_quad_acc_n
Defs: power_quad_acc_output.re,power_quad_acc_output.im
Assigns: 

Has unassed use power_quad_acc_n
Looking at GIR GIR: Define power_quad_acc_n
Uses: 
Defs: power_quad_acc_n
Assigns: 

Looking at GIR GIR: power_quad_acc_n = setup.N
Uses: setup.N
Defs: 
Assigns: power_quad_acc_n

Has undefed ass power_quad_acc_n
Looking at GIR GIR: Define power_quad_acc_input
Uses: power_quad_acc_n
Defs: power_quad_acc_input.re,power_quad_acc_input.im
Assigns: 

Has unassed use power_quad_acc_n
Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i322{
power_quad_acc_input[i322].im = setup.twiddle[i322]}
Uses: power_quad_acc_n,setup.twiddle
Defs: 
Assigns: power_quad_acc_input.im

Has unassed use power_quad_acc_n
Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i323{
power_quad_acc_input[i323].re = work[i323].f32_1}
Uses: power_quad_acc_n,work.f32_1
Defs: 
Assigns: power_quad_acc_input.re

Has unassed use power_quad_acc_n
Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i324{
output[i324].f32_1 = power_quad_acc_output[i324].im}
Uses: power_quad_acc_n,power_quad_acc_output.im
Defs: 
Assigns: output.f32_1

Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i325{
output[i325].f32_2 = power_quad_acc_output[i325].re}
Uses: power_quad_acc_n,power_quad_acc_output.re
Defs: 
Assigns: output.f32_2

Looking at GIR GIR: free power_quad_acc_input
Uses: 
Defs: 
Assigns: 

Looking at GIR GIR: free power_quad_acc_output
Uses: 
Defs: 
Assigns: 

Looking at GIR GIR: free power_quad_acc_n
Uses: 
Defs: 
Assigns: 

Looking at GIR GIR: Define power_quad_acc_output
Uses: power_quad_acc_n
Defs: power_quad_acc_output.re,power_quad_acc_output.im
Assigns: 

Has unassed use power_quad_acc_n
Looking at GIR GIR: Define power_quad_acc_n
Uses: 
Defs: power_quad_acc_n
Assigns: 

Looking at GIR GIR: power_quad_acc_n = setup.N
Uses: setup.N
Defs: 
Assigns: power_quad_acc_n

Has undefed ass power_quad_acc_n
Looking at GIR GIR: Define power_quad_acc_input
Uses: power_quad_acc_n
Defs: power_quad_acc_input.re,power_quad_acc_input.im
Assigns: 

Has unassed use power_quad_acc_n
Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i327{
power_quad_acc_input[i327].im = setup.twiddle[i327]}
Uses: power_quad_acc_n,setup.twiddle
Defs: 
Assigns: power_quad_acc_input.im

Has unassed use power_quad_acc_n
Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i328{
power_quad_acc_input[i328].re = work[i328].f32_1}
Uses: power_quad_acc_n,work.f32_1
Defs: 
Assigns: power_quad_acc_input.re

Has unassed use power_quad_acc_n
Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i329{
output[i329].f32_1 = power_quad_acc_output[i329].re}
Uses: power_quad_acc_n,power_quad_acc_output.re
Defs: 
Assigns: output.f32_1

Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i330{
output[i330].f32_2 = power_quad_acc_output[i330].im}
Uses: power_quad_acc_n,power_quad_acc_output.im
Defs: 
Assigns: output.f32_2

Looking at GIR GIR: free power_quad_acc_input
Uses: 
Defs: 
Assigns: 

Looking at GIR GIR: free power_quad_acc_output
Uses: 
Defs: 
Assigns: 

Looking at GIR GIR: free power_quad_acc_n
Uses: 
Defs: 
Assigns: 

Looking at GIR GIR: Define power_quad_acc_output
Uses: power_quad_acc_n
Defs: power_quad_acc_output.re,power_quad_acc_output.im
Assigns: 

Has unassed use power_quad_acc_n
Looking at GIR GIR: Define power_quad_acc_n
Uses: 
Defs: power_quad_acc_n
Assigns: 

Looking at GIR GIR: power_quad_acc_n = setup.N
Uses: setup.N
Defs: 
Assigns: power_quad_acc_n

Has undefed ass power_quad_acc_n
Looking at GIR GIR: Define power_quad_acc_input
Uses: power_quad_acc_n
Defs: power_quad_acc_input.re,power_quad_acc_input.im
Assigns: 

Has unassed use power_quad_acc_n
Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i332{
power_quad_acc_input[i332].im = input[i332].f32_1}
Uses: power_quad_acc_n,input.f32_1
Defs: 
Assigns: power_quad_acc_input.im

Has unassed use power_quad_acc_n
Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i333{
power_quad_acc_input[i333].re = work[i333].f32_1}
Uses: power_quad_acc_n,work.f32_1
Defs: 
Assigns: power_quad_acc_input.re

Has unassed use power_quad_acc_n
Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i334{
output[i334].f32_1 = power_quad_acc_output[i334].im}
Uses: power_quad_acc_n,power_quad_acc_output.im
Defs: 
Assigns: output.f32_1

Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i335{
output[i335].f32_2 = power_quad_acc_output[i335].re}
Uses: power_quad_acc_n,power_quad_acc_output.re
Defs: 
Assigns: output.f32_2

Looking at GIR GIR: free power_quad_acc_input
Uses: 
Defs: 
Assigns: 

Looking at GIR GIR: free power_quad_acc_output
Uses: 
Defs: 
Assigns: 

Looking at GIR GIR: free power_quad_acc_n
Uses: 
Defs: 
Assigns: 

Looking at GIR GIR: Define power_quad_acc_output
Uses: power_quad_acc_n
Defs: power_quad_acc_output.re,power_quad_acc_output.im
Assigns: 

Has unassed use power_quad_acc_n
Looking at GIR GIR: Define power_quad_acc_n
Uses: 
Defs: power_quad_acc_n
Assigns: 

Looking at GIR GIR: power_quad_acc_n = setup.N
Uses: setup.N
Defs: 
Assigns: power_quad_acc_n

Has undefed ass power_quad_acc_n
Looking at GIR GIR: Define power_quad_acc_input
Uses: power_quad_acc_n
Defs: power_quad_acc_input.re,power_quad_acc_input.im
Assigns: 

Has unassed use power_quad_acc_n
Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i337{
power_quad_acc_input[i337].im = input[i337].f32_1}
Uses: power_quad_acc_n,input.f32_1
Defs: 
Assigns: power_quad_acc_input.im

Has unassed use power_quad_acc_n
Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i338{
power_quad_acc_input[i338].re = work[i338].f32_1}
Uses: power_quad_acc_n,work.f32_1
Defs: 
Assigns: power_quad_acc_input.re

Has unassed use power_quad_acc_n
Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i339{
output[i339].f32_1 = power_quad_acc_output[i339].re}
Uses: power_quad_acc_n,power_quad_acc_output.re
Defs: 
Assigns: output.f32_1

Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i340{
output[i340].f32_2 = power_quad_acc_output[i340].im}
Uses: power_quad_acc_n,power_quad_acc_output.im
Defs: 
Assigns: output.f32_2

Looking at GIR GIR: free power_quad_acc_input
Uses: 
Defs: 
Assigns: 

Looking at GIR GIR: free power_quad_acc_output
Uses: 
Defs: 
Assigns: 

Looking at GIR GIR: free power_quad_acc_n
Uses: 
Defs: 
Assigns: 

Looking at GIR GIR: Define power_quad_acc_output
Uses: power_quad_acc_n
Defs: power_quad_acc_output.re,power_quad_acc_output.im
Assigns: 

Has unassed use power_quad_acc_n
Looking at GIR GIR: Define power_quad_acc_n
Uses: 
Defs: power_quad_acc_n
Assigns: 

Looking at GIR GIR: power_quad_acc_n = setup.N
Uses: setup.N
Defs: 
Assigns: power_quad_acc_n

Has undefed ass power_quad_acc_n
Looking at GIR GIR: Define power_quad_acc_input
Uses: power_quad_acc_n
Defs: power_quad_acc_input.re,power_quad_acc_input.im
Assigns: 

Has unassed use power_quad_acc_n
Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i342{
power_quad_acc_input[i342].im = input[i342].f32_2}
Uses: power_quad_acc_n,input.f32_2
Defs: 
Assigns: power_quad_acc_input.im

Has unassed use power_quad_acc_n
Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i343{
power_quad_acc_input[i343].re = work[i343].f32_1}
Uses: power_quad_acc_n,work.f32_1
Defs: 
Assigns: power_quad_acc_input.re

Has unassed use power_quad_acc_n
Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i344{
output[i344].f32_1 = power_quad_acc_output[i344].im}
Uses: power_quad_acc_n,power_quad_acc_output.im
Defs: 
Assigns: output.f32_1

Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i345{
output[i345].f32_2 = power_quad_acc_output[i345].re}
Uses: power_quad_acc_n,power_quad_acc_output.re
Defs: 
Assigns: output.f32_2

Looking at GIR GIR: free power_quad_acc_input
Uses: 
Defs: 
Assigns: 

Looking at GIR GIR: free power_quad_acc_output
Uses: 
Defs: 
Assigns: 

Looking at GIR GIR: free power_quad_acc_n
Uses: 
Defs: 
Assigns: 

Looking at GIR GIR: Define power_quad_acc_output
Uses: power_quad_acc_n
Defs: power_quad_acc_output.re,power_quad_acc_output.im
Assigns: 

Has unassed use power_quad_acc_n
Looking at GIR GIR: Define power_quad_acc_n
Uses: 
Defs: power_quad_acc_n
Assigns: 

Looking at GIR GIR: power_quad_acc_n = setup.N
Uses: setup.N
Defs: 
Assigns: power_quad_acc_n

Has undefed ass power_quad_acc_n
Looking at GIR GIR: Define power_quad_acc_input
Uses: power_quad_acc_n
Defs: power_quad_acc_input.re,power_quad_acc_input.im
Assigns: 

Has unassed use power_quad_acc_n
Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i347{
power_quad_acc_input[i347].im = input[i347].f32_2}
Uses: power_quad_acc_n,input.f32_2
Defs: 
Assigns: power_quad_acc_input.im

Has unassed use power_quad_acc_n
Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i348{
power_quad_acc_input[i348].re = work[i348].f32_1}
Uses: power_quad_acc_n,work.f32_1
Defs: 
Assigns: power_quad_acc_input.re

Has unassed use power_quad_acc_n
Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i349{
output[i349].f32_1 = power_quad_acc_output[i349].re}
Uses: power_quad_acc_n,power_quad_acc_output.re
Defs: 
Assigns: output.f32_1

Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i350{
output[i350].f32_2 = power_quad_acc_output[i350].im}
Uses: power_quad_acc_n,power_quad_acc_output.im
Defs: 
Assigns: output.f32_2

Looking at GIR GIR: free power_quad_acc_input
Uses: 
Defs: 
Assigns: 

Looking at GIR GIR: free power_quad_acc_output
Uses: 
Defs: 
Assigns: 

Looking at GIR GIR: free power_quad_acc_n
Uses: 
Defs: 
Assigns: 

Looking at GIR GIR: Define power_quad_acc_output
Uses: power_quad_acc_n
Defs: power_quad_acc_output.re,power_quad_acc_output.im
Assigns: 

Has unassed use power_quad_acc_n
Looking at GIR GIR: Define power_quad_acc_n
Uses: 
Defs: power_quad_acc_n
Assigns: 

Looking at GIR GIR: power_quad_acc_n = setup.N
Uses: setup.N
Defs: 
Assigns: power_quad_acc_n

Has undefed ass power_quad_acc_n
Looking at GIR GIR: Define power_quad_acc_input
Uses: power_quad_acc_n
Defs: power_quad_acc_input.re,power_quad_acc_input.im
Assigns: 

Has unassed use power_quad_acc_n
Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i352{
power_quad_acc_input[i352].im = work[i352].f32_2}
Uses: power_quad_acc_n,work.f32_2
Defs: 
Assigns: power_quad_acc_input.im

Has unassed use power_quad_acc_n
Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i353{
power_quad_acc_input[i353].re = work[i353].f32_1}
Uses: power_quad_acc_n,work.f32_1
Defs: 
Assigns: power_quad_acc_input.re

Has unassed use power_quad_acc_n
Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i354{
output[i354].f32_1 = power_quad_acc_output[i354].im}
Uses: power_quad_acc_n,power_quad_acc_output.im
Defs: 
Assigns: output.f32_1

Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i355{
output[i355].f32_2 = power_quad_acc_output[i355].re}
Uses: power_quad_acc_n,power_quad_acc_output.re
Defs: 
Assigns: output.f32_2

Looking at GIR GIR: free power_quad_acc_input
Uses: 
Defs: 
Assigns: 

Looking at GIR GIR: free power_quad_acc_output
Uses: 
Defs: 
Assigns: 

Looking at GIR GIR: free power_quad_acc_n
Uses: 
Defs: 
Assigns: 

Looking at GIR GIR: Define power_quad_acc_output
Uses: power_quad_acc_n
Defs: power_quad_acc_output.re,power_quad_acc_output.im
Assigns: 

Has unassed use power_quad_acc_n
Looking at GIR GIR: Define power_quad_acc_n
Uses: 
Defs: power_quad_acc_n
Assigns: 

Looking at GIR GIR: power_quad_acc_n = setup.N
Uses: setup.N
Defs: 
Assigns: power_quad_acc_n

Has undefed ass power_quad_acc_n
Looking at GIR GIR: Define power_quad_acc_input
Uses: power_quad_acc_n
Defs: power_quad_acc_input.re,power_quad_acc_input.im
Assigns: 

Has unassed use power_quad_acc_n
Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i357{
power_quad_acc_input[i357].im = work[i357].f32_2}
Uses: power_quad_acc_n,work.f32_2
Defs: 
Assigns: power_quad_acc_input.im

Has unassed use power_quad_acc_n
Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i358{
power_quad_acc_input[i358].re = work[i358].f32_1}
Uses: power_quad_acc_n,work.f32_1
Defs: 
Assigns: power_quad_acc_input.re

Has unassed use power_quad_acc_n
Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i359{
output[i359].f32_1 = power_quad_acc_output[i359].re}
Uses: power_quad_acc_n,power_quad_acc_output.re
Defs: 
Assigns: output.f32_1

Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i360{
output[i360].f32_2 = power_quad_acc_output[i360].im}
Uses: power_quad_acc_n,power_quad_acc_output.im
Defs: 
Assigns: output.f32_2

Looking at GIR GIR: free power_quad_acc_input
Uses: 
Defs: 
Assigns: 

Looking at GIR GIR: free power_quad_acc_output
Uses: 
Defs: 
Assigns: 

Looking at GIR GIR: free power_quad_acc_n
Uses: 
Defs: 
Assigns: 

Looking at GIR GIR: Define power_quad_acc_output
Uses: power_quad_acc_n
Defs: power_quad_acc_output.re,power_quad_acc_output.im
Assigns: 

Has unassed use power_quad_acc_n
Looking at GIR GIR: Define power_quad_acc_n
Uses: 
Defs: power_quad_acc_n
Assigns: 

Looking at GIR GIR: power_quad_acc_n = setup.N
Uses: setup.N
Defs: 
Assigns: power_quad_acc_n

Has undefed ass power_quad_acc_n
Looking at GIR GIR: Define power_quad_acc_input
Uses: power_quad_acc_n
Defs: power_quad_acc_input.re,power_quad_acc_input.im
Assigns: 

Has unassed use power_quad_acc_n
Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i362{
power_quad_acc_input[i362].im = setup.data[i362]}
Uses: power_quad_acc_n,setup.data
Defs: 
Assigns: power_quad_acc_input.im

Has unassed use power_quad_acc_n
Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i363{
power_quad_acc_input[i363].re = work[i363].f32_2}
Uses: power_quad_acc_n,work.f32_2
Defs: 
Assigns: power_quad_acc_input.re

Has unassed use power_quad_acc_n
Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i364{
output[i364].f32_1 = power_quad_acc_output[i364].im}
Uses: power_quad_acc_n,power_quad_acc_output.im
Defs: 
Assigns: output.f32_1

Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i365{
output[i365].f32_2 = power_quad_acc_output[i365].re}
Uses: power_quad_acc_n,power_quad_acc_output.re
Defs: 
Assigns: output.f32_2

Looking at GIR GIR: free power_quad_acc_input
Uses: 
Defs: 
Assigns: 

Looking at GIR GIR: free power_quad_acc_output
Uses: 
Defs: 
Assigns: 

Looking at GIR GIR: free power_quad_acc_n
Uses: 
Defs: 
Assigns: 

Looking at GIR GIR: Define power_quad_acc_output
Uses: power_quad_acc_n
Defs: power_quad_acc_output.re,power_quad_acc_output.im
Assigns: 

Has unassed use power_quad_acc_n
Looking at GIR GIR: Define power_quad_acc_n
Uses: 
Defs: power_quad_acc_n
Assigns: 

Looking at GIR GIR: power_quad_acc_n = setup.N
Uses: setup.N
Defs: 
Assigns: power_quad_acc_n

Has undefed ass power_quad_acc_n
Looking at GIR GIR: Define power_quad_acc_input
Uses: power_quad_acc_n
Defs: power_quad_acc_input.re,power_quad_acc_input.im
Assigns: 

Has unassed use power_quad_acc_n
Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i367{
power_quad_acc_input[i367].im = setup.data[i367]}
Uses: power_quad_acc_n,setup.data
Defs: 
Assigns: power_quad_acc_input.im

Has unassed use power_quad_acc_n
Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i368{
power_quad_acc_input[i368].re = work[i368].f32_2}
Uses: power_quad_acc_n,work.f32_2
Defs: 
Assigns: power_quad_acc_input.re

Has unassed use power_quad_acc_n
Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i369{
output[i369].f32_1 = power_quad_acc_output[i369].re}
Uses: power_quad_acc_n,power_quad_acc_output.re
Defs: 
Assigns: output.f32_1

Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i370{
output[i370].f32_2 = power_quad_acc_output[i370].im}
Uses: power_quad_acc_n,power_quad_acc_output.im
Defs: 
Assigns: output.f32_2

Looking at GIR GIR: free power_quad_acc_input
Uses: 
Defs: 
Assigns: 

Looking at GIR GIR: free power_quad_acc_output
Uses: 
Defs: 
Assigns: 

Looking at GIR GIR: free power_quad_acc_n
Uses: 
Defs: 
Assigns: 

Looking at GIR GIR: Define power_quad_acc_output
Uses: power_quad_acc_n
Defs: power_quad_acc_output.re,power_quad_acc_output.im
Assigns: 

Has unassed use power_quad_acc_n
Looking at GIR GIR: Define power_quad_acc_n
Uses: 
Defs: power_quad_acc_n
Assigns: 

Looking at GIR GIR: power_quad_acc_n = setup.N
Uses: setup.N
Defs: 
Assigns: power_quad_acc_n

Has undefed ass power_quad_acc_n
Looking at GIR GIR: Define power_quad_acc_input
Uses: power_quad_acc_n
Defs: power_quad_acc_input.re,power_quad_acc_input.im
Assigns: 

Has unassed use power_quad_acc_n
Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i372{
power_quad_acc_input[i372].im = setup.e[i372]}
Uses: power_quad_acc_n,setup.e
Defs: 
Assigns: power_quad_acc_input.im

Has unassed use power_quad_acc_n
Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i373{
power_quad_acc_input[i373].re = work[i373].f32_2}
Uses: power_quad_acc_n,work.f32_2
Defs: 
Assigns: power_quad_acc_input.re

Has unassed use power_quad_acc_n
Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i374{
output[i374].f32_1 = power_quad_acc_output[i374].im}
Uses: power_quad_acc_n,power_quad_acc_output.im
Defs: 
Assigns: output.f32_1

Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i375{
output[i375].f32_2 = power_quad_acc_output[i375].re}
Uses: power_quad_acc_n,power_quad_acc_output.re
Defs: 
Assigns: output.f32_2

Looking at GIR GIR: free power_quad_acc_input
Uses: 
Defs: 
Assigns: 

Looking at GIR GIR: free power_quad_acc_output
Uses: 
Defs: 
Assigns: 

Looking at GIR GIR: free power_quad_acc_n
Uses: 
Defs: 
Assigns: 

Looking at GIR GIR: Define power_quad_acc_output
Uses: power_quad_acc_n
Defs: power_quad_acc_output.re,power_quad_acc_output.im
Assigns: 

Has unassed use power_quad_acc_n
Looking at GIR GIR: Define power_quad_acc_n
Uses: 
Defs: power_quad_acc_n
Assigns: 

Looking at GIR GIR: power_quad_acc_n = setup.N
Uses: setup.N
Defs: 
Assigns: power_quad_acc_n

Has undefed ass power_quad_acc_n
Looking at GIR GIR: Define power_quad_acc_input
Uses: power_quad_acc_n
Defs: power_quad_acc_input.re,power_quad_acc_input.im
Assigns: 

Has unassed use power_quad_acc_n
Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i377{
power_quad_acc_input[i377].im = setup.e[i377]}
Uses: power_quad_acc_n,setup.e
Defs: 
Assigns: power_quad_acc_input.im

Has unassed use power_quad_acc_n
Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i378{
power_quad_acc_input[i378].re = work[i378].f32_2}
Uses: power_quad_acc_n,work.f32_2
Defs: 
Assigns: power_quad_acc_input.re

Has unassed use power_quad_acc_n
Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i379{
output[i379].f32_1 = power_quad_acc_output[i379].re}
Uses: power_quad_acc_n,power_quad_acc_output.re
Defs: 
Assigns: output.f32_1

Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i380{
output[i380].f32_2 = power_quad_acc_output[i380].im}
Uses: power_quad_acc_n,power_quad_acc_output.im
Defs: 
Assigns: output.f32_2

Looking at GIR GIR: free power_quad_acc_input
Uses: 
Defs: 
Assigns: 

Looking at GIR GIR: free power_quad_acc_output
Uses: 
Defs: 
Assigns: 

Looking at GIR GIR: free power_quad_acc_n
Uses: 
Defs: 
Assigns: 

Looking at GIR GIR: Define power_quad_acc_output
Uses: power_quad_acc_n
Defs: power_quad_acc_output.re,power_quad_acc_output.im
Assigns: 

Has unassed use power_quad_acc_n
Looking at GIR GIR: Define power_quad_acc_n
Uses: 
Defs: power_quad_acc_n
Assigns: 

Looking at GIR GIR: power_quad_acc_n = setup.N
Uses: setup.N
Defs: 
Assigns: power_quad_acc_n

Has undefed ass power_quad_acc_n
Looking at GIR GIR: Define power_quad_acc_input
Uses: power_quad_acc_n
Defs: power_quad_acc_input.re,power_quad_acc_input.im
Assigns: 

Has unassed use power_quad_acc_n
Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i382{
power_quad_acc_input[i382].im = setup.twiddle[i382]}
Uses: power_quad_acc_n,setup.twiddle
Defs: 
Assigns: power_quad_acc_input.im

Has unassed use power_quad_acc_n
Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i383{
power_quad_acc_input[i383].re = work[i383].f32_2}
Uses: power_quad_acc_n,work.f32_2
Defs: 
Assigns: power_quad_acc_input.re

Has unassed use power_quad_acc_n
Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i384{
output[i384].f32_1 = power_quad_acc_output[i384].im}
Uses: power_quad_acc_n,power_quad_acc_output.im
Defs: 
Assigns: output.f32_1

Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i385{
output[i385].f32_2 = power_quad_acc_output[i385].re}
Uses: power_quad_acc_n,power_quad_acc_output.re
Defs: 
Assigns: output.f32_2

Looking at GIR GIR: free power_quad_acc_input
Uses: 
Defs: 
Assigns: 

Looking at GIR GIR: free power_quad_acc_output
Uses: 
Defs: 
Assigns: 

Looking at GIR GIR: free power_quad_acc_n
Uses: 
Defs: 
Assigns: 

Looking at GIR GIR: Define power_quad_acc_output
Uses: power_quad_acc_n
Defs: power_quad_acc_output.re,power_quad_acc_output.im
Assigns: 

Has unassed use power_quad_acc_n
Looking at GIR GIR: Define power_quad_acc_n
Uses: 
Defs: power_quad_acc_n
Assigns: 

Looking at GIR GIR: power_quad_acc_n = setup.N
Uses: setup.N
Defs: 
Assigns: power_quad_acc_n

Has undefed ass power_quad_acc_n
Looking at GIR GIR: Define power_quad_acc_input
Uses: power_quad_acc_n
Defs: power_quad_acc_input.re,power_quad_acc_input.im
Assigns: 

Has unassed use power_quad_acc_n
Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i387{
power_quad_acc_input[i387].im = setup.twiddle[i387]}
Uses: power_quad_acc_n,setup.twiddle
Defs: 
Assigns: power_quad_acc_input.im

Has unassed use power_quad_acc_n
Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i388{
power_quad_acc_input[i388].re = work[i388].f32_2}
Uses: power_quad_acc_n,work.f32_2
Defs: 
Assigns: power_quad_acc_input.re

Has unassed use power_quad_acc_n
Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i389{
output[i389].f32_1 = power_quad_acc_output[i389].re}
Uses: power_quad_acc_n,power_quad_acc_output.re
Defs: 
Assigns: output.f32_1

Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i390{
output[i390].f32_2 = power_quad_acc_output[i390].im}
Uses: power_quad_acc_n,power_quad_acc_output.im
Defs: 
Assigns: output.f32_2

Looking at GIR GIR: free power_quad_acc_input
Uses: 
Defs: 
Assigns: 

Looking at GIR GIR: free power_quad_acc_output
Uses: 
Defs: 
Assigns: 

Looking at GIR GIR: free power_quad_acc_n
Uses: 
Defs: 
Assigns: 

Looking at GIR GIR: Define power_quad_acc_output
Uses: power_quad_acc_n
Defs: power_quad_acc_output.re,power_quad_acc_output.im
Assigns: 

Has unassed use power_quad_acc_n
Looking at GIR GIR: Define power_quad_acc_n
Uses: 
Defs: power_quad_acc_n
Assigns: 

Looking at GIR GIR: power_quad_acc_n = setup.N
Uses: setup.N
Defs: 
Assigns: power_quad_acc_n

Has undefed ass power_quad_acc_n
Looking at GIR GIR: Define power_quad_acc_input
Uses: power_quad_acc_n
Defs: power_quad_acc_input.re,power_quad_acc_input.im
Assigns: 

Has unassed use power_quad_acc_n
Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i392{
power_quad_acc_input[i392].im = input[i392].f32_1}
Uses: power_quad_acc_n,input.f32_1
Defs: 
Assigns: power_quad_acc_input.im

Has unassed use power_quad_acc_n
Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i393{
power_quad_acc_input[i393].re = work[i393].f32_2}
Uses: power_quad_acc_n,work.f32_2
Defs: 
Assigns: power_quad_acc_input.re

Has unassed use power_quad_acc_n
Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i394{
output[i394].f32_1 = power_quad_acc_output[i394].im}
Uses: power_quad_acc_n,power_quad_acc_output.im
Defs: 
Assigns: output.f32_1

Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i395{
output[i395].f32_2 = power_quad_acc_output[i395].re}
Uses: power_quad_acc_n,power_quad_acc_output.re
Defs: 
Assigns: output.f32_2

Looking at GIR GIR: free power_quad_acc_input
Uses: 
Defs: 
Assigns: 

Looking at GIR GIR: free power_quad_acc_output
Uses: 
Defs: 
Assigns: 

Looking at GIR GIR: free power_quad_acc_n
Uses: 
Defs: 
Assigns: 

Looking at GIR GIR: Define power_quad_acc_output
Uses: power_quad_acc_n
Defs: power_quad_acc_output.re,power_quad_acc_output.im
Assigns: 

Has unassed use power_quad_acc_n
Looking at GIR GIR: Define power_quad_acc_n
Uses: 
Defs: power_quad_acc_n
Assigns: 

Looking at GIR GIR: power_quad_acc_n = setup.N
Uses: setup.N
Defs: 
Assigns: power_quad_acc_n

Has undefed ass power_quad_acc_n
Looking at GIR GIR: Define power_quad_acc_input
Uses: power_quad_acc_n
Defs: power_quad_acc_input.re,power_quad_acc_input.im
Assigns: 

Has unassed use power_quad_acc_n
Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i397{
power_quad_acc_input[i397].im = input[i397].f32_1}
Uses: power_quad_acc_n,input.f32_1
Defs: 
Assigns: power_quad_acc_input.im

Has unassed use power_quad_acc_n
Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i398{
power_quad_acc_input[i398].re = work[i398].f32_2}
Uses: power_quad_acc_n,work.f32_2
Defs: 
Assigns: power_quad_acc_input.re

Has unassed use power_quad_acc_n
Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i399{
output[i399].f32_1 = power_quad_acc_output[i399].re}
Uses: power_quad_acc_n,power_quad_acc_output.re
Defs: 
Assigns: output.f32_1

Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i400{
output[i400].f32_2 = power_quad_acc_output[i400].im}
Uses: power_quad_acc_n,power_quad_acc_output.im
Defs: 
Assigns: output.f32_2

Looking at GIR GIR: free power_quad_acc_input
Uses: 
Defs: 
Assigns: 

Looking at GIR GIR: free power_quad_acc_output
Uses: 
Defs: 
Assigns: 

Looking at GIR GIR: free power_quad_acc_n
Uses: 
Defs: 
Assigns: 

Looking at GIR GIR: Define power_quad_acc_output
Uses: power_quad_acc_n
Defs: power_quad_acc_output.re,power_quad_acc_output.im
Assigns: 

Has unassed use power_quad_acc_n
Looking at GIR GIR: Define power_quad_acc_n
Uses: 
Defs: power_quad_acc_n
Assigns: 

Looking at GIR GIR: power_quad_acc_n = setup.N
Uses: setup.N
Defs: 
Assigns: power_quad_acc_n

Has undefed ass power_quad_acc_n
Looking at GIR GIR: Define power_quad_acc_input
Uses: power_quad_acc_n
Defs: power_quad_acc_input.re,power_quad_acc_input.im
Assigns: 

Has unassed use power_quad_acc_n
Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i402{
power_quad_acc_input[i402].im = input[i402].f32_2}
Uses: power_quad_acc_n,input.f32_2
Defs: 
Assigns: power_quad_acc_input.im

Has unassed use power_quad_acc_n
Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i403{
power_quad_acc_input[i403].re = work[i403].f32_2}
Uses: power_quad_acc_n,work.f32_2
Defs: 
Assigns: power_quad_acc_input.re

Has unassed use power_quad_acc_n
Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i404{
output[i404].f32_1 = power_quad_acc_output[i404].im}
Uses: power_quad_acc_n,power_quad_acc_output.im
Defs: 
Assigns: output.f32_1

Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i405{
output[i405].f32_2 = power_quad_acc_output[i405].re}
Uses: power_quad_acc_n,power_quad_acc_output.re
Defs: 
Assigns: output.f32_2

Looking at GIR GIR: free power_quad_acc_input
Uses: 
Defs: 
Assigns: 

Looking at GIR GIR: free power_quad_acc_output
Uses: 
Defs: 
Assigns: 

Looking at GIR GIR: free power_quad_acc_n
Uses: 
Defs: 
Assigns: 

Looking at GIR GIR: Define power_quad_acc_output
Uses: power_quad_acc_n
Defs: power_quad_acc_output.re,power_quad_acc_output.im
Assigns: 

Has unassed use power_quad_acc_n
Looking at GIR GIR: Define power_quad_acc_n
Uses: 
Defs: power_quad_acc_n
Assigns: 

Looking at GIR GIR: power_quad_acc_n = setup.N
Uses: setup.N
Defs: 
Assigns: power_quad_acc_n

Has undefed ass power_quad_acc_n
Looking at GIR GIR: Define power_quad_acc_input
Uses: power_quad_acc_n
Defs: power_quad_acc_input.re,power_quad_acc_input.im
Assigns: 

Has unassed use power_quad_acc_n
Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i407{
power_quad_acc_input[i407].im = input[i407].f32_2}
Uses: power_quad_acc_n,input.f32_2
Defs: 
Assigns: power_quad_acc_input.im

Has unassed use power_quad_acc_n
Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i408{
power_quad_acc_input[i408].re = work[i408].f32_2}
Uses: power_quad_acc_n,work.f32_2
Defs: 
Assigns: power_quad_acc_input.re

Has unassed use power_quad_acc_n
Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i409{
output[i409].f32_1 = power_quad_acc_output[i409].re}
Uses: power_quad_acc_n,power_quad_acc_output.re
Defs: 
Assigns: output.f32_1

Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i410{
output[i410].f32_2 = power_quad_acc_output[i410].im}
Uses: power_quad_acc_n,power_quad_acc_output.im
Defs: 
Assigns: output.f32_2

Looking at GIR GIR: free power_quad_acc_input
Uses: 
Defs: 
Assigns: 

Looking at GIR GIR: free power_quad_acc_output
Uses: 
Defs: 
Assigns: 

Looking at GIR GIR: free power_quad_acc_n
Uses: 
Defs: 
Assigns: 

Looking at GIR GIR: Define power_quad_acc_output
Uses: power_quad_acc_n
Defs: power_quad_acc_output.re,power_quad_acc_output.im
Assigns: 

Has unassed use power_quad_acc_n
Looking at GIR GIR: Define power_quad_acc_n
Uses: 
Defs: power_quad_acc_n
Assigns: 

Looking at GIR GIR: power_quad_acc_n = setup.N
Uses: setup.N
Defs: 
Assigns: power_quad_acc_n

Has undefed ass power_quad_acc_n
Looking at GIR GIR: Define power_quad_acc_input
Uses: power_quad_acc_n
Defs: power_quad_acc_input.re,power_quad_acc_input.im
Assigns: 

Has unassed use power_quad_acc_n
Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i412{
power_quad_acc_input[i412].im = work[i412].f32_1}
Uses: power_quad_acc_n,work.f32_1
Defs: 
Assigns: power_quad_acc_input.im

Has unassed use power_quad_acc_n
Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i413{
power_quad_acc_input[i413].re = work[i413].f32_2}
Uses: power_quad_acc_n,work.f32_2
Defs: 
Assigns: power_quad_acc_input.re

Has unassed use power_quad_acc_n
Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i414{
output[i414].f32_1 = power_quad_acc_output[i414].im}
Uses: power_quad_acc_n,power_quad_acc_output.im
Defs: 
Assigns: output.f32_1

Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i415{
output[i415].f32_2 = power_quad_acc_output[i415].re}
Uses: power_quad_acc_n,power_quad_acc_output.re
Defs: 
Assigns: output.f32_2

Looking at GIR GIR: free power_quad_acc_input
Uses: 
Defs: 
Assigns: 

Looking at GIR GIR: free power_quad_acc_output
Uses: 
Defs: 
Assigns: 

Looking at GIR GIR: free power_quad_acc_n
Uses: 
Defs: 
Assigns: 

Looking at GIR GIR: Define power_quad_acc_output
Uses: power_quad_acc_n
Defs: power_quad_acc_output.re,power_quad_acc_output.im
Assigns: 

Has unassed use power_quad_acc_n
Looking at GIR GIR: Define power_quad_acc_n
Uses: 
Defs: power_quad_acc_n
Assigns: 

Looking at GIR GIR: power_quad_acc_n = setup.N
Uses: setup.N
Defs: 
Assigns: power_quad_acc_n

Has undefed ass power_quad_acc_n
Looking at GIR GIR: Define power_quad_acc_input
Uses: power_quad_acc_n
Defs: power_quad_acc_input.re,power_quad_acc_input.im
Assigns: 

Has unassed use power_quad_acc_n
Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i417{
power_quad_acc_input[i417].im = work[i417].f32_1}
Uses: power_quad_acc_n,work.f32_1
Defs: 
Assigns: power_quad_acc_input.im

Has unassed use power_quad_acc_n
Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i418{
power_quad_acc_input[i418].re = work[i418].f32_2}
Uses: power_quad_acc_n,work.f32_2
Defs: 
Assigns: power_quad_acc_input.re

Has unassed use power_quad_acc_n
Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i419{
output[i419].f32_1 = power_quad_acc_output[i419].re}
Uses: power_quad_acc_n,power_quad_acc_output.re
Defs: 
Assigns: output.f32_1

Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i420{
output[i420].f32_2 = power_quad_acc_output[i420].im}
Uses: power_quad_acc_n,power_quad_acc_output.im
Defs: 
Assigns: output.f32_2

Looking at GIR GIR: free power_quad_acc_input
Uses: 
Defs: 
Assigns: 

Looking at GIR GIR: free power_quad_acc_output
Uses: 
Defs: 
Assigns: 

Looking at GIR GIR: free power_quad_acc_n
Uses: 
Defs: 
Assigns: 

Looking at GIR GIR: Define power_quad_acc_output
Uses: power_quad_acc_n
Defs: power_quad_acc_output.re,power_quad_acc_output.im
Assigns: 

Has unassed use power_quad_acc_n
Looking at GIR GIR: Define power_quad_acc_n
Uses: 
Defs: power_quad_acc_n
Assigns: 

Looking at GIR GIR: power_quad_acc_n = DivideByX_conversion1(setup.N)
Uses: setup.N
Defs: 
Assigns: power_quad_acc_n

Has undefed ass power_quad_acc_n
Looking at GIR GIR: Define power_quad_acc_input
Uses: power_quad_acc_n
Defs: power_quad_acc_input.re,power_quad_acc_input.im
Assigns: 

Has unassed use power_quad_acc_n
Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i422{
power_quad_acc_input[i422].im = input[i422].f32_2}
Uses: power_quad_acc_n,input.f32_2
Defs: 
Assigns: power_quad_acc_input.im

Has unassed use power_quad_acc_n
Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i423{
power_quad_acc_input[i423].re = input[i423].f32_1}
Uses: power_quad_acc_n,input.f32_1
Defs: 
Assigns: power_quad_acc_input.re

Has unassed use power_quad_acc_n
Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i424{
output[i424].f32_1 = power_quad_acc_output[i424].im}
Uses: power_quad_acc_n,power_quad_acc_output.im
Defs: 
Assigns: output.f32_1

Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i425{
output[i425].f32_2 = power_quad_acc_output[i425].re}
Uses: power_quad_acc_n,power_quad_acc_output.re
Defs: 
Assigns: output.f32_2

Looking at GIR GIR: free power_quad_acc_input
Uses: 
Defs: 
Assigns: 

Looking at GIR GIR: free power_quad_acc_output
Uses: 
Defs: 
Assigns: 

Looking at GIR GIR: free power_quad_acc_n
Uses: 
Defs: 
Assigns: 

Looking at GIR GIR: Define power_quad_acc_output
Uses: power_quad_acc_n
Defs: power_quad_acc_output.re,power_quad_acc_output.im
Assigns: 

Has unassed use power_quad_acc_n
Looking at GIR GIR: Define power_quad_acc_n
Uses: 
Defs: power_quad_acc_n
Assigns: 

Looking at GIR GIR: power_quad_acc_n = DivideByX_conversion2(setup.N)
Uses: setup.N
Defs: 
Assigns: power_quad_acc_n

Has undefed ass power_quad_acc_n
Looking at GIR GIR: Define power_quad_acc_input
Uses: power_quad_acc_n
Defs: power_quad_acc_input.re,power_quad_acc_input.im
Assigns: 

Has unassed use power_quad_acc_n
Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i427{
power_quad_acc_input[i427].im = input[i427].f32_2}
Uses: power_quad_acc_n,input.f32_2
Defs: 
Assigns: power_quad_acc_input.im

Has unassed use power_quad_acc_n
Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i428{
power_quad_acc_input[i428].re = input[i428].f32_1}
Uses: power_quad_acc_n,input.f32_1
Defs: 
Assigns: power_quad_acc_input.re

Has unassed use power_quad_acc_n
Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i429{
output[i429].f32_1 = power_quad_acc_output[i429].re}
Uses: power_quad_acc_n,power_quad_acc_output.re
Defs: 
Assigns: output.f32_1

Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i430{
output[i430].f32_2 = power_quad_acc_output[i430].im}
Uses: power_quad_acc_n,power_quad_acc_output.im
Defs: 
Assigns: output.f32_2

Looking at GIR GIR: free power_quad_acc_input
Uses: 
Defs: 
Assigns: 

Looking at GIR GIR: free power_quad_acc_output
Uses: 
Defs: 
Assigns: 

Looking at GIR GIR: free power_quad_acc_n
Uses: 
Defs: 
Assigns: 

Looking at GIR GIR: Define power_quad_acc_output
Uses: power_quad_acc_n
Defs: power_quad_acc_output.re,power_quad_acc_output.im
Assigns: 

Has unassed use power_quad_acc_n
Looking at GIR GIR: Define power_quad_acc_n
Uses: 
Defs: power_quad_acc_n
Assigns: 

Looking at GIR GIR: power_quad_acc_n = DivideByX_conversion3(setup.N)
Uses: setup.N
Defs: 
Assigns: power_quad_acc_n

Has undefed ass power_quad_acc_n
Looking at GIR GIR: Define power_quad_acc_input
Uses: power_quad_acc_n
Defs: power_quad_acc_input.re,power_quad_acc_input.im
Assigns: 

Has unassed use power_quad_acc_n
Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i432{
power_quad_acc_input[i432].im = input[i432].f32_1}
Uses: power_quad_acc_n,input.f32_1
Defs: 
Assigns: power_quad_acc_input.im

Has unassed use power_quad_acc_n
Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i433{
power_quad_acc_input[i433].re = input[i433].f32_2}
Uses: power_quad_acc_n,input.f32_2
Defs: 
Assigns: power_quad_acc_input.re

Has unassed use power_quad_acc_n
Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i434{
output[i434].f32_1 = power_quad_acc_output[i434].im}
Uses: power_quad_acc_n,power_quad_acc_output.im
Defs: 
Assigns: output.f32_1

Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i435{
output[i435].f32_2 = power_quad_acc_output[i435].re}
Uses: power_quad_acc_n,power_quad_acc_output.re
Defs: 
Assigns: output.f32_2

Looking at GIR GIR: free power_quad_acc_input
Uses: 
Defs: 
Assigns: 

Looking at GIR GIR: free power_quad_acc_output
Uses: 
Defs: 
Assigns: 

Looking at GIR GIR: free power_quad_acc_n
Uses: 
Defs: 
Assigns: 

Looking at GIR GIR: Define power_quad_acc_output
Uses: power_quad_acc_n
Defs: power_quad_acc_output.re,power_quad_acc_output.im
Assigns: 

Has unassed use power_quad_acc_n
Looking at GIR GIR: Define power_quad_acc_n
Uses: 
Defs: power_quad_acc_n
Assigns: 

Looking at GIR GIR: power_quad_acc_n = DivideByX_conversion4(setup.N)
Uses: setup.N
Defs: 
Assigns: power_quad_acc_n

Has undefed ass power_quad_acc_n
Looking at GIR GIR: Define power_quad_acc_input
Uses: power_quad_acc_n
Defs: power_quad_acc_input.re,power_quad_acc_input.im
Assigns: 

Has unassed use power_quad_acc_n
Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i437{
power_quad_acc_input[i437].im = input[i437].f32_1}
Uses: power_quad_acc_n,input.f32_1
Defs: 
Assigns: power_quad_acc_input.im

Has unassed use power_quad_acc_n
Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i438{
power_quad_acc_input[i438].re = input[i438].f32_2}
Uses: power_quad_acc_n,input.f32_2
Defs: 
Assigns: power_quad_acc_input.re

Has unassed use power_quad_acc_n
Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i439{
output[i439].f32_1 = power_quad_acc_output[i439].re}
Uses: power_quad_acc_n,power_quad_acc_output.re
Defs: 
Assigns: output.f32_1

Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i440{
output[i440].f32_2 = power_quad_acc_output[i440].im}
Uses: power_quad_acc_n,power_quad_acc_output.im
Defs: 
Assigns: output.f32_2

Looking at GIR GIR: free power_quad_acc_input
Uses: 
Defs: 
Assigns: 

Looking at GIR GIR: free power_quad_acc_output
Uses: 
Defs: 
Assigns: 

Looking at GIR GIR: free power_quad_acc_n
Uses: 
Defs: 
Assigns: 

Looking at GIR GIR: Define power_quad_acc_output
Uses: power_quad_acc_n
Defs: power_quad_acc_output.re,power_quad_acc_output.im
Assigns: 

Has unassed use power_quad_acc_n
Looking at GIR GIR: Define power_quad_acc_n
Uses: 
Defs: power_quad_acc_n
Assigns: 

Looking at GIR GIR: power_quad_acc_n = setup.N
Uses: setup.N
Defs: 
Assigns: power_quad_acc_n

Has undefed ass power_quad_acc_n
Looking at GIR GIR: Define power_quad_acc_input
Uses: power_quad_acc_n
Defs: power_quad_acc_input.re,power_quad_acc_input.im
Assigns: 

Has unassed use power_quad_acc_n
Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i442{
power_quad_acc_input[i442].im = setup.e[i442]}
Uses: power_quad_acc_n,setup.e
Defs: 
Assigns: power_quad_acc_input.im

Has unassed use power_quad_acc_n
Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i443{
power_quad_acc_input[i443].re = setup.data[i443]}
Uses: power_quad_acc_n,setup.data
Defs: 
Assigns: power_quad_acc_input.re

Has unassed use power_quad_acc_n
Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i444{
output[i444] = power_quad_acc_output[i444].re}
Uses: power_quad_acc_n,power_quad_acc_output.re
Defs: 
Assigns: output

Looking at GIR GIR: free power_quad_acc_input
Uses: 
Defs: 
Assigns: 

Looking at GIR GIR: free power_quad_acc_output
Uses: 
Defs: 
Assigns: 

Looking at GIR GIR: free power_quad_acc_n
Uses: 
Defs: 
Assigns: 

Looking at GIR GIR: Define power_quad_acc_output
Uses: power_quad_acc_n
Defs: power_quad_acc_output.re,power_quad_acc_output.im
Assigns: 

Has unassed use power_quad_acc_n
Looking at GIR GIR: Define power_quad_acc_n
Uses: 
Defs: power_quad_acc_n
Assigns: 

Looking at GIR GIR: power_quad_acc_n = setup.N
Uses: setup.N
Defs: 
Assigns: power_quad_acc_n

Has undefed ass power_quad_acc_n
Looking at GIR GIR: Define power_quad_acc_input
Uses: power_quad_acc_n
Defs: power_quad_acc_input.re,power_quad_acc_input.im
Assigns: 

Has unassed use power_quad_acc_n
Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i446{
power_quad_acc_input[i446].im = setup.e[i446]}
Uses: power_quad_acc_n,setup.e
Defs: 
Assigns: power_quad_acc_input.im

Has unassed use power_quad_acc_n
Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i447{
power_quad_acc_input[i447].re = setup.data[i447]}
Uses: power_quad_acc_n,setup.data
Defs: 
Assigns: power_quad_acc_input.re

Has unassed use power_quad_acc_n
Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i448{
output[i448] = power_quad_acc_output[i448].im}
Uses: power_quad_acc_n,power_quad_acc_output.im
Defs: 
Assigns: output

Looking at GIR GIR: free power_quad_acc_input
Uses: 
Defs: 
Assigns: 

Looking at GIR GIR: free power_quad_acc_output
Uses: 
Defs: 
Assigns: 

Looking at GIR GIR: free power_quad_acc_n
Uses: 
Defs: 
Assigns: 

Looking at GIR GIR: Define power_quad_acc_output
Uses: power_quad_acc_n
Defs: power_quad_acc_output.re,power_quad_acc_output.im
Assigns: 

Has unassed use power_quad_acc_n
Looking at GIR GIR: Define power_quad_acc_n
Uses: 
Defs: power_quad_acc_n
Assigns: 

Looking at GIR GIR: power_quad_acc_n = setup.N
Uses: setup.N
Defs: 
Assigns: power_quad_acc_n

Has undefed ass power_quad_acc_n
Looking at GIR GIR: Define power_quad_acc_input
Uses: power_quad_acc_n
Defs: power_quad_acc_input.re,power_quad_acc_input.im
Assigns: 

Has unassed use power_quad_acc_n
Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i450{
power_quad_acc_input[i450].im = setup.twiddle[i450]}
Uses: power_quad_acc_n,setup.twiddle
Defs: 
Assigns: power_quad_acc_input.im

Has unassed use power_quad_acc_n
Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i451{
power_quad_acc_input[i451].re = setup.data[i451]}
Uses: power_quad_acc_n,setup.data
Defs: 
Assigns: power_quad_acc_input.re

Has unassed use power_quad_acc_n
Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i452{
output[i452] = power_quad_acc_output[i452].re}
Uses: power_quad_acc_n,power_quad_acc_output.re
Defs: 
Assigns: output

Looking at GIR GIR: free power_quad_acc_input
Uses: 
Defs: 
Assigns: 

Looking at GIR GIR: free power_quad_acc_output
Uses: 
Defs: 
Assigns: 

Looking at GIR GIR: free power_quad_acc_n
Uses: 
Defs: 
Assigns: 

Looking at GIR GIR: Define power_quad_acc_output
Uses: power_quad_acc_n
Defs: power_quad_acc_output.re,power_quad_acc_output.im
Assigns: 

Has unassed use power_quad_acc_n
Looking at GIR GIR: Define power_quad_acc_n
Uses: 
Defs: power_quad_acc_n
Assigns: 

Looking at GIR GIR: power_quad_acc_n = setup.N
Uses: setup.N
Defs: 
Assigns: power_quad_acc_n

Has undefed ass power_quad_acc_n
Looking at GIR GIR: Define power_quad_acc_input
Uses: power_quad_acc_n
Defs: power_quad_acc_input.re,power_quad_acc_input.im
Assigns: 

Has unassed use power_quad_acc_n
Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i454{
power_quad_acc_input[i454].im = setup.twiddle[i454]}
Uses: power_quad_acc_n,setup.twiddle
Defs: 
Assigns: power_quad_acc_input.im

Has unassed use power_quad_acc_n
Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i455{
power_quad_acc_input[i455].re = setup.data[i455]}
Uses: power_quad_acc_n,setup.data
Defs: 
Assigns: power_quad_acc_input.re

Has unassed use power_quad_acc_n
Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i456{
output[i456] = power_quad_acc_output[i456].im}
Uses: power_quad_acc_n,power_quad_acc_output.im
Defs: 
Assigns: output

Looking at GIR GIR: free power_quad_acc_input
Uses: 
Defs: 
Assigns: 

Looking at GIR GIR: free power_quad_acc_output
Uses: 
Defs: 
Assigns: 

Looking at GIR GIR: free power_quad_acc_n
Uses: 
Defs: 
Assigns: 

Looking at GIR GIR: Define power_quad_acc_output
Uses: power_quad_acc_n
Defs: power_quad_acc_output.re,power_quad_acc_output.im
Assigns: 

Has unassed use power_quad_acc_n
Looking at GIR GIR: Define power_quad_acc_n
Uses: 
Defs: power_quad_acc_n
Assigns: 

Looking at GIR GIR: power_quad_acc_n = setup.N
Uses: setup.N
Defs: 
Assigns: power_quad_acc_n

Has undefed ass power_quad_acc_n
Looking at GIR GIR: Define power_quad_acc_input
Uses: power_quad_acc_n
Defs: power_quad_acc_input.re,power_quad_acc_input.im
Assigns: 

Has unassed use power_quad_acc_n
Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i458{
power_quad_acc_input[i458].im = input[i458]}
Uses: power_quad_acc_n,input
Defs: 
Assigns: power_quad_acc_input.im

Has unassed use power_quad_acc_n
Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i459{
power_quad_acc_input[i459].re = setup.data[i459]}
Uses: power_quad_acc_n,setup.data
Defs: 
Assigns: power_quad_acc_input.re

Has unassed use power_quad_acc_n
Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i460{
output[i460] = power_quad_acc_output[i460].re}
Uses: power_quad_acc_n,power_quad_acc_output.re
Defs: 
Assigns: output

Looking at GIR GIR: free power_quad_acc_input
Uses: 
Defs: 
Assigns: 

Looking at GIR GIR: free power_quad_acc_output
Uses: 
Defs: 
Assigns: 

Looking at GIR GIR: free power_quad_acc_n
Uses: 
Defs: 
Assigns: 

Looking at GIR GIR: Define power_quad_acc_output
Uses: power_quad_acc_n
Defs: power_quad_acc_output.re,power_quad_acc_output.im
Assigns: 

Has unassed use power_quad_acc_n
Looking at GIR GIR: Define power_quad_acc_n
Uses: 
Defs: power_quad_acc_n
Assigns: 

Looking at GIR GIR: power_quad_acc_n = setup.N
Uses: setup.N
Defs: 
Assigns: power_quad_acc_n

Has undefed ass power_quad_acc_n
Looking at GIR GIR: Define power_quad_acc_input
Uses: power_quad_acc_n
Defs: power_quad_acc_input.re,power_quad_acc_input.im
Assigns: 

Has unassed use power_quad_acc_n
Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i462{
power_quad_acc_input[i462].im = input[i462]}
Uses: power_quad_acc_n,input
Defs: 
Assigns: power_quad_acc_input.im

Has unassed use power_quad_acc_n
Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i463{
power_quad_acc_input[i463].re = setup.data[i463]}
Uses: power_quad_acc_n,setup.data
Defs: 
Assigns: power_quad_acc_input.re

Has unassed use power_quad_acc_n
Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i464{
output[i464] = power_quad_acc_output[i464].im}
Uses: power_quad_acc_n,power_quad_acc_output.im
Defs: 
Assigns: output

Looking at GIR GIR: free power_quad_acc_input
Uses: 
Defs: 
Assigns: 

Looking at GIR GIR: free power_quad_acc_output
Uses: 
Defs: 
Assigns: 

Looking at GIR GIR: free power_quad_acc_n
Uses: 
Defs: 
Assigns: 

Looking at GIR GIR: Define power_quad_acc_output
Uses: power_quad_acc_n
Defs: power_quad_acc_output.re,power_quad_acc_output.im
Assigns: 

Has unassed use power_quad_acc_n
Looking at GIR GIR: Define power_quad_acc_n
Uses: 
Defs: power_quad_acc_n
Assigns: 

Looking at GIR GIR: power_quad_acc_n = setup.N
Uses: setup.N
Defs: 
Assigns: power_quad_acc_n

Has undefed ass power_quad_acc_n
Looking at GIR GIR: Define power_quad_acc_input
Uses: power_quad_acc_n
Defs: power_quad_acc_input.re,power_quad_acc_input.im
Assigns: 

Has unassed use power_quad_acc_n
Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i466{
power_quad_acc_input[i466].im = work[i466]}
Uses: power_quad_acc_n,work
Defs: 
Assigns: power_quad_acc_input.im

Has unassed use power_quad_acc_n
Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i467{
power_quad_acc_input[i467].re = setup.data[i467]}
Uses: power_quad_acc_n,setup.data
Defs: 
Assigns: power_quad_acc_input.re

Has unassed use power_quad_acc_n
Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i468{
output[i468] = power_quad_acc_output[i468].re}
Uses: power_quad_acc_n,power_quad_acc_output.re
Defs: 
Assigns: output

Looking at GIR GIR: free power_quad_acc_input
Uses: 
Defs: 
Assigns: 

Looking at GIR GIR: free power_quad_acc_output
Uses: 
Defs: 
Assigns: 

Looking at GIR GIR: free power_quad_acc_n
Uses: 
Defs: 
Assigns: 

Looking at GIR GIR: Define power_quad_acc_output
Uses: power_quad_acc_n
Defs: power_quad_acc_output.re,power_quad_acc_output.im
Assigns: 

Has unassed use power_quad_acc_n
Looking at GIR GIR: Define power_quad_acc_n
Uses: 
Defs: power_quad_acc_n
Assigns: 

Looking at GIR GIR: power_quad_acc_n = setup.N
Uses: setup.N
Defs: 
Assigns: power_quad_acc_n

Has undefed ass power_quad_acc_n
Looking at GIR GIR: Define power_quad_acc_input
Uses: power_quad_acc_n
Defs: power_quad_acc_input.re,power_quad_acc_input.im
Assigns: 

Has unassed use power_quad_acc_n
Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i470{
power_quad_acc_input[i470].im = work[i470]}
Uses: power_quad_acc_n,work
Defs: 
Assigns: power_quad_acc_input.im

Has unassed use power_quad_acc_n
Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i471{
power_quad_acc_input[i471].re = setup.data[i471]}
Uses: power_quad_acc_n,setup.data
Defs: 
Assigns: power_quad_acc_input.re

Has unassed use power_quad_acc_n
Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i472{
output[i472] = power_quad_acc_output[i472].im}
Uses: power_quad_acc_n,power_quad_acc_output.im
Defs: 
Assigns: output

Looking at GIR GIR: free power_quad_acc_input
Uses: 
Defs: 
Assigns: 

Looking at GIR GIR: free power_quad_acc_output
Uses: 
Defs: 
Assigns: 

Looking at GIR GIR: free power_quad_acc_n
Uses: 
Defs: 
Assigns: 

Looking at GIR GIR: Define power_quad_acc_output
Uses: power_quad_acc_n
Defs: power_quad_acc_output.re,power_quad_acc_output.im
Assigns: 

Has unassed use power_quad_acc_n
Looking at GIR GIR: Define power_quad_acc_n
Uses: 
Defs: power_quad_acc_n
Assigns: 

Looking at GIR GIR: power_quad_acc_n = setup.N
Uses: setup.N
Defs: 
Assigns: power_quad_acc_n

Has undefed ass power_quad_acc_n
Looking at GIR GIR: Define power_quad_acc_input
Uses: power_quad_acc_n
Defs: power_quad_acc_input.re,power_quad_acc_input.im
Assigns: 

Has unassed use power_quad_acc_n
Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i474{
power_quad_acc_input[i474].im = setup.data[i474]}
Uses: power_quad_acc_n,setup.data
Defs: 
Assigns: power_quad_acc_input.im

Has unassed use power_quad_acc_n
Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i475{
power_quad_acc_input[i475].re = setup.e[i475]}
Uses: power_quad_acc_n,setup.e
Defs: 
Assigns: power_quad_acc_input.re

Has unassed use power_quad_acc_n
Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i476{
output[i476] = power_quad_acc_output[i476].re}
Uses: power_quad_acc_n,power_quad_acc_output.re
Defs: 
Assigns: output

Looking at GIR GIR: free power_quad_acc_input
Uses: 
Defs: 
Assigns: 

Looking at GIR GIR: free power_quad_acc_output
Uses: 
Defs: 
Assigns: 

Looking at GIR GIR: free power_quad_acc_n
Uses: 
Defs: 
Assigns: 

Looking at GIR GIR: Define power_quad_acc_output
Uses: power_quad_acc_n
Defs: power_quad_acc_output.re,power_quad_acc_output.im
Assigns: 

Has unassed use power_quad_acc_n
Looking at GIR GIR: Define power_quad_acc_n
Uses: 
Defs: power_quad_acc_n
Assigns: 

Looking at GIR GIR: power_quad_acc_n = setup.N
Uses: setup.N
Defs: 
Assigns: power_quad_acc_n

Has undefed ass power_quad_acc_n
Looking at GIR GIR: Define power_quad_acc_input
Uses: power_quad_acc_n
Defs: power_quad_acc_input.re,power_quad_acc_input.im
Assigns: 

Has unassed use power_quad_acc_n
Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i478{
power_quad_acc_input[i478].im = setup.data[i478]}
Uses: power_quad_acc_n,setup.data
Defs: 
Assigns: power_quad_acc_input.im

Has unassed use power_quad_acc_n
Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i479{
power_quad_acc_input[i479].re = setup.e[i479]}
Uses: power_quad_acc_n,setup.e
Defs: 
Assigns: power_quad_acc_input.re

Has unassed use power_quad_acc_n
Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i480{
output[i480] = power_quad_acc_output[i480].im}
Uses: power_quad_acc_n,power_quad_acc_output.im
Defs: 
Assigns: output

Looking at GIR GIR: free power_quad_acc_input
Uses: 
Defs: 
Assigns: 

Looking at GIR GIR: free power_quad_acc_output
Uses: 
Defs: 
Assigns: 

Looking at GIR GIR: free power_quad_acc_n
Uses: 
Defs: 
Assigns: 

Looking at GIR GIR: Define power_quad_acc_output
Uses: power_quad_acc_n
Defs: power_quad_acc_output.re,power_quad_acc_output.im
Assigns: 

Has unassed use power_quad_acc_n
Looking at GIR GIR: Define power_quad_acc_n
Uses: 
Defs: power_quad_acc_n
Assigns: 

Looking at GIR GIR: power_quad_acc_n = setup.N
Uses: setup.N
Defs: 
Assigns: power_quad_acc_n

Has undefed ass power_quad_acc_n
Looking at GIR GIR: Define power_quad_acc_input
Uses: power_quad_acc_n
Defs: power_quad_acc_input.re,power_quad_acc_input.im
Assigns: 

Has unassed use power_quad_acc_n
Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i482{
power_quad_acc_input[i482].im = setup.twiddle[i482]}
Uses: power_quad_acc_n,setup.twiddle
Defs: 
Assigns: power_quad_acc_input.im

Has unassed use power_quad_acc_n
Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i483{
power_quad_acc_input[i483].re = setup.e[i483]}
Uses: power_quad_acc_n,setup.e
Defs: 
Assigns: power_quad_acc_input.re

Has unassed use power_quad_acc_n
Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i484{
output[i484] = power_quad_acc_output[i484].re}
Uses: power_quad_acc_n,power_quad_acc_output.re
Defs: 
Assigns: output

Looking at GIR GIR: free power_quad_acc_input
Uses: 
Defs: 
Assigns: 

Looking at GIR GIR: free power_quad_acc_output
Uses: 
Defs: 
Assigns: 

Looking at GIR GIR: free power_quad_acc_n
Uses: 
Defs: 
Assigns: 

Looking at GIR GIR: Define power_quad_acc_output
Uses: power_quad_acc_n
Defs: power_quad_acc_output.re,power_quad_acc_output.im
Assigns: 

Has unassed use power_quad_acc_n
Looking at GIR GIR: Define power_quad_acc_n
Uses: 
Defs: power_quad_acc_n
Assigns: 

Looking at GIR GIR: power_quad_acc_n = setup.N
Uses: setup.N
Defs: 
Assigns: power_quad_acc_n

Has undefed ass power_quad_acc_n
Looking at GIR GIR: Define power_quad_acc_input
Uses: power_quad_acc_n
Defs: power_quad_acc_input.re,power_quad_acc_input.im
Assigns: 

Has unassed use power_quad_acc_n
Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i486{
power_quad_acc_input[i486].im = setup.twiddle[i486]}
Uses: power_quad_acc_n,setup.twiddle
Defs: 
Assigns: power_quad_acc_input.im

Has unassed use power_quad_acc_n
Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i487{
power_quad_acc_input[i487].re = setup.e[i487]}
Uses: power_quad_acc_n,setup.e
Defs: 
Assigns: power_quad_acc_input.re

Has unassed use power_quad_acc_n
Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i488{
output[i488] = power_quad_acc_output[i488].im}
Uses: power_quad_acc_n,power_quad_acc_output.im
Defs: 
Assigns: output

Looking at GIR GIR: free power_quad_acc_input
Uses: 
Defs: 
Assigns: 

Looking at GIR GIR: free power_quad_acc_output
Uses: 
Defs: 
Assigns: 

Looking at GIR GIR: free power_quad_acc_n
Uses: 
Defs: 
Assigns: 

Looking at GIR GIR: Define power_quad_acc_output
Uses: power_quad_acc_n
Defs: power_quad_acc_output.re,power_quad_acc_output.im
Assigns: 

Has unassed use power_quad_acc_n
Looking at GIR GIR: Define power_quad_acc_n
Uses: 
Defs: power_quad_acc_n
Assigns: 

Looking at GIR GIR: power_quad_acc_n = setup.N
Uses: setup.N
Defs: 
Assigns: power_quad_acc_n

Has undefed ass power_quad_acc_n
Looking at GIR GIR: Define power_quad_acc_input
Uses: power_quad_acc_n
Defs: power_quad_acc_input.re,power_quad_acc_input.im
Assigns: 

Has unassed use power_quad_acc_n
Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i490{
power_quad_acc_input[i490].im = input[i490]}
Uses: power_quad_acc_n,input
Defs: 
Assigns: power_quad_acc_input.im

Has unassed use power_quad_acc_n
Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i491{
power_quad_acc_input[i491].re = setup.e[i491]}
Uses: power_quad_acc_n,setup.e
Defs: 
Assigns: power_quad_acc_input.re

Has unassed use power_quad_acc_n
Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i492{
output[i492] = power_quad_acc_output[i492].re}
Uses: power_quad_acc_n,power_quad_acc_output.re
Defs: 
Assigns: output

Looking at GIR GIR: free power_quad_acc_input
Uses: 
Defs: 
Assigns: 

Looking at GIR GIR: free power_quad_acc_output
Uses: 
Defs: 
Assigns: 

Looking at GIR GIR: free power_quad_acc_n
Uses: 
Defs: 
Assigns: 

Looking at GIR GIR: Define power_quad_acc_output
Uses: power_quad_acc_n
Defs: power_quad_acc_output.re,power_quad_acc_output.im
Assigns: 

Has unassed use power_quad_acc_n
Looking at GIR GIR: Define power_quad_acc_n
Uses: 
Defs: power_quad_acc_n
Assigns: 

Looking at GIR GIR: power_quad_acc_n = setup.N
Uses: setup.N
Defs: 
Assigns: power_quad_acc_n

Has undefed ass power_quad_acc_n
Looking at GIR GIR: Define power_quad_acc_input
Uses: power_quad_acc_n
Defs: power_quad_acc_input.re,power_quad_acc_input.im
Assigns: 

Has unassed use power_quad_acc_n
Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i494{
power_quad_acc_input[i494].im = input[i494]}
Uses: power_quad_acc_n,input
Defs: 
Assigns: power_quad_acc_input.im

Has unassed use power_quad_acc_n
Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i495{
power_quad_acc_input[i495].re = setup.e[i495]}
Uses: power_quad_acc_n,setup.e
Defs: 
Assigns: power_quad_acc_input.re

Has unassed use power_quad_acc_n
Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i496{
output[i496] = power_quad_acc_output[i496].im}
Uses: power_quad_acc_n,power_quad_acc_output.im
Defs: 
Assigns: output

Looking at GIR GIR: free power_quad_acc_input
Uses: 
Defs: 
Assigns: 

Looking at GIR GIR: free power_quad_acc_output
Uses: 
Defs: 
Assigns: 

Looking at GIR GIR: free power_quad_acc_n
Uses: 
Defs: 
Assigns: 

Looking at GIR GIR: Define power_quad_acc_output
Uses: power_quad_acc_n
Defs: power_quad_acc_output.re,power_quad_acc_output.im
Assigns: 

Has unassed use power_quad_acc_n
Looking at GIR GIR: Define power_quad_acc_n
Uses: 
Defs: power_quad_acc_n
Assigns: 

Looking at GIR GIR: power_quad_acc_n = setup.N
Uses: setup.N
Defs: 
Assigns: power_quad_acc_n

Has undefed ass power_quad_acc_n
Looking at GIR GIR: Define power_quad_acc_input
Uses: power_quad_acc_n
Defs: power_quad_acc_input.re,power_quad_acc_input.im
Assigns: 

Has unassed use power_quad_acc_n
Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i498{
power_quad_acc_input[i498].im = work[i498]}
Uses: power_quad_acc_n,work
Defs: 
Assigns: power_quad_acc_input.im

Has unassed use power_quad_acc_n
Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i499{
power_quad_acc_input[i499].re = setup.e[i499]}
Uses: power_quad_acc_n,setup.e
Defs: 
Assigns: power_quad_acc_input.re

Has unassed use power_quad_acc_n
Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i500{
output[i500] = power_quad_acc_output[i500].re}
Uses: power_quad_acc_n,power_quad_acc_output.re
Defs: 
Assigns: output

Looking at GIR GIR: free power_quad_acc_input
Uses: 
Defs: 
Assigns: 

Looking at GIR GIR: free power_quad_acc_output
Uses: 
Defs: 
Assigns: 

Looking at GIR GIR: free power_quad_acc_n
Uses: 
Defs: 
Assigns: 

Looking at GIR GIR: Define power_quad_acc_output
Uses: power_quad_acc_n
Defs: power_quad_acc_output.re,power_quad_acc_output.im
Assigns: 

Has unassed use power_quad_acc_n
Looking at GIR GIR: Define power_quad_acc_n
Uses: 
Defs: power_quad_acc_n
Assigns: 

Looking at GIR GIR: power_quad_acc_n = setup.N
Uses: setup.N
Defs: 
Assigns: power_quad_acc_n

Has undefed ass power_quad_acc_n
Looking at GIR GIR: Define power_quad_acc_input
Uses: power_quad_acc_n
Defs: power_quad_acc_input.re,power_quad_acc_input.im
Assigns: 

Has unassed use power_quad_acc_n
Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i502{
power_quad_acc_input[i502].im = work[i502]}
Uses: power_quad_acc_n,work
Defs: 
Assigns: power_quad_acc_input.im

Has unassed use power_quad_acc_n
Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i503{
power_quad_acc_input[i503].re = setup.e[i503]}
Uses: power_quad_acc_n,setup.e
Defs: 
Assigns: power_quad_acc_input.re

Has unassed use power_quad_acc_n
Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i504{
output[i504] = power_quad_acc_output[i504].im}
Uses: power_quad_acc_n,power_quad_acc_output.im
Defs: 
Assigns: output

Looking at GIR GIR: free power_quad_acc_input
Uses: 
Defs: 
Assigns: 

Looking at GIR GIR: free power_quad_acc_output
Uses: 
Defs: 
Assigns: 

Looking at GIR GIR: free power_quad_acc_n
Uses: 
Defs: 
Assigns: 

Looking at GIR GIR: Define power_quad_acc_output
Uses: power_quad_acc_n
Defs: power_quad_acc_output.re,power_quad_acc_output.im
Assigns: 

Has unassed use power_quad_acc_n
Looking at GIR GIR: Define power_quad_acc_n
Uses: 
Defs: power_quad_acc_n
Assigns: 

Looking at GIR GIR: power_quad_acc_n = setup.N
Uses: setup.N
Defs: 
Assigns: power_quad_acc_n

Has undefed ass power_quad_acc_n
Looking at GIR GIR: Define power_quad_acc_input
Uses: power_quad_acc_n
Defs: power_quad_acc_input.re,power_quad_acc_input.im
Assigns: 

Has unassed use power_quad_acc_n
Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i506{
power_quad_acc_input[i506].im = setup.data[i506]}
Uses: power_quad_acc_n,setup.data
Defs: 
Assigns: power_quad_acc_input.im

Has unassed use power_quad_acc_n
Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i507{
power_quad_acc_input[i507].re = setup.twiddle[i507]}
Uses: power_quad_acc_n,setup.twiddle
Defs: 
Assigns: power_quad_acc_input.re

Has unassed use power_quad_acc_n
Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i508{
output[i508] = power_quad_acc_output[i508].re}
Uses: power_quad_acc_n,power_quad_acc_output.re
Defs: 
Assigns: output

Looking at GIR GIR: free power_quad_acc_input
Uses: 
Defs: 
Assigns: 

Looking at GIR GIR: free power_quad_acc_output
Uses: 
Defs: 
Assigns: 

Looking at GIR GIR: free power_quad_acc_n
Uses: 
Defs: 
Assigns: 

Looking at GIR GIR: Define power_quad_acc_output
Uses: power_quad_acc_n
Defs: power_quad_acc_output.re,power_quad_acc_output.im
Assigns: 

Has unassed use power_quad_acc_n
Looking at GIR GIR: Define power_quad_acc_n
Uses: 
Defs: power_quad_acc_n
Assigns: 

Looking at GIR GIR: power_quad_acc_n = setup.N
Uses: setup.N
Defs: 
Assigns: power_quad_acc_n

Has undefed ass power_quad_acc_n
Looking at GIR GIR: Define power_quad_acc_input
Uses: power_quad_acc_n
Defs: power_quad_acc_input.re,power_quad_acc_input.im
Assigns: 

Has unassed use power_quad_acc_n
Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i510{
power_quad_acc_input[i510].im = setup.data[i510]}
Uses: power_quad_acc_n,setup.data
Defs: 
Assigns: power_quad_acc_input.im

Has unassed use power_quad_acc_n
Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i511{
power_quad_acc_input[i511].re = setup.twiddle[i511]}
Uses: power_quad_acc_n,setup.twiddle
Defs: 
Assigns: power_quad_acc_input.re

Has unassed use power_quad_acc_n
Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i512{
output[i512] = power_quad_acc_output[i512].im}
Uses: power_quad_acc_n,power_quad_acc_output.im
Defs: 
Assigns: output

Looking at GIR GIR: free power_quad_acc_input
Uses: 
Defs: 
Assigns: 

Looking at GIR GIR: free power_quad_acc_output
Uses: 
Defs: 
Assigns: 

Looking at GIR GIR: free power_quad_acc_n
Uses: 
Defs: 
Assigns: 

Looking at GIR GIR: Define power_quad_acc_output
Uses: power_quad_acc_n
Defs: power_quad_acc_output.re,power_quad_acc_output.im
Assigns: 

Has unassed use power_quad_acc_n
Looking at GIR GIR: Define power_quad_acc_n
Uses: 
Defs: power_quad_acc_n
Assigns: 

Looking at GIR GIR: power_quad_acc_n = setup.N
Uses: setup.N
Defs: 
Assigns: power_quad_acc_n

Has undefed ass power_quad_acc_n
Looking at GIR GIR: Define power_quad_acc_input
Uses: power_quad_acc_n
Defs: power_quad_acc_input.re,power_quad_acc_input.im
Assigns: 

Has unassed use power_quad_acc_n
Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i514{
power_quad_acc_input[i514].im = setup.e[i514]}
Uses: power_quad_acc_n,setup.e
Defs: 
Assigns: power_quad_acc_input.im

Has unassed use power_quad_acc_n
Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i515{
power_quad_acc_input[i515].re = setup.twiddle[i515]}
Uses: power_quad_acc_n,setup.twiddle
Defs: 
Assigns: power_quad_acc_input.re

Has unassed use power_quad_acc_n
Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i516{
output[i516] = power_quad_acc_output[i516].re}
Uses: power_quad_acc_n,power_quad_acc_output.re
Defs: 
Assigns: output

Looking at GIR GIR: free power_quad_acc_input
Uses: 
Defs: 
Assigns: 

Looking at GIR GIR: free power_quad_acc_output
Uses: 
Defs: 
Assigns: 

Looking at GIR GIR: free power_quad_acc_n
Uses: 
Defs: 
Assigns: 

Looking at GIR GIR: Define power_quad_acc_output
Uses: power_quad_acc_n
Defs: power_quad_acc_output.re,power_quad_acc_output.im
Assigns: 

Has unassed use power_quad_acc_n
Looking at GIR GIR: Define power_quad_acc_n
Uses: 
Defs: power_quad_acc_n
Assigns: 

Looking at GIR GIR: power_quad_acc_n = setup.N
Uses: setup.N
Defs: 
Assigns: power_quad_acc_n

Has undefed ass power_quad_acc_n
Looking at GIR GIR: Define power_quad_acc_input
Uses: power_quad_acc_n
Defs: power_quad_acc_input.re,power_quad_acc_input.im
Assigns: 

Has unassed use power_quad_acc_n
Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i518{
power_quad_acc_input[i518].im = setup.e[i518]}
Uses: power_quad_acc_n,setup.e
Defs: 
Assigns: power_quad_acc_input.im

Has unassed use power_quad_acc_n
Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i519{
power_quad_acc_input[i519].re = setup.twiddle[i519]}
Uses: power_quad_acc_n,setup.twiddle
Defs: 
Assigns: power_quad_acc_input.re

Has unassed use power_quad_acc_n
Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i520{
output[i520] = power_quad_acc_output[i520].im}
Uses: power_quad_acc_n,power_quad_acc_output.im
Defs: 
Assigns: output

Looking at GIR GIR: free power_quad_acc_input
Uses: 
Defs: 
Assigns: 

Looking at GIR GIR: free power_quad_acc_output
Uses: 
Defs: 
Assigns: 

Looking at GIR GIR: free power_quad_acc_n
Uses: 
Defs: 
Assigns: 

Looking at GIR GIR: Define power_quad_acc_output
Uses: power_quad_acc_n
Defs: power_quad_acc_output.re,power_quad_acc_output.im
Assigns: 

Has unassed use power_quad_acc_n
Looking at GIR GIR: Define power_quad_acc_n
Uses: 
Defs: power_quad_acc_n
Assigns: 

Looking at GIR GIR: power_quad_acc_n = setup.N
Uses: setup.N
Defs: 
Assigns: power_quad_acc_n

Has undefed ass power_quad_acc_n
Looking at GIR GIR: Define power_quad_acc_input
Uses: power_quad_acc_n
Defs: power_quad_acc_input.re,power_quad_acc_input.im
Assigns: 

Has unassed use power_quad_acc_n
Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i522{
power_quad_acc_input[i522].im = input[i522]}
Uses: power_quad_acc_n,input
Defs: 
Assigns: power_quad_acc_input.im

Has unassed use power_quad_acc_n
Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i523{
power_quad_acc_input[i523].re = setup.twiddle[i523]}
Uses: power_quad_acc_n,setup.twiddle
Defs: 
Assigns: power_quad_acc_input.re

Has unassed use power_quad_acc_n
Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i524{
output[i524] = power_quad_acc_output[i524].re}
Uses: power_quad_acc_n,power_quad_acc_output.re
Defs: 
Assigns: output

Looking at GIR GIR: free power_quad_acc_input
Uses: 
Defs: 
Assigns: 

Looking at GIR GIR: free power_quad_acc_output
Uses: 
Defs: 
Assigns: 

Looking at GIR GIR: free power_quad_acc_n
Uses: 
Defs: 
Assigns: 

Looking at GIR GIR: Define power_quad_acc_output
Uses: power_quad_acc_n
Defs: power_quad_acc_output.re,power_quad_acc_output.im
Assigns: 

Has unassed use power_quad_acc_n
Looking at GIR GIR: Define power_quad_acc_n
Uses: 
Defs: power_quad_acc_n
Assigns: 

Looking at GIR GIR: power_quad_acc_n = setup.N
Uses: setup.N
Defs: 
Assigns: power_quad_acc_n

Has undefed ass power_quad_acc_n
Looking at GIR GIR: Define power_quad_acc_input
Uses: power_quad_acc_n
Defs: power_quad_acc_input.re,power_quad_acc_input.im
Assigns: 

Has unassed use power_quad_acc_n
Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i526{
power_quad_acc_input[i526].im = input[i526]}
Uses: power_quad_acc_n,input
Defs: 
Assigns: power_quad_acc_input.im

Has unassed use power_quad_acc_n
Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i527{
power_quad_acc_input[i527].re = setup.twiddle[i527]}
Uses: power_quad_acc_n,setup.twiddle
Defs: 
Assigns: power_quad_acc_input.re

Has unassed use power_quad_acc_n
Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i528{
output[i528] = power_quad_acc_output[i528].im}
Uses: power_quad_acc_n,power_quad_acc_output.im
Defs: 
Assigns: output

Looking at GIR GIR: free power_quad_acc_input
Uses: 
Defs: 
Assigns: 

Looking at GIR GIR: free power_quad_acc_output
Uses: 
Defs: 
Assigns: 

Looking at GIR GIR: free power_quad_acc_n
Uses: 
Defs: 
Assigns: 

Looking at GIR GIR: Define power_quad_acc_output
Uses: power_quad_acc_n
Defs: power_quad_acc_output.re,power_quad_acc_output.im
Assigns: 

Has unassed use power_quad_acc_n
Looking at GIR GIR: Define power_quad_acc_n
Uses: 
Defs: power_quad_acc_n
Assigns: 

Looking at GIR GIR: power_quad_acc_n = setup.N
Uses: setup.N
Defs: 
Assigns: power_quad_acc_n

Has undefed ass power_quad_acc_n
Looking at GIR GIR: Define power_quad_acc_input
Uses: power_quad_acc_n
Defs: power_quad_acc_input.re,power_quad_acc_input.im
Assigns: 

Has unassed use power_quad_acc_n
Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i530{
power_quad_acc_input[i530].im = work[i530]}
Uses: power_quad_acc_n,work
Defs: 
Assigns: power_quad_acc_input.im

Has unassed use power_quad_acc_n
Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i531{
power_quad_acc_input[i531].re = setup.twiddle[i531]}
Uses: power_quad_acc_n,setup.twiddle
Defs: 
Assigns: power_quad_acc_input.re

Has unassed use power_quad_acc_n
Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i532{
output[i532] = power_quad_acc_output[i532].re}
Uses: power_quad_acc_n,power_quad_acc_output.re
Defs: 
Assigns: output

Looking at GIR GIR: free power_quad_acc_input
Uses: 
Defs: 
Assigns: 

Looking at GIR GIR: free power_quad_acc_output
Uses: 
Defs: 
Assigns: 

Looking at GIR GIR: free power_quad_acc_n
Uses: 
Defs: 
Assigns: 

Looking at GIR GIR: Define power_quad_acc_output
Uses: power_quad_acc_n
Defs: power_quad_acc_output.re,power_quad_acc_output.im
Assigns: 

Has unassed use power_quad_acc_n
Looking at GIR GIR: Define power_quad_acc_n
Uses: 
Defs: power_quad_acc_n
Assigns: 

Looking at GIR GIR: power_quad_acc_n = setup.N
Uses: setup.N
Defs: 
Assigns: power_quad_acc_n

Has undefed ass power_quad_acc_n
Looking at GIR GIR: Define power_quad_acc_input
Uses: power_quad_acc_n
Defs: power_quad_acc_input.re,power_quad_acc_input.im
Assigns: 

Has unassed use power_quad_acc_n
Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i534{
power_quad_acc_input[i534].im = work[i534]}
Uses: power_quad_acc_n,work
Defs: 
Assigns: power_quad_acc_input.im

Has unassed use power_quad_acc_n
Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i535{
power_quad_acc_input[i535].re = setup.twiddle[i535]}
Uses: power_quad_acc_n,setup.twiddle
Defs: 
Assigns: power_quad_acc_input.re

Has unassed use power_quad_acc_n
Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i536{
output[i536] = power_quad_acc_output[i536].im}
Uses: power_quad_acc_n,power_quad_acc_output.im
Defs: 
Assigns: output

Looking at GIR GIR: free power_quad_acc_input
Uses: 
Defs: 
Assigns: 

Looking at GIR GIR: free power_quad_acc_output
Uses: 
Defs: 
Assigns: 

Looking at GIR GIR: free power_quad_acc_n
Uses: 
Defs: 
Assigns: 

Looking at GIR GIR: Define power_quad_acc_output
Uses: power_quad_acc_n
Defs: power_quad_acc_output.re,power_quad_acc_output.im
Assigns: 

Has unassed use power_quad_acc_n
Looking at GIR GIR: Define power_quad_acc_n
Uses: 
Defs: power_quad_acc_n
Assigns: 

Looking at GIR GIR: power_quad_acc_n = setup.N
Uses: setup.N
Defs: 
Assigns: power_quad_acc_n

Has undefed ass power_quad_acc_n
Looking at GIR GIR: Define power_quad_acc_input
Uses: power_quad_acc_n
Defs: power_quad_acc_input.re,power_quad_acc_input.im
Assigns: 

Has unassed use power_quad_acc_n
Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i538{
power_quad_acc_input[i538].im = setup.data[i538]}
Uses: power_quad_acc_n,setup.data
Defs: 
Assigns: power_quad_acc_input.im

Has unassed use power_quad_acc_n
Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i539{
power_quad_acc_input[i539].re = input[i539]}
Uses: power_quad_acc_n,input
Defs: 
Assigns: power_quad_acc_input.re

Has unassed use power_quad_acc_n
Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i540{
output[i540] = power_quad_acc_output[i540].re}
Uses: power_quad_acc_n,power_quad_acc_output.re
Defs: 
Assigns: output

Looking at GIR GIR: free power_quad_acc_input
Uses: 
Defs: 
Assigns: 

Looking at GIR GIR: free power_quad_acc_output
Uses: 
Defs: 
Assigns: 

Looking at GIR GIR: free power_quad_acc_n
Uses: 
Defs: 
Assigns: 

Looking at GIR GIR: Define power_quad_acc_output
Uses: power_quad_acc_n
Defs: power_quad_acc_output.re,power_quad_acc_output.im
Assigns: 

Has unassed use power_quad_acc_n
Looking at GIR GIR: Define power_quad_acc_n
Uses: 
Defs: power_quad_acc_n
Assigns: 

Looking at GIR GIR: power_quad_acc_n = setup.N
Uses: setup.N
Defs: 
Assigns: power_quad_acc_n

Has undefed ass power_quad_acc_n
Looking at GIR GIR: Define power_quad_acc_input
Uses: power_quad_acc_n
Defs: power_quad_acc_input.re,power_quad_acc_input.im
Assigns: 

Has unassed use power_quad_acc_n
Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i542{
power_quad_acc_input[i542].im = setup.data[i542]}
Uses: power_quad_acc_n,setup.data
Defs: 
Assigns: power_quad_acc_input.im

Has unassed use power_quad_acc_n
Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i543{
power_quad_acc_input[i543].re = input[i543]}
Uses: power_quad_acc_n,input
Defs: 
Assigns: power_quad_acc_input.re

Has unassed use power_quad_acc_n
Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i544{
output[i544] = power_quad_acc_output[i544].im}
Uses: power_quad_acc_n,power_quad_acc_output.im
Defs: 
Assigns: output

Looking at GIR GIR: free power_quad_acc_input
Uses: 
Defs: 
Assigns: 

Looking at GIR GIR: free power_quad_acc_output
Uses: 
Defs: 
Assigns: 

Looking at GIR GIR: free power_quad_acc_n
Uses: 
Defs: 
Assigns: 

Looking at GIR GIR: Define power_quad_acc_output
Uses: power_quad_acc_n
Defs: power_quad_acc_output.re,power_quad_acc_output.im
Assigns: 

Has unassed use power_quad_acc_n
Looking at GIR GIR: Define power_quad_acc_n
Uses: 
Defs: power_quad_acc_n
Assigns: 

Looking at GIR GIR: power_quad_acc_n = setup.N
Uses: setup.N
Defs: 
Assigns: power_quad_acc_n

Has undefed ass power_quad_acc_n
Looking at GIR GIR: Define power_quad_acc_input
Uses: power_quad_acc_n
Defs: power_quad_acc_input.re,power_quad_acc_input.im
Assigns: 

Has unassed use power_quad_acc_n
Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i546{
power_quad_acc_input[i546].im = setup.e[i546]}
Uses: power_quad_acc_n,setup.e
Defs: 
Assigns: power_quad_acc_input.im

Has unassed use power_quad_acc_n
Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i547{
power_quad_acc_input[i547].re = input[i547]}
Uses: power_quad_acc_n,input
Defs: 
Assigns: power_quad_acc_input.re

Has unassed use power_quad_acc_n
Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i548{
output[i548] = power_quad_acc_output[i548].re}
Uses: power_quad_acc_n,power_quad_acc_output.re
Defs: 
Assigns: output

Looking at GIR GIR: free power_quad_acc_input
Uses: 
Defs: 
Assigns: 

Looking at GIR GIR: free power_quad_acc_output
Uses: 
Defs: 
Assigns: 

Looking at GIR GIR: free power_quad_acc_n
Uses: 
Defs: 
Assigns: 

Looking at GIR GIR: Define power_quad_acc_output
Uses: power_quad_acc_n
Defs: power_quad_acc_output.re,power_quad_acc_output.im
Assigns: 

Has unassed use power_quad_acc_n
Looking at GIR GIR: Define power_quad_acc_n
Uses: 
Defs: power_quad_acc_n
Assigns: 

Looking at GIR GIR: power_quad_acc_n = setup.N
Uses: setup.N
Defs: 
Assigns: power_quad_acc_n

Has undefed ass power_quad_acc_n
Looking at GIR GIR: Define power_quad_acc_input
Uses: power_quad_acc_n
Defs: power_quad_acc_input.re,power_quad_acc_input.im
Assigns: 

Has unassed use power_quad_acc_n
Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i550{
power_quad_acc_input[i550].im = setup.e[i550]}
Uses: power_quad_acc_n,setup.e
Defs: 
Assigns: power_quad_acc_input.im

Has unassed use power_quad_acc_n
Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i551{
power_quad_acc_input[i551].re = input[i551]}
Uses: power_quad_acc_n,input
Defs: 
Assigns: power_quad_acc_input.re

Has unassed use power_quad_acc_n
Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i552{
output[i552] = power_quad_acc_output[i552].im}
Uses: power_quad_acc_n,power_quad_acc_output.im
Defs: 
Assigns: output

Looking at GIR GIR: free power_quad_acc_input
Uses: 
Defs: 
Assigns: 

Looking at GIR GIR: free power_quad_acc_output
Uses: 
Defs: 
Assigns: 

Looking at GIR GIR: free power_quad_acc_n
Uses: 
Defs: 
Assigns: 

Looking at GIR GIR: Define power_quad_acc_output
Uses: power_quad_acc_n
Defs: power_quad_acc_output.re,power_quad_acc_output.im
Assigns: 

Has unassed use power_quad_acc_n
Looking at GIR GIR: Define power_quad_acc_n
Uses: 
Defs: power_quad_acc_n
Assigns: 

Looking at GIR GIR: power_quad_acc_n = setup.N
Uses: setup.N
Defs: 
Assigns: power_quad_acc_n

Has undefed ass power_quad_acc_n
Looking at GIR GIR: Define power_quad_acc_input
Uses: power_quad_acc_n
Defs: power_quad_acc_input.re,power_quad_acc_input.im
Assigns: 

Has unassed use power_quad_acc_n
Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i554{
power_quad_acc_input[i554].im = setup.twiddle[i554]}
Uses: power_quad_acc_n,setup.twiddle
Defs: 
Assigns: power_quad_acc_input.im

Has unassed use power_quad_acc_n
Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i555{
power_quad_acc_input[i555].re = input[i555]}
Uses: power_quad_acc_n,input
Defs: 
Assigns: power_quad_acc_input.re

Has unassed use power_quad_acc_n
Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i556{
output[i556] = power_quad_acc_output[i556].re}
Uses: power_quad_acc_n,power_quad_acc_output.re
Defs: 
Assigns: output

Looking at GIR GIR: free power_quad_acc_input
Uses: 
Defs: 
Assigns: 

Looking at GIR GIR: free power_quad_acc_output
Uses: 
Defs: 
Assigns: 

Looking at GIR GIR: free power_quad_acc_n
Uses: 
Defs: 
Assigns: 

Looking at GIR GIR: Define power_quad_acc_output
Uses: power_quad_acc_n
Defs: power_quad_acc_output.re,power_quad_acc_output.im
Assigns: 

Has unassed use power_quad_acc_n
Looking at GIR GIR: Define power_quad_acc_n
Uses: 
Defs: power_quad_acc_n
Assigns: 

Looking at GIR GIR: power_quad_acc_n = setup.N
Uses: setup.N
Defs: 
Assigns: power_quad_acc_n

Has undefed ass power_quad_acc_n
Looking at GIR GIR: Define power_quad_acc_input
Uses: power_quad_acc_n
Defs: power_quad_acc_input.re,power_quad_acc_input.im
Assigns: 

Has unassed use power_quad_acc_n
Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i558{
power_quad_acc_input[i558].im = setup.twiddle[i558]}
Uses: power_quad_acc_n,setup.twiddle
Defs: 
Assigns: power_quad_acc_input.im

Has unassed use power_quad_acc_n
Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i559{
power_quad_acc_input[i559].re = input[i559]}
Uses: power_quad_acc_n,input
Defs: 
Assigns: power_quad_acc_input.re

Has unassed use power_quad_acc_n
Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i560{
output[i560] = power_quad_acc_output[i560].im}
Uses: power_quad_acc_n,power_quad_acc_output.im
Defs: 
Assigns: output

Looking at GIR GIR: free power_quad_acc_input
Uses: 
Defs: 
Assigns: 

Looking at GIR GIR: free power_quad_acc_output
Uses: 
Defs: 
Assigns: 

Looking at GIR GIR: free power_quad_acc_n
Uses: 
Defs: 
Assigns: 

Looking at GIR GIR: Define power_quad_acc_output
Uses: power_quad_acc_n
Defs: power_quad_acc_output.re,power_quad_acc_output.im
Assigns: 

Has unassed use power_quad_acc_n
Looking at GIR GIR: Define power_quad_acc_n
Uses: 
Defs: power_quad_acc_n
Assigns: 

Looking at GIR GIR: power_quad_acc_n = setup.N
Uses: setup.N
Defs: 
Assigns: power_quad_acc_n

Has undefed ass power_quad_acc_n
Looking at GIR GIR: Define power_quad_acc_input
Uses: power_quad_acc_n
Defs: power_quad_acc_input.re,power_quad_acc_input.im
Assigns: 

Has unassed use power_quad_acc_n
Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i562{
power_quad_acc_input[i562].im = work[i562]}
Uses: power_quad_acc_n,work
Defs: 
Assigns: power_quad_acc_input.im

Has unassed use power_quad_acc_n
Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i563{
power_quad_acc_input[i563].re = input[i563]}
Uses: power_quad_acc_n,input
Defs: 
Assigns: power_quad_acc_input.re

Has unassed use power_quad_acc_n
Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i564{
output[i564] = power_quad_acc_output[i564].re}
Uses: power_quad_acc_n,power_quad_acc_output.re
Defs: 
Assigns: output

Looking at GIR GIR: free power_quad_acc_input
Uses: 
Defs: 
Assigns: 

Looking at GIR GIR: free power_quad_acc_output
Uses: 
Defs: 
Assigns: 

Looking at GIR GIR: free power_quad_acc_n
Uses: 
Defs: 
Assigns: 

Looking at GIR GIR: Define power_quad_acc_output
Uses: power_quad_acc_n
Defs: power_quad_acc_output.re,power_quad_acc_output.im
Assigns: 

Has unassed use power_quad_acc_n
Looking at GIR GIR: Define power_quad_acc_n
Uses: 
Defs: power_quad_acc_n
Assigns: 

Looking at GIR GIR: power_quad_acc_n = setup.N
Uses: setup.N
Defs: 
Assigns: power_quad_acc_n

Has undefed ass power_quad_acc_n
Looking at GIR GIR: Define power_quad_acc_input
Uses: power_quad_acc_n
Defs: power_quad_acc_input.re,power_quad_acc_input.im
Assigns: 

Has unassed use power_quad_acc_n
Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i566{
power_quad_acc_input[i566].im = work[i566]}
Uses: power_quad_acc_n,work
Defs: 
Assigns: power_quad_acc_input.im

Has unassed use power_quad_acc_n
Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i567{
power_quad_acc_input[i567].re = input[i567]}
Uses: power_quad_acc_n,input
Defs: 
Assigns: power_quad_acc_input.re

Has unassed use power_quad_acc_n
Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i568{
output[i568] = power_quad_acc_output[i568].im}
Uses: power_quad_acc_n,power_quad_acc_output.im
Defs: 
Assigns: output

Looking at GIR GIR: free power_quad_acc_input
Uses: 
Defs: 
Assigns: 

Looking at GIR GIR: free power_quad_acc_output
Uses: 
Defs: 
Assigns: 

Looking at GIR GIR: free power_quad_acc_n
Uses: 
Defs: 
Assigns: 

Looking at GIR GIR: Define power_quad_acc_output
Uses: power_quad_acc_n
Defs: power_quad_acc_output.re,power_quad_acc_output.im
Assigns: 

Has unassed use power_quad_acc_n
Looking at GIR GIR: Define power_quad_acc_n
Uses: 
Defs: power_quad_acc_n
Assigns: 

Looking at GIR GIR: power_quad_acc_n = setup.N
Uses: setup.N
Defs: 
Assigns: power_quad_acc_n

Has undefed ass power_quad_acc_n
Looking at GIR GIR: Define power_quad_acc_input
Uses: power_quad_acc_n
Defs: power_quad_acc_input.re,power_quad_acc_input.im
Assigns: 

Has unassed use power_quad_acc_n
Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i570{
power_quad_acc_input[i570].im = setup.data[i570]}
Uses: power_quad_acc_n,setup.data
Defs: 
Assigns: power_quad_acc_input.im

Has unassed use power_quad_acc_n
Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i571{
power_quad_acc_input[i571].re = work[i571]}
Uses: power_quad_acc_n,work
Defs: 
Assigns: power_quad_acc_input.re

Has unassed use power_quad_acc_n
Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i572{
output[i572] = power_quad_acc_output[i572].re}
Uses: power_quad_acc_n,power_quad_acc_output.re
Defs: 
Assigns: output

Looking at GIR GIR: free power_quad_acc_input
Uses: 
Defs: 
Assigns: 

Looking at GIR GIR: free power_quad_acc_output
Uses: 
Defs: 
Assigns: 

Looking at GIR GIR: free power_quad_acc_n
Uses: 
Defs: 
Assigns: 

Looking at GIR GIR: Define power_quad_acc_output
Uses: power_quad_acc_n
Defs: power_quad_acc_output.re,power_quad_acc_output.im
Assigns: 

Has unassed use power_quad_acc_n
Looking at GIR GIR: Define power_quad_acc_n
Uses: 
Defs: power_quad_acc_n
Assigns: 

Looking at GIR GIR: power_quad_acc_n = setup.N
Uses: setup.N
Defs: 
Assigns: power_quad_acc_n

Has undefed ass power_quad_acc_n
Looking at GIR GIR: Define power_quad_acc_input
Uses: power_quad_acc_n
Defs: power_quad_acc_input.re,power_quad_acc_input.im
Assigns: 

Has unassed use power_quad_acc_n
Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i574{
power_quad_acc_input[i574].im = setup.data[i574]}
Uses: power_quad_acc_n,setup.data
Defs: 
Assigns: power_quad_acc_input.im

Has unassed use power_quad_acc_n
Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i575{
power_quad_acc_input[i575].re = work[i575]}
Uses: power_quad_acc_n,work
Defs: 
Assigns: power_quad_acc_input.re

Has unassed use power_quad_acc_n
Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i576{
output[i576] = power_quad_acc_output[i576].im}
Uses: power_quad_acc_n,power_quad_acc_output.im
Defs: 
Assigns: output

Looking at GIR GIR: free power_quad_acc_input
Uses: 
Defs: 
Assigns: 

Looking at GIR GIR: free power_quad_acc_output
Uses: 
Defs: 
Assigns: 

Looking at GIR GIR: free power_quad_acc_n
Uses: 
Defs: 
Assigns: 

Looking at GIR GIR: Define power_quad_acc_output
Uses: power_quad_acc_n
Defs: power_quad_acc_output.re,power_quad_acc_output.im
Assigns: 

Has unassed use power_quad_acc_n
Looking at GIR GIR: Define power_quad_acc_n
Uses: 
Defs: power_quad_acc_n
Assigns: 

Looking at GIR GIR: power_quad_acc_n = setup.N
Uses: setup.N
Defs: 
Assigns: power_quad_acc_n

Has undefed ass power_quad_acc_n
Looking at GIR GIR: Define power_quad_acc_input
Uses: power_quad_acc_n
Defs: power_quad_acc_input.re,power_quad_acc_input.im
Assigns: 

Has unassed use power_quad_acc_n
Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i578{
power_quad_acc_input[i578].im = setup.e[i578]}
Uses: power_quad_acc_n,setup.e
Defs: 
Assigns: power_quad_acc_input.im

Has unassed use power_quad_acc_n
Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i579{
power_quad_acc_input[i579].re = work[i579]}
Uses: power_quad_acc_n,work
Defs: 
Assigns: power_quad_acc_input.re

Has unassed use power_quad_acc_n
Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i580{
output[i580] = power_quad_acc_output[i580].re}
Uses: power_quad_acc_n,power_quad_acc_output.re
Defs: 
Assigns: output

Looking at GIR GIR: free power_quad_acc_input
Uses: 
Defs: 
Assigns: 

Looking at GIR GIR: free power_quad_acc_output
Uses: 
Defs: 
Assigns: 

Looking at GIR GIR: free power_quad_acc_n
Uses: 
Defs: 
Assigns: 

Looking at GIR GIR: Define power_quad_acc_output
Uses: power_quad_acc_n
Defs: power_quad_acc_output.re,power_quad_acc_output.im
Assigns: 

Has unassed use power_quad_acc_n
Looking at GIR GIR: Define power_quad_acc_n
Uses: 
Defs: power_quad_acc_n
Assigns: 

Looking at GIR GIR: power_quad_acc_n = setup.N
Uses: setup.N
Defs: 
Assigns: power_quad_acc_n

Has undefed ass power_quad_acc_n
Looking at GIR GIR: Define power_quad_acc_input
Uses: power_quad_acc_n
Defs: power_quad_acc_input.re,power_quad_acc_input.im
Assigns: 

Has unassed use power_quad_acc_n
Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i582{
power_quad_acc_input[i582].im = setup.e[i582]}
Uses: power_quad_acc_n,setup.e
Defs: 
Assigns: power_quad_acc_input.im

Has unassed use power_quad_acc_n
Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i583{
power_quad_acc_input[i583].re = work[i583]}
Uses: power_quad_acc_n,work
Defs: 
Assigns: power_quad_acc_input.re

Has unassed use power_quad_acc_n
Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i584{
output[i584] = power_quad_acc_output[i584].im}
Uses: power_quad_acc_n,power_quad_acc_output.im
Defs: 
Assigns: output

Looking at GIR GIR: free power_quad_acc_input
Uses: 
Defs: 
Assigns: 

Looking at GIR GIR: free power_quad_acc_output
Uses: 
Defs: 
Assigns: 

Looking at GIR GIR: free power_quad_acc_n
Uses: 
Defs: 
Assigns: 

Looking at GIR GIR: Define power_quad_acc_output
Uses: power_quad_acc_n
Defs: power_quad_acc_output.re,power_quad_acc_output.im
Assigns: 

Has unassed use power_quad_acc_n
Looking at GIR GIR: Define power_quad_acc_n
Uses: 
Defs: power_quad_acc_n
Assigns: 

Looking at GIR GIR: power_quad_acc_n = setup.N
Uses: setup.N
Defs: 
Assigns: power_quad_acc_n

Has undefed ass power_quad_acc_n
Looking at GIR GIR: Define power_quad_acc_input
Uses: power_quad_acc_n
Defs: power_quad_acc_input.re,power_quad_acc_input.im
Assigns: 

Has unassed use power_quad_acc_n
Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i586{
power_quad_acc_input[i586].im = setup.twiddle[i586]}
Uses: power_quad_acc_n,setup.twiddle
Defs: 
Assigns: power_quad_acc_input.im

Has unassed use power_quad_acc_n
Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i587{
power_quad_acc_input[i587].re = work[i587]}
Uses: power_quad_acc_n,work
Defs: 
Assigns: power_quad_acc_input.re

Has unassed use power_quad_acc_n
Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i588{
output[i588] = power_quad_acc_output[i588].re}
Uses: power_quad_acc_n,power_quad_acc_output.re
Defs: 
Assigns: output

Looking at GIR GIR: free power_quad_acc_input
Uses: 
Defs: 
Assigns: 

Looking at GIR GIR: free power_quad_acc_output
Uses: 
Defs: 
Assigns: 

Looking at GIR GIR: free power_quad_acc_n
Uses: 
Defs: 
Assigns: 

Looking at GIR GIR: Define power_quad_acc_output
Uses: power_quad_acc_n
Defs: power_quad_acc_output.re,power_quad_acc_output.im
Assigns: 

Has unassed use power_quad_acc_n
Looking at GIR GIR: Define power_quad_acc_n
Uses: 
Defs: power_quad_acc_n
Assigns: 

Looking at GIR GIR: power_quad_acc_n = setup.N
Uses: setup.N
Defs: 
Assigns: power_quad_acc_n

Has undefed ass power_quad_acc_n
Looking at GIR GIR: Define power_quad_acc_input
Uses: power_quad_acc_n
Defs: power_quad_acc_input.re,power_quad_acc_input.im
Assigns: 

Has unassed use power_quad_acc_n
Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i590{
power_quad_acc_input[i590].im = setup.twiddle[i590]}
Uses: power_quad_acc_n,setup.twiddle
Defs: 
Assigns: power_quad_acc_input.im

Has unassed use power_quad_acc_n
Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i591{
power_quad_acc_input[i591].re = work[i591]}
Uses: power_quad_acc_n,work
Defs: 
Assigns: power_quad_acc_input.re

Has unassed use power_quad_acc_n
Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i592{
output[i592] = power_quad_acc_output[i592].im}
Uses: power_quad_acc_n,power_quad_acc_output.im
Defs: 
Assigns: output

Looking at GIR GIR: free power_quad_acc_input
Uses: 
Defs: 
Assigns: 

Looking at GIR GIR: free power_quad_acc_output
Uses: 
Defs: 
Assigns: 

Looking at GIR GIR: free power_quad_acc_n
Uses: 
Defs: 
Assigns: 

Looking at GIR GIR: Define power_quad_acc_output
Uses: power_quad_acc_n
Defs: power_quad_acc_output.re,power_quad_acc_output.im
Assigns: 

Has unassed use power_quad_acc_n
Looking at GIR GIR: Define power_quad_acc_n
Uses: 
Defs: power_quad_acc_n
Assigns: 

Looking at GIR GIR: power_quad_acc_n = setup.N
Uses: setup.N
Defs: 
Assigns: power_quad_acc_n

Has undefed ass power_quad_acc_n
Looking at GIR GIR: Define power_quad_acc_input
Uses: power_quad_acc_n
Defs: power_quad_acc_input.re,power_quad_acc_input.im
Assigns: 

Has unassed use power_quad_acc_n
Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i594{
power_quad_acc_input[i594].im = input[i594]}
Uses: power_quad_acc_n,input
Defs: 
Assigns: power_quad_acc_input.im

Has unassed use power_quad_acc_n
Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i595{
power_quad_acc_input[i595].re = work[i595]}
Uses: power_quad_acc_n,work
Defs: 
Assigns: power_quad_acc_input.re

Has unassed use power_quad_acc_n
Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i596{
output[i596] = power_quad_acc_output[i596].re}
Uses: power_quad_acc_n,power_quad_acc_output.re
Defs: 
Assigns: output

Looking at GIR GIR: free power_quad_acc_input
Uses: 
Defs: 
Assigns: 

Looking at GIR GIR: free power_quad_acc_output
Uses: 
Defs: 
Assigns: 

Looking at GIR GIR: free power_quad_acc_n
Uses: 
Defs: 
Assigns: 

Looking at GIR GIR: Define power_quad_acc_output
Uses: power_quad_acc_n
Defs: power_quad_acc_output.re,power_quad_acc_output.im
Assigns: 

Has unassed use power_quad_acc_n
Looking at GIR GIR: Define power_quad_acc_n
Uses: 
Defs: power_quad_acc_n
Assigns: 

Looking at GIR GIR: power_quad_acc_n = setup.N
Uses: setup.N
Defs: 
Assigns: power_quad_acc_n

Has undefed ass power_quad_acc_n
Looking at GIR GIR: Define power_quad_acc_input
Uses: power_quad_acc_n
Defs: power_quad_acc_input.re,power_quad_acc_input.im
Assigns: 

Has unassed use power_quad_acc_n
Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i598{
power_quad_acc_input[i598].im = input[i598]}
Uses: power_quad_acc_n,input
Defs: 
Assigns: power_quad_acc_input.im

Has unassed use power_quad_acc_n
Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i599{
power_quad_acc_input[i599].re = work[i599]}
Uses: power_quad_acc_n,work
Defs: 
Assigns: power_quad_acc_input.re

Has unassed use power_quad_acc_n
Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i600{
output[i600] = power_quad_acc_output[i600].im}
Uses: power_quad_acc_n,power_quad_acc_output.im
Defs: 
Assigns: output

Looking at GIR GIR: free power_quad_acc_input
Uses: 
Defs: 
Assigns: 

Looking at GIR GIR: free power_quad_acc_output
Uses: 
Defs: 
Assigns: 

Looking at GIR GIR: free power_quad_acc_n
Uses: 
Defs: 
Assigns: 

Number of programs from these pairs is 128
Doing sub-struct assignment for member re
Doing sub-struct assignment for member im
Context is 
Dim length is power_quad_acc_n
Doing sub-struct assignment for member re
Doing sub-struct assignment for member im
Context is 
Dim length is power_quad_acc_n
Number of codes generated is 1
Number of codes built is 1
Generating tests for the 1 programs
Number of IO tests generated is 1
Time: 2.4e-05
AccTime: 0
Time: 0.010558
AccTime: 0.000686
Real responses generated
For executable synthethizer_temps/1_exec, passed cound is 0 of 1 tests (0 are vacuous: luck pass is false) 
Starting post synthesis (1 programs)
===============================================
Working tests are in the source files for executables 
There were 0 working in total
Required compiler flags to build are: libs/clib/fft_synth_lib.co libs/clib/synthesizer.co -Ilibs -fsanitize=address -lfftw3 -lfftw3f
Done!
WARNING: Set --only-test and --skip-build may lead to inconsistent results
(--only-test renumbers executables)
Loading specifications...
WARNING: Set --only-test and --skip-build may lead to inconsistent results
(--only-test renumbers executables)
Loading specifications...
Synthesizing...
Starting synthesis!
Generated the dimensions
Have 1 possible annotated typemaps
Looking at intput type array(_complex_double_: with dims n (=) ), with inpname invec
Looking at intput type _complex_double_, with inpname None
Looking at intput type float64, with inpname re
Generated result types SFloat(re)
Looking at intput type float64, with inpname im
Generated result types SFloat(im)
Generated result types STypes(SFloat(re), SFloat(im))
Generated result types SArray(invec: STypes(SFloat(re), SFloat(im)): with lenvar n (=) )
Looking at intput type uint32, with inpname n
Generated result types SInt(n)
Looking at intput type bool, with inpname forward
Generated result types SBool(forward)
Looking at intput type array(complex_type: with dims power_quad_acc_n (=) ), with inpname power_quad_acc_input
Looking at intput type complex_type, with inpname None
Looking at intput type float32, with inpname re
Generated result types SFloat(re)
Looking at intput type float32, with inpname im
Generated result types SFloat(im)
Generated result types STypes(SFloat(re), SFloat(im))
Generated result types SArray(power_quad_acc_input: STypes(SFloat(re), SFloat(im)): with lenvar power_quad_acc_n (=) )
Looking at intput type int32, with inpname power_quad_acc_n
Generated result types SInt(power_quad_acc_n)
Looking at intput type array(complex_type: with dims power_quad_acc_n (=) ), with inpname power_quad_acc_output
Looking at intput type complex_type, with inpname None
Looking at intput type float32, with inpname re
Generated result types SFloat(re)
Looking at intput type float32, with inpname im
Generated result types SFloat(im)
Generated result types STypes(SFloat(re), SFloat(im))
Generated result types SArray(power_quad_acc_output: STypes(SFloat(re), SFloat(im)): with lenvar power_quad_acc_n (=) )
Looking at intput type array(_complex_double_: with dims n (=) ), with inpname outvec
Looking at intput type _complex_double_, with inpname None
Looking at intput type float64, with inpname re
Generated result types SFloat(re)
Looking at intput type float64, with inpname im
Generated result types SFloat(im)
Generated result types STypes(SFloat(re), SFloat(im))
Generated result types SArray(outvec: STypes(SFloat(re), SFloat(im)): with lenvar n (=) )
Liveout types are SArray(outvec: STypes(SFloat(re), SFloat(im)): with lenvar n (=) )
Looking at intput type array(complex_type: with dims power_quad_acc_n (=) ), with inpname power_quad_acc_output
Looking at intput type complex_type, with inpname None
Looking at intput type float32, with inpname re
Generated result types SFloat(re)
Looking at intput type float32, with inpname im
Generated result types SFloat(im)
Generated result types STypes(SFloat(re), SFloat(im))
Generated result types SArray(power_quad_acc_output: STypes(SFloat(re), SFloat(im)): with lenvar power_quad_acc_n (=) )
Variable name is SArray(invec: STypes(SFloat(re), SFloat(im)): with lenvar n (=) ) (probability1.) 
Variable name is SInt(n) (probability1.) 
Variable name is SBool(forward) (probability1.) 
Got potential dimvars n (=) 
Variable name is SArray(power_quad_acc_output: STypes(SFloat(re), SFloat(im)): with lenvar power_quad_acc_n (=) ) (probability1.) 
Variable name is SArray(invec: STypes(SFloat(re), SFloat(im)): with lenvar n (=) ) (probability0.5) 
Variable name is SInt(n) (probability0.5) 
Variable name is SBool(forward) (probability0.5) 
Types are: 
(postbind: SArray(power_quad_acc_output: STypes(SFloat(re), SFloat(im)): with lenvar power_quad_acc_n (=) ) (probability1.) 
SArray(invec: STypes(SFloat(re), SFloat(im)): with lenvar n (=) ) (probability0.5) 
SInt(n) (probability0.5) 
SBool(forward) (probability0.5) )
(prebind: SArray(invec: STypes(SFloat(re), SFloat(im)): with lenvar n (=) ) (probability1.) 
SInt(n) (probability1.) 
SBool(forward) (probability1.) )
Keys in typemap are power_quad_acc_n, outvec, n, power_quad_acc_output, power_quad_acc_input, invec, forward
power_quad_acc_n, outvec, n, power_quad_acc_output, power_quad_acc_input, invec, forward
power_quad_acc_n, outvec, n, power_quad_acc_output, power_quad_acc_input, invec, forward
power_quad_acc_n, outvec, n, power_quad_acc_output, power_quad_acc_input, invec, forward
Keys in typemap are power_quad_acc_n, outvec, n, power_quad_acc_output, power_quad_acc_input, invec, forward
Looking at tovar outvec, im
Keys in typemap are power_quad_acc_n, outvec, n, power_quad_acc_output, power_quad_acc_input, invec, forward
Looking at tovar outvec, re
Keys in typemap are power_quad_acc_n, outvec, n, power_quad_acc_output, power_quad_acc_input, invec, forward
Looking at tovar power_quad_acc_output, Annon
Keys in typemap are power_quad_acc_n, outvec, n, power_quad_acc_output, power_quad_acc_input, invec, forward
Looking at tovar power_quad_acc_n
Keys in typemap are power_quad_acc_n, outvec, n, power_quad_acc_output, power_quad_acc_input, invec, forward
Looking at tovar power_quad_acc_input, im
Keys in typemap are power_quad_acc_n, outvec, n, power_quad_acc_output, power_quad_acc_input, invec, forward
Looking at tovar power_quad_acc_input, re
Keys in typemap are power_quad_acc_n, outvec, n, power_quad_acc_output, power_quad_acc_input, invec, forward
Looking at tovar outvec, im
Keys in typemap are power_quad_acc_n, outvec, n, power_quad_acc_output, power_quad_acc_input, invec, forward
Looking at tovar outvec, re
Keys in typemap are power_quad_acc_n, outvec, n, power_quad_acc_output, power_quad_acc_input, invec, forward
Looking at tovar power_quad_acc_output, Annon
Keys in typemap are power_quad_acc_n, outvec, n, power_quad_acc_output, power_quad_acc_input, invec, forward
Looking at tovar power_quad_acc_n
Keys in typemap are power_quad_acc_n, outvec, n, power_quad_acc_output, power_quad_acc_input, invec, forward
Looking at tovar power_quad_acc_input, im
Keys in typemap are power_quad_acc_n, outvec, n, power_quad_acc_output, power_quad_acc_input, invec, forward
Looking at tovar power_quad_acc_input, re
Keys in typemap are power_quad_acc_n, outvec, n, power_quad_acc_output, power_quad_acc_input, invec, forward
Looking at tovar outvec, im
Keys in typemap are power_quad_acc_n, outvec, n, power_quad_acc_output, power_quad_acc_input, invec, forward
Looking at tovar outvec, re
Keys in typemap are power_quad_acc_n, outvec, n, power_quad_acc_output, power_quad_acc_input, invec, forward
Looking at tovar power_quad_acc_output, Annon
Keys in typemap are power_quad_acc_n, outvec, n, power_quad_acc_output, power_quad_acc_input, invec, forward
Looking at tovar power_quad_acc_n
Keys in typemap are power_quad_acc_n, outvec, n, power_quad_acc_output, power_quad_acc_input, invec, forward
Looking at tovar power_quad_acc_input, im
Keys in typemap are power_quad_acc_n, outvec, n, power_quad_acc_output, power_quad_acc_input, invec, forward
Looking at tovar power_quad_acc_input, re
Keys in typemap are power_quad_acc_n, outvec, n, power_quad_acc_output, power_quad_acc_input, invec, forward
Looking at tovar outvec, im
Keys in typemap are power_quad_acc_n, outvec, n, power_quad_acc_output, power_quad_acc_input, invec, forward
Looking at tovar outvec, re
Keys in typemap are power_quad_acc_n, outvec, n, power_quad_acc_output, power_quad_acc_input, invec, forward
Looking at tovar power_quad_acc_output, Annon
Keys in typemap are power_quad_acc_n, outvec, n, power_quad_acc_output, power_quad_acc_input, invec, forward
Looking at tovar power_quad_acc_n
Keys in typemap are power_quad_acc_n, outvec, n, power_quad_acc_output, power_quad_acc_input, invec, forward
Looking at tovar power_quad_acc_input, im
Keys in typemap are power_quad_acc_n, outvec, n, power_quad_acc_output, power_quad_acc_input, invec, forward
Looking at tovar power_quad_acc_input, re
Number of skeletons generated is 4
Getting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeNumber of conversion pairs generated is 4
Looking at GIR GIR: Define power_quad_acc_output
Uses: power_quad_acc_n
Defs: power_quad_acc_output.re,power_quad_acc_output.im
Assigns: 

Has unassed use power_quad_acc_n
Looking at GIR GIR: Define power_quad_acc_n
Uses: 
Defs: power_quad_acc_n
Assigns: 

Looking at GIR GIR: power_quad_acc_n = n
Uses: n
Defs: 
Assigns: power_quad_acc_n

Has undefed ass power_quad_acc_n
Looking at GIR GIR: Define power_quad_acc_input
Uses: power_quad_acc_n
Defs: power_quad_acc_input.re,power_quad_acc_input.im
Assigns: 

Has unassed use power_quad_acc_n
Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i2{
power_quad_acc_input[i2].im = invec[i2].im}
Uses: power_quad_acc_n,invec.im
Defs: 
Assigns: power_quad_acc_input.im

Has unassed use power_quad_acc_n
Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i3{
power_quad_acc_input[i3].re = invec[i3].re}
Uses: power_quad_acc_n,invec.re
Defs: 
Assigns: power_quad_acc_input.re

Has unassed use power_quad_acc_n
Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i4{
outvec[i4].im = power_quad_acc_output[i4].im}
Uses: power_quad_acc_n,power_quad_acc_output.im
Defs: 
Assigns: outvec.im

Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i5{
outvec[i5].re = power_quad_acc_output[i5].re}
Uses: power_quad_acc_n,power_quad_acc_output.re
Defs: 
Assigns: outvec.re

Looking at GIR GIR: free power_quad_acc_input
Uses: 
Defs: 
Assigns: 

Looking at GIR GIR: free power_quad_acc_output
Uses: 
Defs: 
Assigns: 

Looking at GIR GIR: free power_quad_acc_n
Uses: 
Defs: 
Assigns: 

Looking at GIR GIR: Define power_quad_acc_output
Uses: power_quad_acc_n
Defs: power_quad_acc_output.re,power_quad_acc_output.im
Assigns: 

Has unassed use power_quad_acc_n
Looking at GIR GIR: Define power_quad_acc_n
Uses: 
Defs: power_quad_acc_n
Assigns: 

Looking at GIR GIR: power_quad_acc_n = n
Uses: n
Defs: 
Assigns: power_quad_acc_n

Has undefed ass power_quad_acc_n
Looking at GIR GIR: Define power_quad_acc_input
Uses: power_quad_acc_n
Defs: power_quad_acc_input.re,power_quad_acc_input.im
Assigns: 

Has unassed use power_quad_acc_n
Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i7{
power_quad_acc_input[i7].im = invec[i7].im}
Uses: power_quad_acc_n,invec.im
Defs: 
Assigns: power_quad_acc_input.im

Has unassed use power_quad_acc_n
Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i8{
power_quad_acc_input[i8].re = invec[i8].re}
Uses: power_quad_acc_n,invec.re
Defs: 
Assigns: power_quad_acc_input.re

Has unassed use power_quad_acc_n
Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i9{
outvec[i9].im = power_quad_acc_output[i9].re}
Uses: power_quad_acc_n,power_quad_acc_output.re
Defs: 
Assigns: outvec.im

Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i10{
outvec[i10].re = power_quad_acc_output[i10].im}
Uses: power_quad_acc_n,power_quad_acc_output.im
Defs: 
Assigns: outvec.re

Looking at GIR GIR: free power_quad_acc_input
Uses: 
Defs: 
Assigns: 

Looking at GIR GIR: free power_quad_acc_output
Uses: 
Defs: 
Assigns: 

Looking at GIR GIR: free power_quad_acc_n
Uses: 
Defs: 
Assigns: 

Looking at GIR GIR: Define power_quad_acc_output
Uses: power_quad_acc_n
Defs: power_quad_acc_output.re,power_quad_acc_output.im
Assigns: 

Has unassed use power_quad_acc_n
Looking at GIR GIR: Define power_quad_acc_n
Uses: 
Defs: power_quad_acc_n
Assigns: 

Looking at GIR GIR: power_quad_acc_n = n
Uses: n
Defs: 
Assigns: power_quad_acc_n

Has undefed ass power_quad_acc_n
Looking at GIR GIR: Define power_quad_acc_input
Uses: power_quad_acc_n
Defs: power_quad_acc_input.re,power_quad_acc_input.im
Assigns: 

Has unassed use power_quad_acc_n
Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i12{
power_quad_acc_input[i12].im = invec[i12].re}
Uses: power_quad_acc_n,invec.re
Defs: 
Assigns: power_quad_acc_input.im

Has unassed use power_quad_acc_n
Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i13{
power_quad_acc_input[i13].re = invec[i13].im}
Uses: power_quad_acc_n,invec.im
Defs: 
Assigns: power_quad_acc_input.re

Has unassed use power_quad_acc_n
Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i14{
outvec[i14].im = power_quad_acc_output[i14].im}
Uses: power_quad_acc_n,power_quad_acc_output.im
Defs: 
Assigns: outvec.im

Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i15{
outvec[i15].re = power_quad_acc_output[i15].re}
Uses: power_quad_acc_n,power_quad_acc_output.re
Defs: 
Assigns: outvec.re

Looking at GIR GIR: free power_quad_acc_input
Uses: 
Defs: 
Assigns: 

Looking at GIR GIR: free power_quad_acc_output
Uses: 
Defs: 
Assigns: 

Looking at GIR GIR: free power_quad_acc_n
Uses: 
Defs: 
Assigns: 

Looking at GIR GIR: Define power_quad_acc_output
Uses: power_quad_acc_n
Defs: power_quad_acc_output.re,power_quad_acc_output.im
Assigns: 

Has unassed use power_quad_acc_n
Looking at GIR GIR: Define power_quad_acc_n
Uses: 
Defs: power_quad_acc_n
Assigns: 

Looking at GIR GIR: power_quad_acc_n = n
Uses: n
Defs: 
Assigns: power_quad_acc_n

Has undefed ass power_quad_acc_n
Looking at GIR GIR: Define power_quad_acc_input
Uses: power_quad_acc_n
Defs: power_quad_acc_input.re,power_quad_acc_input.im
Assigns: 

Has unassed use power_quad_acc_n
Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i17{
power_quad_acc_input[i17].im = invec[i17].re}
Uses: power_quad_acc_n,invec.re
Defs: 
Assigns: power_quad_acc_input.im

Has unassed use power_quad_acc_n
Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i18{
power_quad_acc_input[i18].re = invec[i18].im}
Uses: power_quad_acc_n,invec.im
Defs: 
Assigns: power_quad_acc_input.re

Has unassed use power_quad_acc_n
Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i19{
outvec[i19].im = power_quad_acc_output[i19].re}
Uses: power_quad_acc_n,power_quad_acc_output.re
Defs: 
Assigns: outvec.im

Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i20{
outvec[i20].re = power_quad_acc_output[i20].im}
Uses: power_quad_acc_n,power_quad_acc_output.im
Defs: 
Assigns: outvec.re

Looking at GIR GIR: free power_quad_acc_input
Uses: 
Defs: 
Assigns: 

Looking at GIR GIR: free power_quad_acc_output
Uses: 
Defs: 
Assigns: 

Looking at GIR GIR: free power_quad_acc_n
Uses: 
Defs: 
Assigns: 

Number of programs from these pairs is 4
Doing sub-struct assignment for member re
Doing sub-struct assignment for member im
Context is 
Dim length is power_quad_acc_n
Doing sub-struct assignment for member re
Doing sub-struct assignment for member im
Context is 
Dim length is power_quad_acc_n
Doing sub-struct assignment for member re
Doing sub-struct assignment for member im
Context is 
Dim length is n
Number of codes generated is 1
Number of codes built is 1
Generating tests for the 1 programs
Number of IO tests generated is 1
Can't find any working inputs to user code: likely too sparse (try more inputs?)WARNING: Set --only-test and --skip-build may lead to inconsistent results
(--only-test renumbers executables)
Loading specifications...
Synthesizing...
Starting synthesis!
Generated the dimensions
Have 2 possible annotated typemaps
Looking at intput type array(_float_complex_: with dims N (=) ), with inpname vector
Looking at intput type _float_complex_, with inpname None
Looking at intput type float32, with inpname re
Generated result types SFloat(re)
Looking at intput type float32, with inpname im
Generated result types SFloat(im)
Generated result types STypes(SFloat(re), SFloat(im))
Generated result types SArray(vector: STypes(SFloat(re), SFloat(im)): with lenvar N (=) )
Looking at intput type int64, with inpname N
Generated result types SInt(N)
Looking at intput type array(complex_type: with dims power_quad_acc_n (=) ), with inpname power_quad_acc_input
Looking at intput type complex_type, with inpname None
Looking at intput type float32, with inpname re
Generated result types SFloat(re)
Looking at intput type float32, with inpname im
Generated result types SFloat(im)
Generated result types STypes(SFloat(re), SFloat(im))
Generated result types SArray(power_quad_acc_input: STypes(SFloat(re), SFloat(im)): with lenvar power_quad_acc_n (=) )
Looking at intput type int32, with inpname power_quad_acc_n
Generated result types SInt(power_quad_acc_n)
Looking at intput type array(complex_type: with dims power_quad_acc_n (=) ), with inpname power_quad_acc_output
Looking at intput type complex_type, with inpname None
Looking at intput type float32, with inpname re
Generated result types SFloat(re)
Looking at intput type float32, with inpname im
Generated result types SFloat(im)
Generated result types STypes(SFloat(re), SFloat(im))
Generated result types SArray(power_quad_acc_output: STypes(SFloat(re), SFloat(im)): with lenvar power_quad_acc_n (=) )
Looking at intput type int32, with inpname returnv
Generated result types SInt(returnv)
Looking at intput type array(_float_complex_: with dims N (=) ), with inpname vector
Looking at intput type _float_complex_, with inpname None
Looking at intput type float32, with inpname re
Generated result types SFloat(re)
Looking at intput type float32, with inpname im
Generated result types SFloat(im)
Generated result types STypes(SFloat(re), SFloat(im))
Generated result types SArray(vector: STypes(SFloat(re), SFloat(im)): with lenvar N (=) )
Liveout types are SInt(returnv), SArray(vector: STypes(SFloat(re), SFloat(im)): with lenvar N (=) )
Looking at intput type array(complex_type: with dims power_quad_acc_n (=) ), with inpname power_quad_acc_output
Looking at intput type complex_type, with inpname None
Looking at intput type float32, with inpname re
Generated result types SFloat(re)
Looking at intput type float32, with inpname im
Generated result types SFloat(im)
Generated result types STypes(SFloat(re), SFloat(im))
Generated result types SArray(power_quad_acc_output: STypes(SFloat(re), SFloat(im)): with lenvar power_quad_acc_n (=) )
Variable name is SArray(vector: STypes(SFloat(re), SFloat(im)): with lenvar N (=) ) (probability1.) 
Variable name is SInt(N) (probability1.) 
Got potential dimvars N (=) 
Variable name is SArray(power_quad_acc_output: STypes(SFloat(re), SFloat(im)): with lenvar power_quad_acc_n (=) ) (probability1.) 
Variable name is SArray(vector: STypes(SFloat(re), SFloat(im)): with lenvar N (=) ) (probability0.5) 
Variable name is SInt(N) (probability0.5) 
Types are: 
(postbind: SArray(power_quad_acc_output: STypes(SFloat(re), SFloat(im)): with lenvar power_quad_acc_n (=) ) (probability1.) 
SArray(vector: STypes(SFloat(re), SFloat(im)): with lenvar N (=) ) (probability0.5) 
SInt(N) (probability0.5) )
(prebind: SArray(vector: STypes(SFloat(re), SFloat(im)): with lenvar N (=) ) (probability1.) 
SInt(N) (probability1.) )
Keys in typemap are returnv, vector, N, power_quad_acc_n, power_quad_acc_output, power_quad_acc_input
returnv, vector, N, power_quad_acc_n, power_quad_acc_output, power_quad_acc_input
returnv, vector, N, power_quad_acc_n, power_quad_acc_output, power_quad_acc_input
returnv, vector, N, power_quad_acc_n, power_quad_acc_output, power_quad_acc_input
returnv, vector, N, power_quad_acc_n, power_quad_acc_output, power_quad_acc_input
returnv, vector, N, power_quad_acc_n, power_quad_acc_output, power_quad_acc_input
returnv, vector, N, power_quad_acc_n, power_quad_acc_output, power_quad_acc_input
returnv, vector, N, power_quad_acc_n, power_quad_acc_output, power_quad_acc_input
returnv, vector, N, power_quad_acc_n, power_quad_acc_output, power_quad_acc_input
returnv, vector, N, power_quad_acc_n, power_quad_acc_output, power_quad_acc_input
returnv, vector, N, power_quad_acc_n, power_quad_acc_output, power_quad_acc_input
returnv, vector, N, power_quad_acc_n, power_quad_acc_output, power_quad_acc_input
Looking at intput type array(_float_complex_: with dims returnv (=) ), with inpname vector
Looking at intput type _float_complex_, with inpname None
Looking at intput type float32, with inpname re
Generated result types SFloat(re)
Looking at intput type float32, with inpname im
Generated result types SFloat(im)
Generated result types STypes(SFloat(re), SFloat(im))
Generated result types SArray(vector: STypes(SFloat(re), SFloat(im)): with lenvar returnv (=) )
Looking at intput type int64, with inpname N
Generated result types SInt(N)
Looking at intput type array(complex_type: with dims power_quad_acc_n (=) ), with inpname power_quad_acc_input
Looking at intput type complex_type, with inpname None
Looking at intput type float32, with inpname re
Generated result types SFloat(re)
Looking at intput type float32, with inpname im
Generated result types SFloat(im)
Generated result types STypes(SFloat(re), SFloat(im))
Generated result types SArray(power_quad_acc_input: STypes(SFloat(re), SFloat(im)): with lenvar power_quad_acc_n (=) )
Looking at intput type int32, with inpname power_quad_acc_n
Generated result types SInt(power_quad_acc_n)
Looking at intput type array(complex_type: with dims power_quad_acc_n (=) ), with inpname power_quad_acc_output
Looking at intput type complex_type, with inpname None
Looking at intput type float32, with inpname re
Generated result types SFloat(re)
Looking at intput type float32, with inpname im
Generated result types SFloat(im)
Generated result types STypes(SFloat(re), SFloat(im))
Generated result types SArray(power_quad_acc_output: STypes(SFloat(re), SFloat(im)): with lenvar power_quad_acc_n (=) )
Looking at intput type int32, with inpname returnv
Generated result types SInt(returnv)
Looking at intput type array(_float_complex_: with dims returnv (=) ), with inpname vector
Looking at intput type _float_complex_, with inpname None
Looking at intput type float32, with inpname re
Generated result types SFloat(re)
Looking at intput type float32, with inpname im
Generated result types SFloat(im)
Generated result types STypes(SFloat(re), SFloat(im))
Generated result types SArray(vector: STypes(SFloat(re), SFloat(im)): with lenvar returnv (=) )
Liveout types are SInt(returnv), SArray(vector: STypes(SFloat(re), SFloat(im)): with lenvar returnv (=) )
Looking at intput type array(complex_type: with dims power_quad_acc_n (=) ), with inpname power_quad_acc_output
Looking at intput type complex_type, with inpname None
Looking at intput type float32, with inpname re
Generated result types SFloat(re)
Looking at intput type float32, with inpname im
Generated result types SFloat(im)
Generated result types STypes(SFloat(re), SFloat(im))
Generated result types SArray(power_quad_acc_output: STypes(SFloat(re), SFloat(im)): with lenvar power_quad_acc_n (=) )
Variable name is SArray(vector: STypes(SFloat(re), SFloat(im)): with lenvar returnv (=) ) (probability1.) 
Variable name is SInt(N) (probability1.) 
Got potential dimvars returnv (=) 
Variable name is SArray(power_quad_acc_output: STypes(SFloat(re), SFloat(im)): with lenvar power_quad_acc_n (=) ) (probability1.) 
Variable name is SArray(vector: STypes(SFloat(re), SFloat(im)): with lenvar returnv (=) ) (probability0.5) 
Variable name is SInt(N) (probability0.5) 
Types are: 
(postbind: SArray(power_quad_acc_output: STypes(SFloat(re), SFloat(im)): with lenvar power_quad_acc_n (=) ) (probability1.) 
SArray(vector: STypes(SFloat(re), SFloat(im)): with lenvar returnv (=) ) (probability0.5) 
SInt(N) (probability0.5) )
(prebind: SArray(vector: STypes(SFloat(re), SFloat(im)): with lenvar returnv (=) ) (probability1.) 
SInt(N) (probability1.) )
Keys in typemap are 
Keys in typemap are returnv, vector, N, power_quad_acc_n, power_quad_acc_output, power_quad_acc_input
Looking at tovar vector, im
Keys in typemap are returnv, vector, N, power_quad_acc_n, power_quad_acc_output, power_quad_acc_input
Looking at tovar vector, re
Keys in typemap are returnv, vector, N, power_quad_acc_n, power_quad_acc_output, power_quad_acc_input
Looking at tovar returnv
Keys in typemap are returnv, vector, N, power_quad_acc_n, power_quad_acc_output, power_quad_acc_input
Looking at tovar power_quad_acc_output, Annon
Keys in typemap are returnv, vector, N, power_quad_acc_n, power_quad_acc_output, power_quad_acc_input
Looking at tovar power_quad_acc_n
Keys in typemap are returnv, vector, N, power_quad_acc_n, power_quad_acc_output, power_quad_acc_input
Looking at tovar power_quad_acc_input, im
Keys in typemap are returnv, vector, N, power_quad_acc_n, power_quad_acc_output, power_quad_acc_input
Looking at tovar power_quad_acc_input, re
Keys in typemap are returnv, vector, N, power_quad_acc_n, power_quad_acc_output, power_quad_acc_input
Looking at tovar vector, im
Keys in typemap are returnv, vector, N, power_quad_acc_n, power_quad_acc_output, power_quad_acc_input
Looking at tovar vector, re
Keys in typemap are returnv, vector, N, power_quad_acc_n, power_quad_acc_output, power_quad_acc_input
Looking at tovar returnv
Keys in typemap are returnv, vector, N, power_quad_acc_n, power_quad_acc_output, power_quad_acc_input
Looking at tovar power_quad_acc_output, Annon
Keys in typemap are returnv, vector, N, power_quad_acc_n, power_quad_acc_output, power_quad_acc_input
Looking at tovar power_quad_acc_n
Keys in typemap are returnv, vector, N, power_quad_acc_n, power_quad_acc_output, power_quad_acc_input
Looking at tovar power_quad_acc_input, im
Keys in typemap are returnv, vector, N, power_quad_acc_n, power_quad_acc_output, power_quad_acc_input
Looking at tovar power_quad_acc_input, re
Keys in typemap are returnv, vector, N, power_quad_acc_n, power_quad_acc_output, power_quad_acc_input
Looking at tovar vector, im
Keys in typemap are returnv, vector, N, power_quad_acc_n, power_quad_acc_output, power_quad_acc_input
Looking at tovar vector, re
Keys in typemap are returnv, vector, N, power_quad_acc_n, power_quad_acc_output, power_quad_acc_input
Looking at tovar returnv
Keys in typemap are returnv, vector, N, power_quad_acc_n, power_quad_acc_output, power_quad_acc_input
Looking at tovar power_quad_acc_output, Annon
Keys in typemap are returnv, vector, N, power_quad_acc_n, power_quad_acc_output, power_quad_acc_input
Looking at tovar power_quad_acc_n
Keys in typemap are returnv, vector, N, power_quad_acc_n, power_quad_acc_output, power_quad_acc_input
Looking at tovar power_quad_acc_input, im
Keys in typemap are returnv, vector, N, power_quad_acc_n, power_quad_acc_output, power_quad_acc_input
Looking at tovar power_quad_acc_input, re
Keys in typemap are returnv, vector, N, power_quad_acc_n, power_quad_acc_output, power_quad_acc_input
Looking at tovar vector, im
Keys in typemap are returnv, vector, N, power_quad_acc_n, power_quad_acc_output, power_quad_acc_input
Looking at tovar vector, re
Keys in typemap are returnv, vector, N, power_quad_acc_n, power_quad_acc_output, power_quad_acc_input
Looking at tovar returnv
Keys in typemap are returnv, vector, N, power_quad_acc_n, power_quad_acc_output, power_quad_acc_input
Looking at tovar power_quad_acc_output, Annon
Keys in typemap are returnv, vector, N, power_quad_acc_n, power_quad_acc_output, power_quad_acc_input
Looking at tovar power_quad_acc_n
Keys in typemap are returnv, vector, N, power_quad_acc_n, power_quad_acc_output, power_quad_acc_input
Looking at tovar power_quad_acc_input, im
Keys in typemap are returnv, vector, N, power_quad_acc_n, power_quad_acc_output, power_quad_acc_input
Looking at tovar power_quad_acc_input, re
Keys in typemap are returnv, vector, N, power_quad_acc_n, power_quad_acc_output, power_quad_acc_input
Looking at tovar vector, im
Keys in typemap are returnv, vector, N, power_quad_acc_n, power_quad_acc_output, power_quad_acc_input
Looking at tovar vector, re
Keys in typemap are returnv, vector, N, power_quad_acc_n, power_quad_acc_output, power_quad_acc_input
Looking at tovar returnv
Keys in typemap are returnv, vector, N, power_quad_acc_n, power_quad_acc_output, power_quad_acc_input
Looking at tovar power_quad_acc_output, Annon
Keys in typemap are returnv, vector, N, power_quad_acc_n, power_quad_acc_output, power_quad_acc_input
Looking at tovar power_quad_acc_n
Keys in typemap are returnv, vector, N, power_quad_acc_n, power_quad_acc_output, power_quad_acc_input
Looking at tovar power_quad_acc_input, im
Keys in typemap are returnv, vector, N, power_quad_acc_n, power_quad_acc_output, power_quad_acc_input
Looking at tovar power_quad_acc_input, re
Keys in typemap are returnv, vector, N, power_quad_acc_n, power_quad_acc_output, power_quad_acc_input
Looking at tovar vector, im
Keys in typemap are returnv, vector, N, power_quad_acc_n, power_quad_acc_output, power_quad_acc_input
Looking at tovar vector, re
Keys in typemap are returnv, vector, N, power_quad_acc_n, power_quad_acc_output, power_quad_acc_input
Looking at tovar returnv
Keys in typemap are returnv, vector, N, power_quad_acc_n, power_quad_acc_output, power_quad_acc_input
Looking at tovar power_quad_acc_output, Annon
Keys in typemap are returnv, vector, N, power_quad_acc_n, power_quad_acc_output, power_quad_acc_input
Looking at tovar power_quad_acc_n
Keys in typemap are returnv, vector, N, power_quad_acc_n, power_quad_acc_output, power_quad_acc_input
Looking at tovar power_quad_acc_input, im
Keys in typemap are returnv, vector, N, power_quad_acc_n, power_quad_acc_output, power_quad_acc_input
Looking at tovar power_quad_acc_input, re
Keys in typemap are returnv, vector, N, power_quad_acc_n, power_quad_acc_output, power_quad_acc_input
Looking at tovar vector, im
Keys in typemap are returnv, vector, N, power_quad_acc_n, power_quad_acc_output, power_quad_acc_input
Looking at tovar vector, re
Keys in typemap are returnv, vector, N, power_quad_acc_n, power_quad_acc_output, power_quad_acc_input
Looking at tovar returnv
Keys in typemap are returnv, vector, N, power_quad_acc_n, power_quad_acc_output, power_quad_acc_input
Looking at tovar power_quad_acc_output, Annon
Keys in typemap are returnv, vector, N, power_quad_acc_n, power_quad_acc_output, power_quad_acc_input
Looking at tovar power_quad_acc_n
Keys in typemap are returnv, vector, N, power_quad_acc_n, power_quad_acc_output, power_quad_acc_input
Looking at tovar power_quad_acc_input, im
Keys in typemap are returnv, vector, N, power_quad_acc_n, power_quad_acc_output, power_quad_acc_input
Looking at tovar power_quad_acc_input, re
Keys in typemap are returnv, vector, N, power_quad_acc_n, power_quad_acc_output, power_quad_acc_input
Looking at tovar vector, im
Keys in typemap are returnv, vector, N, power_quad_acc_n, power_quad_acc_output, power_quad_acc_input
Looking at tovar vector, re
Keys in typemap are returnv, vector, N, power_quad_acc_n, power_quad_acc_output, power_quad_acc_input
Looking at tovar returnv
Keys in typemap are returnv, vector, N, power_quad_acc_n, power_quad_acc_output, power_quad_acc_input
Looking at tovar power_quad_acc_output, Annon
Keys in typemap are returnv, vector, N, power_quad_acc_n, power_quad_acc_output, power_quad_acc_input
Looking at tovar power_quad_acc_n
Keys in typemap are returnv, vector, N, power_quad_acc_n, power_quad_acc_output, power_quad_acc_input
Looking at tovar power_quad_acc_input, im
Keys in typemap are returnv, vector, N, power_quad_acc_n, power_quad_acc_output, power_quad_acc_input
Looking at tovar power_quad_acc_input, re
Keys in typemap are returnv, vector, N, power_quad_acc_n, power_quad_acc_output, power_quad_acc_input
Looking at tovar vector, im
Keys in typemap are returnv, vector, N, power_quad_acc_n, power_quad_acc_output, power_quad_acc_input
Looking at tovar vector, re
Keys in typemap are returnv, vector, N, power_quad_acc_n, power_quad_acc_output, power_quad_acc_input
Looking at tovar returnv
Keys in typemap are returnv, vector, N, power_quad_acc_n, power_quad_acc_output, power_quad_acc_input
Looking at tovar power_quad_acc_output, Annon
Keys in typemap are returnv, vector, N, power_quad_acc_n, power_quad_acc_output, power_quad_acc_input
Looking at tovar power_quad_acc_n
Keys in typemap are returnv, vector, N, power_quad_acc_n, power_quad_acc_output, power_quad_acc_input
Looking at tovar power_quad_acc_input, im
Keys in typemap are returnv, vector, N, power_quad_acc_n, power_quad_acc_output, power_quad_acc_input
Looking at tovar power_quad_acc_input, re
Keys in typemap are returnv, vector, N, power_quad_acc_n, power_quad_acc_output, power_quad_acc_input
Looking at tovar vector, im
Keys in typemap are returnv, vector, N, power_quad_acc_n, power_quad_acc_output, power_quad_acc_input
Looking at tovar vector, re
Keys in typemap are returnv, vector, N, power_quad_acc_n, power_quad_acc_output, power_quad_acc_input
Looking at tovar returnv
Keys in typemap are returnv, vector, N, power_quad_acc_n, power_quad_acc_output, power_quad_acc_input
Looking at tovar power_quad_acc_output, Annon
Keys in typemap are returnv, vector, N, power_quad_acc_n, power_quad_acc_output, power_quad_acc_input
Looking at tovar power_quad_acc_n
Keys in typemap are returnv, vector, N, power_quad_acc_n, power_quad_acc_output, power_quad_acc_input
Looking at tovar power_quad_acc_input, im
Keys in typemap are returnv, vector, N, power_quad_acc_n, power_quad_acc_output, power_quad_acc_input
Looking at tovar power_quad_acc_input, re
Keys in typemap are returnv, vector, N, power_quad_acc_n, power_quad_acc_output, power_quad_acc_input
Looking at tovar vector, im
Keys in typemap are returnv, vector, N, power_quad_acc_n, power_quad_acc_output, power_quad_acc_input
Looking at tovar vector, re
Keys in typemap are returnv, vector, N, power_quad_acc_n, power_quad_acc_output, power_quad_acc_input
Looking at tovar returnv
Keys in typemap are returnv, vector, N, power_quad_acc_n, power_quad_acc_output, power_quad_acc_input
Looking at tovar power_quad_acc_output, Annon
Keys in typemap are returnv, vector, N, power_quad_acc_n, power_quad_acc_output, power_quad_acc_input
Looking at tovar power_quad_acc_n
Keys in typemap are returnv, vector, N, power_quad_acc_n, power_quad_acc_output, power_quad_acc_input
Looking at tovar power_quad_acc_input, im
Keys in typemap are returnv, vector, N, power_quad_acc_n, power_quad_acc_output, power_quad_acc_input
Looking at tovar power_quad_acc_input, re
Keys in typemap are returnv, vector, N, power_quad_acc_n, power_quad_acc_output, power_quad_acc_input
Looking at tovar vector, im
Keys in typemap are returnv, vector, N, power_quad_acc_n, power_quad_acc_output, power_quad_acc_input
Looking at tovar vector, re
Keys in typemap are returnv, vector, N, power_quad_acc_n, power_quad_acc_output, power_quad_acc_input
Looking at tovar returnv
Keys in typemap are returnv, vector, N, power_quad_acc_n, power_quad_acc_output, power_quad_acc_input
Looking at tovar power_quad_acc_output, Annon
Keys in typemap are returnv, vector, N, power_quad_acc_n, power_quad_acc_output, power_quad_acc_input
Looking at tovar power_quad_acc_n
Keys in typemap are returnv, vector, N, power_quad_acc_n, power_quad_acc_output, power_quad_acc_input
Looking at tovar power_quad_acc_input, im
Keys in typemap are returnv, vector, N, power_quad_acc_n, power_quad_acc_output, power_quad_acc_input
Looking at tovar power_quad_acc_input, re
Number of skeletons generated is 12
Getting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeNumber of conversion pairs generated is 12
Looking at GIR GIR: Define power_quad_acc_output
Uses: power_quad_acc_n
Defs: power_quad_acc_output.re,power_quad_acc_output.im
Assigns: 

Has unassed use power_quad_acc_n
Looking at GIR GIR: Define power_quad_acc_n
Uses: 
Defs: power_quad_acc_n
Assigns: 

Looking at GIR GIR: power_quad_acc_n = N
Uses: N
Defs: 
Assigns: power_quad_acc_n

Has undefed ass power_quad_acc_n
Looking at GIR GIR: Define power_quad_acc_input
Uses: power_quad_acc_n
Defs: power_quad_acc_input.re,power_quad_acc_input.im
Assigns: 

Has unassed use power_quad_acc_n
Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i2{
power_quad_acc_input[i2].im = vector[i2].im}
Uses: power_quad_acc_n,vector.im
Defs: 
Assigns: power_quad_acc_input.im

Has unassed use power_quad_acc_n
Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i3{
power_quad_acc_input[i3].re = vector[i3].re}
Uses: power_quad_acc_n,vector.re
Defs: 
Assigns: power_quad_acc_input.re

Has unassed use power_quad_acc_n
Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i4{
vector[i4].im = power_quad_acc_output[i4].im}
Uses: power_quad_acc_n,power_quad_acc_output.im
Defs: 
Assigns: vector.im

Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i5{
vector[i5].re = power_quad_acc_output[i5].re}
Uses: power_quad_acc_n,power_quad_acc_output.re
Defs: 
Assigns: vector.re

Looking at GIR GIR: EscapingDefine(UseMalloc) returnv
Uses: 
Defs: returnv
Assigns: 

Looking at GIR GIR: returnv = 1
Uses: 
Defs: 
Assigns: returnv

Looking at GIR GIR: free power_quad_acc_input
Uses: 
Defs: 
Assigns: 

Looking at GIR GIR: free power_quad_acc_output
Uses: 
Defs: 
Assigns: 

Looking at GIR GIR: free power_quad_acc_n
Uses: 
Defs: 
Assigns: 

Looking at GIR GIR: return returnv
Uses: returnv
Defs: 
Assigns: 

Has unassed use returnv
Looking at GIR GIR: Define power_quad_acc_output
Uses: power_quad_acc_n
Defs: power_quad_acc_output.re,power_quad_acc_output.im
Assigns: 

Has unassed use power_quad_acc_n
Looking at GIR GIR: Define power_quad_acc_n
Uses: 
Defs: power_quad_acc_n
Assigns: 

Looking at GIR GIR: power_quad_acc_n = N
Uses: N
Defs: 
Assigns: power_quad_acc_n

Has undefed ass power_quad_acc_n
Looking at GIR GIR: Define power_quad_acc_input
Uses: power_quad_acc_n
Defs: power_quad_acc_input.re,power_quad_acc_input.im
Assigns: 

Has unassed use power_quad_acc_n
Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i7{
power_quad_acc_input[i7].im = vector[i7].im}
Uses: power_quad_acc_n,vector.im
Defs: 
Assigns: power_quad_acc_input.im

Has unassed use power_quad_acc_n
Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i8{
power_quad_acc_input[i8].re = vector[i8].re}
Uses: power_quad_acc_n,vector.re
Defs: 
Assigns: power_quad_acc_input.re

Has unassed use power_quad_acc_n
Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i9{
vector[i9].im = power_quad_acc_output[i9].re}
Uses: power_quad_acc_n,power_quad_acc_output.re
Defs: 
Assigns: vector.im

Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i10{
vector[i10].re = power_quad_acc_output[i10].im}
Uses: power_quad_acc_n,power_quad_acc_output.im
Defs: 
Assigns: vector.re

Looking at GIR GIR: EscapingDefine(UseMalloc) returnv
Uses: 
Defs: returnv
Assigns: 

Looking at GIR GIR: returnv = 1
Uses: 
Defs: 
Assigns: returnv

Looking at GIR GIR: free power_quad_acc_input
Uses: 
Defs: 
Assigns: 

Looking at GIR GIR: free power_quad_acc_output
Uses: 
Defs: 
Assigns: 

Looking at GIR GIR: free power_quad_acc_n
Uses: 
Defs: 
Assigns: 

Looking at GIR GIR: return returnv
Uses: returnv
Defs: 
Assigns: 

Has unassed use returnv
Looking at GIR GIR: Define power_quad_acc_output
Uses: power_quad_acc_n
Defs: power_quad_acc_output.re,power_quad_acc_output.im
Assigns: 

Has unassed use power_quad_acc_n
Looking at GIR GIR: Define power_quad_acc_n
Uses: 
Defs: power_quad_acc_n
Assigns: 

Looking at GIR GIR: power_quad_acc_n = N
Uses: N
Defs: 
Assigns: power_quad_acc_n

Has undefed ass power_quad_acc_n
Looking at GIR GIR: Define power_quad_acc_input
Uses: power_quad_acc_n
Defs: power_quad_acc_input.re,power_quad_acc_input.im
Assigns: 

Has unassed use power_quad_acc_n
Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i12{
power_quad_acc_input[i12].im = vector[i12].im}
Uses: power_quad_acc_n,vector.im
Defs: 
Assigns: power_quad_acc_input.im

Has unassed use power_quad_acc_n
Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i13{
power_quad_acc_input[i13].re = vector[i13].re}
Uses: power_quad_acc_n,vector.re
Defs: 
Assigns: power_quad_acc_input.re

Has unassed use power_quad_acc_n
Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i14{
vector[i14].im = power_quad_acc_output[i14].im}
Uses: power_quad_acc_n,power_quad_acc_output.im
Defs: 
Assigns: vector.im

Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i15{
vector[i15].re = power_quad_acc_output[i15].re}
Uses: power_quad_acc_n,power_quad_acc_output.re
Defs: 
Assigns: vector.re

Looking at GIR GIR: EscapingDefine(UseMalloc) returnv
Uses: 
Defs: returnv
Assigns: 

Looking at GIR GIR: returnv = 0
Uses: 
Defs: 
Assigns: returnv

Looking at GIR GIR: free power_quad_acc_input
Uses: 
Defs: 
Assigns: 

Looking at GIR GIR: free power_quad_acc_output
Uses: 
Defs: 
Assigns: 

Looking at GIR GIR: free power_quad_acc_n
Uses: 
Defs: 
Assigns: 

Looking at GIR GIR: return returnv
Uses: returnv
Defs: 
Assigns: 

Has unassed use returnv
Looking at GIR GIR: Define power_quad_acc_output
Uses: power_quad_acc_n
Defs: power_quad_acc_output.re,power_quad_acc_output.im
Assigns: 

Has unassed use power_quad_acc_n
Looking at GIR GIR: Define power_quad_acc_n
Uses: 
Defs: power_quad_acc_n
Assigns: 

Looking at GIR GIR: power_quad_acc_n = N
Uses: N
Defs: 
Assigns: power_quad_acc_n

Has undefed ass power_quad_acc_n
Looking at GIR GIR: Define power_quad_acc_input
Uses: power_quad_acc_n
Defs: power_quad_acc_input.re,power_quad_acc_input.im
Assigns: 

Has unassed use power_quad_acc_n
Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i17{
power_quad_acc_input[i17].im = vector[i17].im}
Uses: power_quad_acc_n,vector.im
Defs: 
Assigns: power_quad_acc_input.im

Has unassed use power_quad_acc_n
Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i18{
power_quad_acc_input[i18].re = vector[i18].re}
Uses: power_quad_acc_n,vector.re
Defs: 
Assigns: power_quad_acc_input.re

Has unassed use power_quad_acc_n
Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i19{
vector[i19].im = power_quad_acc_output[i19].re}
Uses: power_quad_acc_n,power_quad_acc_output.re
Defs: 
Assigns: vector.im

Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i20{
vector[i20].re = power_quad_acc_output[i20].im}
Uses: power_quad_acc_n,power_quad_acc_output.im
Defs: 
Assigns: vector.re

Looking at GIR GIR: EscapingDefine(UseMalloc) returnv
Uses: 
Defs: returnv
Assigns: 

Looking at GIR GIR: returnv = 0
Uses: 
Defs: 
Assigns: returnv

Looking at GIR GIR: free power_quad_acc_input
Uses: 
Defs: 
Assigns: 

Looking at GIR GIR: free power_quad_acc_output
Uses: 
Defs: 
Assigns: 

Looking at GIR GIR: free power_quad_acc_n
Uses: 
Defs: 
Assigns: 

Looking at GIR GIR: return returnv
Uses: returnv
Defs: 
Assigns: 

Has unassed use returnv
Looking at GIR GIR: Define power_quad_acc_output
Uses: power_quad_acc_n
Defs: power_quad_acc_output.re,power_quad_acc_output.im
Assigns: 

Has unassed use power_quad_acc_n
Looking at GIR GIR: Define power_quad_acc_n
Uses: 
Defs: power_quad_acc_n
Assigns: 

Looking at GIR GIR: power_quad_acc_n = N
Uses: N
Defs: 
Assigns: power_quad_acc_n

Has undefed ass power_quad_acc_n
Looking at GIR GIR: Define power_quad_acc_input
Uses: power_quad_acc_n
Defs: power_quad_acc_input.re,power_quad_acc_input.im
Assigns: 

Has unassed use power_quad_acc_n
Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i22{
power_quad_acc_input[i22].im = vector[i22].im}
Uses: power_quad_acc_n,vector.im
Defs: 
Assigns: power_quad_acc_input.im

Has unassed use power_quad_acc_n
Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i23{
power_quad_acc_input[i23].re = vector[i23].re}
Uses: power_quad_acc_n,vector.re
Defs: 
Assigns: power_quad_acc_input.re

Has unassed use power_quad_acc_n
Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i24{
vector[i24].im = power_quad_acc_output[i24].im}
Uses: power_quad_acc_n,power_quad_acc_output.im
Defs: 
Assigns: vector.im

Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i25{
vector[i25].re = power_quad_acc_output[i25].re}
Uses: power_quad_acc_n,power_quad_acc_output.re
Defs: 
Assigns: vector.re

Looking at GIR GIR: EscapingDefine(UseMalloc) returnv
Uses: 
Defs: returnv
Assigns: 

Looking at GIR GIR: returnv = -1
Uses: 
Defs: 
Assigns: returnv

Looking at GIR GIR: free power_quad_acc_input
Uses: 
Defs: 
Assigns: 

Looking at GIR GIR: free power_quad_acc_output
Uses: 
Defs: 
Assigns: 

Looking at GIR GIR: free power_quad_acc_n
Uses: 
Defs: 
Assigns: 

Looking at GIR GIR: return returnv
Uses: returnv
Defs: 
Assigns: 

Has unassed use returnv
Looking at GIR GIR: Define power_quad_acc_output
Uses: power_quad_acc_n
Defs: power_quad_acc_output.re,power_quad_acc_output.im
Assigns: 

Has unassed use power_quad_acc_n
Looking at GIR GIR: Define power_quad_acc_n
Uses: 
Defs: power_quad_acc_n
Assigns: 

Looking at GIR GIR: power_quad_acc_n = N
Uses: N
Defs: 
Assigns: power_quad_acc_n

Has undefed ass power_quad_acc_n
Looking at GIR GIR: Define power_quad_acc_input
Uses: power_quad_acc_n
Defs: power_quad_acc_input.re,power_quad_acc_input.im
Assigns: 

Has unassed use power_quad_acc_n
Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i27{
power_quad_acc_input[i27].im = vector[i27].im}
Uses: power_quad_acc_n,vector.im
Defs: 
Assigns: power_quad_acc_input.im

Has unassed use power_quad_acc_n
Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i28{
power_quad_acc_input[i28].re = vector[i28].re}
Uses: power_quad_acc_n,vector.re
Defs: 
Assigns: power_quad_acc_input.re

Has unassed use power_quad_acc_n
Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i29{
vector[i29].im = power_quad_acc_output[i29].re}
Uses: power_quad_acc_n,power_quad_acc_output.re
Defs: 
Assigns: vector.im

Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i30{
vector[i30].re = power_quad_acc_output[i30].im}
Uses: power_quad_acc_n,power_quad_acc_output.im
Defs: 
Assigns: vector.re

Looking at GIR GIR: EscapingDefine(UseMalloc) returnv
Uses: 
Defs: returnv
Assigns: 

Looking at GIR GIR: returnv = -1
Uses: 
Defs: 
Assigns: returnv

Looking at GIR GIR: free power_quad_acc_input
Uses: 
Defs: 
Assigns: 

Looking at GIR GIR: free power_quad_acc_output
Uses: 
Defs: 
Assigns: 

Looking at GIR GIR: free power_quad_acc_n
Uses: 
Defs: 
Assigns: 

Looking at GIR GIR: return returnv
Uses: returnv
Defs: 
Assigns: 

Has unassed use returnv
Looking at GIR GIR: Define power_quad_acc_output
Uses: power_quad_acc_n
Defs: power_quad_acc_output.re,power_quad_acc_output.im
Assigns: 

Has unassed use power_quad_acc_n
Looking at GIR GIR: Define power_quad_acc_n
Uses: 
Defs: power_quad_acc_n
Assigns: 

Looking at GIR GIR: power_quad_acc_n = N
Uses: N
Defs: 
Assigns: power_quad_acc_n

Has undefed ass power_quad_acc_n
Looking at GIR GIR: Define power_quad_acc_input
Uses: power_quad_acc_n
Defs: power_quad_acc_input.re,power_quad_acc_input.im
Assigns: 

Has unassed use power_quad_acc_n
Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i32{
power_quad_acc_input[i32].im = vector[i32].re}
Uses: power_quad_acc_n,vector.re
Defs: 
Assigns: power_quad_acc_input.im

Has unassed use power_quad_acc_n
Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i33{
power_quad_acc_input[i33].re = vector[i33].im}
Uses: power_quad_acc_n,vector.im
Defs: 
Assigns: power_quad_acc_input.re

Has unassed use power_quad_acc_n
Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i34{
vector[i34].im = power_quad_acc_output[i34].im}
Uses: power_quad_acc_n,power_quad_acc_output.im
Defs: 
Assigns: vector.im

Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i35{
vector[i35].re = power_quad_acc_output[i35].re}
Uses: power_quad_acc_n,power_quad_acc_output.re
Defs: 
Assigns: vector.re

Looking at GIR GIR: EscapingDefine(UseMalloc) returnv
Uses: 
Defs: returnv
Assigns: 

Looking at GIR GIR: returnv = 1
Uses: 
Defs: 
Assigns: returnv

Looking at GIR GIR: free power_quad_acc_input
Uses: 
Defs: 
Assigns: 

Looking at GIR GIR: free power_quad_acc_output
Uses: 
Defs: 
Assigns: 

Looking at GIR GIR: free power_quad_acc_n
Uses: 
Defs: 
Assigns: 

Looking at GIR GIR: return returnv
Uses: returnv
Defs: 
Assigns: 

Has unassed use returnv
Looking at GIR GIR: Define power_quad_acc_output
Uses: power_quad_acc_n
Defs: power_quad_acc_output.re,power_quad_acc_output.im
Assigns: 

Has unassed use power_quad_acc_n
Looking at GIR GIR: Define power_quad_acc_n
Uses: 
Defs: power_quad_acc_n
Assigns: 

Looking at GIR GIR: power_quad_acc_n = N
Uses: N
Defs: 
Assigns: power_quad_acc_n

Has undefed ass power_quad_acc_n
Looking at GIR GIR: Define power_quad_acc_input
Uses: power_quad_acc_n
Defs: power_quad_acc_input.re,power_quad_acc_input.im
Assigns: 

Has unassed use power_quad_acc_n
Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i37{
power_quad_acc_input[i37].im = vector[i37].re}
Uses: power_quad_acc_n,vector.re
Defs: 
Assigns: power_quad_acc_input.im

Has unassed use power_quad_acc_n
Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i38{
power_quad_acc_input[i38].re = vector[i38].im}
Uses: power_quad_acc_n,vector.im
Defs: 
Assigns: power_quad_acc_input.re

Has unassed use power_quad_acc_n
Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i39{
vector[i39].im = power_quad_acc_output[i39].re}
Uses: power_quad_acc_n,power_quad_acc_output.re
Defs: 
Assigns: vector.im

Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i40{
vector[i40].re = power_quad_acc_output[i40].im}
Uses: power_quad_acc_n,power_quad_acc_output.im
Defs: 
Assigns: vector.re

Looking at GIR GIR: EscapingDefine(UseMalloc) returnv
Uses: 
Defs: returnv
Assigns: 

Looking at GIR GIR: returnv = 1
Uses: 
Defs: 
Assigns: returnv

Looking at GIR GIR: free power_quad_acc_input
Uses: 
Defs: 
Assigns: 

Looking at GIR GIR: free power_quad_acc_output
Uses: 
Defs: 
Assigns: 

Looking at GIR GIR: free power_quad_acc_n
Uses: 
Defs: 
Assigns: 

Looking at GIR GIR: return returnv
Uses: returnv
Defs: 
Assigns: 

Has unassed use returnv
Looking at GIR GIR: Define power_quad_acc_output
Uses: power_quad_acc_n
Defs: power_quad_acc_output.re,power_quad_acc_output.im
Assigns: 

Has unassed use power_quad_acc_n
Looking at GIR GIR: Define power_quad_acc_n
Uses: 
Defs: power_quad_acc_n
Assigns: 

Looking at GIR GIR: power_quad_acc_n = N
Uses: N
Defs: 
Assigns: power_quad_acc_n

Has undefed ass power_quad_acc_n
Looking at GIR GIR: Define power_quad_acc_input
Uses: power_quad_acc_n
Defs: power_quad_acc_input.re,power_quad_acc_input.im
Assigns: 

Has unassed use power_quad_acc_n
Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i42{
power_quad_acc_input[i42].im = vector[i42].re}
Uses: power_quad_acc_n,vector.re
Defs: 
Assigns: power_quad_acc_input.im

Has unassed use power_quad_acc_n
Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i43{
power_quad_acc_input[i43].re = vector[i43].im}
Uses: power_quad_acc_n,vector.im
Defs: 
Assigns: power_quad_acc_input.re

Has unassed use power_quad_acc_n
Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i44{
vector[i44].im = power_quad_acc_output[i44].im}
Uses: power_quad_acc_n,power_quad_acc_output.im
Defs: 
Assigns: vector.im

Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i45{
vector[i45].re = power_quad_acc_output[i45].re}
Uses: power_quad_acc_n,power_quad_acc_output.re
Defs: 
Assigns: vector.re

Looking at GIR GIR: EscapingDefine(UseMalloc) returnv
Uses: 
Defs: returnv
Assigns: 

Looking at GIR GIR: returnv = 0
Uses: 
Defs: 
Assigns: returnv

Looking at GIR GIR: free power_quad_acc_input
Uses: 
Defs: 
Assigns: 

Looking at GIR GIR: free power_quad_acc_output
Uses: 
Defs: 
Assigns: 

Looking at GIR GIR: free power_quad_acc_n
Uses: 
Defs: 
Assigns: 

Looking at GIR GIR: return returnv
Uses: returnv
Defs: 
Assigns: 

Has unassed use returnv
Looking at GIR GIR: Define power_quad_acc_output
Uses: power_quad_acc_n
Defs: power_quad_acc_output.re,power_quad_acc_output.im
Assigns: 

Has unassed use power_quad_acc_n
Looking at GIR GIR: Define power_quad_acc_n
Uses: 
Defs: power_quad_acc_n
Assigns: 

Looking at GIR GIR: power_quad_acc_n = N
Uses: N
Defs: 
Assigns: power_quad_acc_n

Has undefed ass power_quad_acc_n
Looking at GIR GIR: Define power_quad_acc_input
Uses: power_quad_acc_n
Defs: power_quad_acc_input.re,power_quad_acc_input.im
Assigns: 

Has unassed use power_quad_acc_n
Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i47{
power_quad_acc_input[i47].im = vector[i47].re}
Uses: power_quad_acc_n,vector.re
Defs: 
Assigns: power_quad_acc_input.im

Has unassed use power_quad_acc_n
Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i48{
power_quad_acc_input[i48].re = vector[i48].im}
Uses: power_quad_acc_n,vector.im
Defs: 
Assigns: power_quad_acc_input.re

Has unassed use power_quad_acc_n
Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i49{
vector[i49].im = power_quad_acc_output[i49].re}
Uses: power_quad_acc_n,power_quad_acc_output.re
Defs: 
Assigns: vector.im

Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i50{
vector[i50].re = power_quad_acc_output[i50].im}
Uses: power_quad_acc_n,power_quad_acc_output.im
Defs: 
Assigns: vector.re

Looking at GIR GIR: EscapingDefine(UseMalloc) returnv
Uses: 
Defs: returnv
Assigns: 

Looking at GIR GIR: returnv = 0
Uses: 
Defs: 
Assigns: returnv

Looking at GIR GIR: free power_quad_acc_input
Uses: 
Defs: 
Assigns: 

Looking at GIR GIR: free power_quad_acc_output
Uses: 
Defs: 
Assigns: 

Looking at GIR GIR: free power_quad_acc_n
Uses: 
Defs: 
Assigns: 

Looking at GIR GIR: return returnv
Uses: returnv
Defs: 
Assigns: 

Has unassed use returnv
Looking at GIR GIR: Define power_quad_acc_output
Uses: power_quad_acc_n
Defs: power_quad_acc_output.re,power_quad_acc_output.im
Assigns: 

Has unassed use power_quad_acc_n
Looking at GIR GIR: Define power_quad_acc_n
Uses: 
Defs: power_quad_acc_n
Assigns: 

Looking at GIR GIR: power_quad_acc_n = N
Uses: N
Defs: 
Assigns: power_quad_acc_n

Has undefed ass power_quad_acc_n
Looking at GIR GIR: Define power_quad_acc_input
Uses: power_quad_acc_n
Defs: power_quad_acc_input.re,power_quad_acc_input.im
Assigns: 

Has unassed use power_quad_acc_n
Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i52{
power_quad_acc_input[i52].im = vector[i52].re}
Uses: power_quad_acc_n,vector.re
Defs: 
Assigns: power_quad_acc_input.im

Has unassed use power_quad_acc_n
Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i53{
power_quad_acc_input[i53].re = vector[i53].im}
Uses: power_quad_acc_n,vector.im
Defs: 
Assigns: power_quad_acc_input.re

Has unassed use power_quad_acc_n
Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i54{
vector[i54].im = power_quad_acc_output[i54].im}
Uses: power_quad_acc_n,power_quad_acc_output.im
Defs: 
Assigns: vector.im

Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i55{
vector[i55].re = power_quad_acc_output[i55].re}
Uses: power_quad_acc_n,power_quad_acc_output.re
Defs: 
Assigns: vector.re

Looking at GIR GIR: EscapingDefine(UseMalloc) returnv
Uses: 
Defs: returnv
Assigns: 

Looking at GIR GIR: returnv = -1
Uses: 
Defs: 
Assigns: returnv

Looking at GIR GIR: free power_quad_acc_input
Uses: 
Defs: 
Assigns: 

Looking at GIR GIR: free power_quad_acc_output
Uses: 
Defs: 
Assigns: 

Looking at GIR GIR: free power_quad_acc_n
Uses: 
Defs: 
Assigns: 

Looking at GIR GIR: return returnv
Uses: returnv
Defs: 
Assigns: 

Has unassed use returnv
Looking at GIR GIR: Define power_quad_acc_output
Uses: power_quad_acc_n
Defs: power_quad_acc_output.re,power_quad_acc_output.im
Assigns: 

Has unassed use power_quad_acc_n
Looking at GIR GIR: Define power_quad_acc_n
Uses: 
Defs: power_quad_acc_n
Assigns: 

Looking at GIR GIR: power_quad_acc_n = N
Uses: N
Defs: 
Assigns: power_quad_acc_n

Has undefed ass power_quad_acc_n
Looking at GIR GIR: Define power_quad_acc_input
Uses: power_quad_acc_n
Defs: power_quad_acc_input.re,power_quad_acc_input.im
Assigns: 

Has unassed use power_quad_acc_n
Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i57{
power_quad_acc_input[i57].im = vector[i57].re}
Uses: power_quad_acc_n,vector.re
Defs: 
Assigns: power_quad_acc_input.im

Has unassed use power_quad_acc_n
Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i58{
power_quad_acc_input[i58].re = vector[i58].im}
Uses: power_quad_acc_n,vector.im
Defs: 
Assigns: power_quad_acc_input.re

Has unassed use power_quad_acc_n
Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i59{
vector[i59].im = power_quad_acc_output[i59].re}
Uses: power_quad_acc_n,power_quad_acc_output.re
Defs: 
Assigns: vector.im

Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i60{
vector[i60].re = power_quad_acc_output[i60].im}
Uses: power_quad_acc_n,power_quad_acc_output.im
Defs: 
Assigns: vector.re

Looking at GIR GIR: EscapingDefine(UseMalloc) returnv
Uses: 
Defs: returnv
Assigns: 

Looking at GIR GIR: returnv = -1
Uses: 
Defs: 
Assigns: returnv

Looking at GIR GIR: free power_quad_acc_input
Uses: 
Defs: 
Assigns: 

Looking at GIR GIR: free power_quad_acc_output
Uses: 
Defs: 
Assigns: 

Looking at GIR GIR: free power_quad_acc_n
Uses: 
Defs: 
Assigns: 

Looking at GIR GIR: return returnv
Uses: returnv
Defs: 
Assigns: 

Has unassed use returnv
Number of programs from these pairs is 12
Doing sub-struct assignment for member re
Doing sub-struct assignment for member im
Context is 
Dim length is power_quad_acc_n
Doing sub-struct assignment for member re
Doing sub-struct assignment for member im
Context is 
Dim length is power_quad_acc_n
Number of codes generated is 1
Number of codes built is 1
Generating tests for the 1 programs
Number of IO tests generated is 1
Time: 0.000467
AccTime: 0
Real responses generated
Warning: Accelerator failed on input (input file synthethizer_temps/io/1//1.json): accelerator bounds should be specified for better performance. 
For executable synthethizer_temps/1_exec, passed cound is 0 of 1 tests (0 are vacuous: luck pass is false) 
Starting post synthesis (1 programs)
===============================================
Working tests are in the source files for executables 
There were 0 working in total
Required compiler flags to build are: libs/clib/fft_synth_lib.co libs/clib/synthesizer.co -Ilibs -fsanitize=address -lfftw3 -lfftw3f
Done!
WARNING: Set --only-test and --skip-build may lead to inconsistent results
(--only-test renumbers executables)
Loading specifications...
Synthesizing...
Starting synthesis!
Generated the dimensions
Have 2 possible annotated typemaps
Looking at intput type array(_float_complex_: with dims N (=) ), with inpname vector
Looking at intput type _float_complex_, with inpname None
Looking at intput type float32, with inpname re
Generated result types SFloat(re)
Looking at intput type float32, with inpname im
Generated result types SFloat(im)
Generated result types STypes(SFloat(re), SFloat(im))
Generated result types SArray(vector: STypes(SFloat(re), SFloat(im)): with lenvar N (=) )
Looking at intput type int64, with inpname N
Generated result types SInt(N)
Looking at intput type array(complex_type: with dims power_quad_acc_n (=) ), with inpname power_quad_acc_input
Looking at intput type complex_type, with inpname None
Looking at intput type float32, with inpname re
Generated result types SFloat(re)
Looking at intput type float32, with inpname im
Generated result types SFloat(im)
Generated result types STypes(SFloat(re), SFloat(im))
Generated result types SArray(power_quad_acc_input: STypes(SFloat(re), SFloat(im)): with lenvar power_quad_acc_n (=) )
Looking at intput type int32, with inpname power_quad_acc_n
Generated result types SInt(power_quad_acc_n)
Looking at intput type array(complex_type: with dims power_quad_acc_n (=) ), with inpname power_quad_acc_output
Looking at intput type complex_type, with inpname None
Looking at intput type float32, with inpname re
Generated result types SFloat(re)
Looking at intput type float32, with inpname im
Generated result types SFloat(im)
Generated result types STypes(SFloat(re), SFloat(im))
Generated result types SArray(power_quad_acc_output: STypes(SFloat(re), SFloat(im)): with lenvar power_quad_acc_n (=) )
Looking at intput type int32, with inpname returnv
Generated result types SInt(returnv)
Looking at intput type array(_float_complex_: with dims N (=) ), with inpname vector
Looking at intput type _float_complex_, with inpname None
Looking at intput type float32, with inpname re
Generated result types SFloat(re)
Looking at intput type float32, with inpname im
Generated result types SFloat(im)
Generated result types STypes(SFloat(re), SFloat(im))
Generated result types SArray(vector: STypes(SFloat(re), SFloat(im)): with lenvar N (=) )
Liveout types are SInt(returnv), SArray(vector: STypes(SFloat(re), SFloat(im)): with lenvar N (=) )
Looking at intput type array(complex_type: with dims power_quad_acc_n (=) ), with inpname power_quad_acc_output
Looking at intput type complex_type, with inpname None
Looking at intput type float32, with inpname re
Generated result types SFloat(re)
Looking at intput type float32, with inpname im
Generated result types SFloat(im)
Generated result types STypes(SFloat(re), SFloat(im))
Generated result types SArray(power_quad_acc_output: STypes(SFloat(re), SFloat(im)): with lenvar power_quad_acc_n (=) )
Variable name is SArray(vector: STypes(SFloat(re), SFloat(im)): with lenvar N (=) ) (probability1.) 
Variable name is SInt(N) (probability1.) 
Got potential dimvars N (=) 
Variable name is SArray(power_quad_acc_output: STypes(SFloat(re), SFloat(im)): with lenvar power_quad_acc_n (=) ) (probability1.) 
Variable name is SArray(vector: STypes(SFloat(re), SFloat(im)): with lenvar N (=) ) (probability0.5) 
Variable name is SInt(N) (probability0.5) 
Types are: 
(postbind: SArray(power_quad_acc_output: STypes(SFloat(re), SFloat(im)): with lenvar power_quad_acc_n (=) ) (probability1.) 
SArray(vector: STypes(SFloat(re), SFloat(im)): with lenvar N (=) ) (probability0.5) 
SInt(N) (probability0.5) )
(prebind: SArray(vector: STypes(SFloat(re), SFloat(im)): with lenvar N (=) ) (probability1.) 
SInt(N) (probability1.) )
Keys in typemap are returnv, vector, N, power_quad_acc_n, power_quad_acc_output, power_quad_acc_input
returnv, vector, N, power_quad_acc_n, power_quad_acc_output, power_quad_acc_input
returnv, vector, N, power_quad_acc_n, power_quad_acc_output, power_quad_acc_input
returnv, vector, N, power_quad_acc_n, power_quad_acc_output, power_quad_acc_input
returnv, vector, N, power_quad_acc_n, power_quad_acc_output, power_quad_acc_input
returnv, vector, N, power_quad_acc_n, power_quad_acc_output, power_quad_acc_input
returnv, vector, N, power_quad_acc_n, power_quad_acc_output, power_quad_acc_input
returnv, vector, N, power_quad_acc_n, power_quad_acc_output, power_quad_acc_input
returnv, vector, N, power_quad_acc_n, power_quad_acc_output, power_quad_acc_input
returnv, vector, N, power_quad_acc_n, power_quad_acc_output, power_quad_acc_input
returnv, vector, N, power_quad_acc_n, power_quad_acc_output, power_quad_acc_input
returnv, vector, N, power_quad_acc_n, power_quad_acc_output, power_quad_acc_input
Looking at intput type array(_float_complex_: with dims returnv (=) ), with inpname vector
Looking at intput type _float_complex_, with inpname None
Looking at intput type float32, with inpname re
Generated result types SFloat(re)
Looking at intput type float32, with inpname im
Generated result types SFloat(im)
Generated result types STypes(SFloat(re), SFloat(im))
Generated result types SArray(vector: STypes(SFloat(re), SFloat(im)): with lenvar returnv (=) )
Looking at intput type int64, with inpname N
Generated result types SInt(N)
Looking at intput type array(complex_type: with dims power_quad_acc_n (=) ), with inpname power_quad_acc_input
Looking at intput type complex_type, with inpname None
Looking at intput type float32, with inpname re
Generated result types SFloat(re)
Looking at intput type float32, with inpname im
Generated result types SFloat(im)
Generated result types STypes(SFloat(re), SFloat(im))
Generated result types SArray(power_quad_acc_input: STypes(SFloat(re), SFloat(im)): with lenvar power_quad_acc_n (=) )
Looking at intput type int32, with inpname power_quad_acc_n
Generated result types SInt(power_quad_acc_n)
Looking at intput type array(complex_type: with dims power_quad_acc_n (=) ), with inpname power_quad_acc_output
Looking at intput type complex_type, with inpname None
Looking at intput type float32, with inpname re
Generated result types SFloat(re)
Looking at intput type float32, with inpname im
Generated result types SFloat(im)
Generated result types STypes(SFloat(re), SFloat(im))
Generated result types SArray(power_quad_acc_output: STypes(SFloat(re), SFloat(im)): with lenvar power_quad_acc_n (=) )
Looking at intput type int32, with inpname returnv
Generated result types SInt(returnv)
Looking at intput type array(_float_complex_: with dims returnv (=) ), with inpname vector
Looking at intput type _float_complex_, with inpname None
Looking at intput type float32, with inpname re
Generated result types SFloat(re)
Looking at intput type float32, with inpname im
Generated result types SFloat(im)
Generated result types STypes(SFloat(re), SFloat(im))
Generated result types SArray(vector: STypes(SFloat(re), SFloat(im)): with lenvar returnv (=) )
Liveout types are SInt(returnv), SArray(vector: STypes(SFloat(re), SFloat(im)): with lenvar returnv (=) )
Looking at intput type array(complex_type: with dims power_quad_acc_n (=) ), with inpname power_quad_acc_output
Looking at intput type complex_type, with inpname None
Looking at intput type float32, with inpname re
Generated result types SFloat(re)
Looking at intput type float32, with inpname im
Generated result types SFloat(im)
Generated result types STypes(SFloat(re), SFloat(im))
Generated result types SArray(power_quad_acc_output: STypes(SFloat(re), SFloat(im)): with lenvar power_quad_acc_n (=) )
Variable name is SArray(vector: STypes(SFloat(re), SFloat(im)): with lenvar returnv (=) ) (probability1.) 
Variable name is SInt(N) (probability1.) 
Got potential dimvars returnv (=) 
Variable name is SArray(power_quad_acc_output: STypes(SFloat(re), SFloat(im)): with lenvar power_quad_acc_n (=) ) (probability1.) 
Variable name is SArray(vector: STypes(SFloat(re), SFloat(im)): with lenvar returnv (=) ) (probability0.5) 
Variable name is SInt(N) (probability0.5) 
Types are: 
(postbind: SArray(power_quad_acc_output: STypes(SFloat(re), SFloat(im)): with lenvar power_quad_acc_n (=) ) (probability1.) 
SArray(vector: STypes(SFloat(re), SFloat(im)): with lenvar returnv (=) ) (probability0.5) 
SInt(N) (probability0.5) )
(prebind: SArray(vector: STypes(SFloat(re), SFloat(im)): with lenvar returnv (=) ) (probability1.) 
SInt(N) (probability1.) )
Keys in typemap are 
Keys in typemap are returnv, vector, N, power_quad_acc_n, power_quad_acc_output, power_quad_acc_input
Looking at tovar vector, im
Keys in typemap are returnv, vector, N, power_quad_acc_n, power_quad_acc_output, power_quad_acc_input
Looking at tovar vector, re
Keys in typemap are returnv, vector, N, power_quad_acc_n, power_quad_acc_output, power_quad_acc_input
Looking at tovar returnv
Keys in typemap are returnv, vector, N, power_quad_acc_n, power_quad_acc_output, power_quad_acc_input
Looking at tovar power_quad_acc_output, Annon
Keys in typemap are returnv, vector, N, power_quad_acc_n, power_quad_acc_output, power_quad_acc_input
Looking at tovar power_quad_acc_n
Keys in typemap are returnv, vector, N, power_quad_acc_n, power_quad_acc_output, power_quad_acc_input
Looking at tovar power_quad_acc_input, im
Keys in typemap are returnv, vector, N, power_quad_acc_n, power_quad_acc_output, power_quad_acc_input
Looking at tovar power_quad_acc_input, re
Keys in typemap are returnv, vector, N, power_quad_acc_n, power_quad_acc_output, power_quad_acc_input
Looking at tovar vector, im
Keys in typemap are returnv, vector, N, power_quad_acc_n, power_quad_acc_output, power_quad_acc_input
Looking at tovar vector, re
Keys in typemap are returnv, vector, N, power_quad_acc_n, power_quad_acc_output, power_quad_acc_input
Looking at tovar returnv
Keys in typemap are returnv, vector, N, power_quad_acc_n, power_quad_acc_output, power_quad_acc_input
Looking at tovar power_quad_acc_output, Annon
Keys in typemap are returnv, vector, N, power_quad_acc_n, power_quad_acc_output, power_quad_acc_input
Looking at tovar power_quad_acc_n
Keys in typemap are returnv, vector, N, power_quad_acc_n, power_quad_acc_output, power_quad_acc_input
Looking at tovar power_quad_acc_input, im
Keys in typemap are returnv, vector, N, power_quad_acc_n, power_quad_acc_output, power_quad_acc_input
Looking at tovar power_quad_acc_input, re
Keys in typemap are returnv, vector, N, power_quad_acc_n, power_quad_acc_output, power_quad_acc_input
Looking at tovar vector, im
Keys in typemap are returnv, vector, N, power_quad_acc_n, power_quad_acc_output, power_quad_acc_input
Looking at tovar vector, re
Keys in typemap are returnv, vector, N, power_quad_acc_n, power_quad_acc_output, power_quad_acc_input
Looking at tovar returnv
Keys in typemap are returnv, vector, N, power_quad_acc_n, power_quad_acc_output, power_quad_acc_input
Looking at tovar power_quad_acc_output, Annon
Keys in typemap are returnv, vector, N, power_quad_acc_n, power_quad_acc_output, power_quad_acc_input
Looking at tovar power_quad_acc_n
Keys in typemap are returnv, vector, N, power_quad_acc_n, power_quad_acc_output, power_quad_acc_input
Looking at tovar power_quad_acc_input, im
Keys in typemap are returnv, vector, N, power_quad_acc_n, power_quad_acc_output, power_quad_acc_input
Looking at tovar power_quad_acc_input, re
Keys in typemap are returnv, vector, N, power_quad_acc_n, power_quad_acc_output, power_quad_acc_input
Looking at tovar vector, im
Keys in typemap are returnv, vector, N, power_quad_acc_n, power_quad_acc_output, power_quad_acc_input
Looking at tovar vector, re
Keys in typemap are returnv, vector, N, power_quad_acc_n, power_quad_acc_output, power_quad_acc_input
Looking at tovar returnv
Keys in typemap are returnv, vector, N, power_quad_acc_n, power_quad_acc_output, power_quad_acc_input
Looking at tovar power_quad_acc_output, Annon
Keys in typemap are returnv, vector, N, power_quad_acc_n, power_quad_acc_output, power_quad_acc_input
Looking at tovar power_quad_acc_n
Keys in typemap are returnv, vector, N, power_quad_acc_n, power_quad_acc_output, power_quad_acc_input
Looking at tovar power_quad_acc_input, im
Keys in typemap are returnv, vector, N, power_quad_acc_n, power_quad_acc_output, power_quad_acc_input
Looking at tovar power_quad_acc_input, re
Keys in typemap are returnv, vector, N, power_quad_acc_n, power_quad_acc_output, power_quad_acc_input
Looking at tovar vector, im
Keys in typemap are returnv, vector, N, power_quad_acc_n, power_quad_acc_output, power_quad_acc_input
Looking at tovar vector, re
Keys in typemap are returnv, vector, N, power_quad_acc_n, power_quad_acc_output, power_quad_acc_input
Looking at tovar returnv
Keys in typemap are returnv, vector, N, power_quad_acc_n, power_quad_acc_output, power_quad_acc_input
Looking at tovar power_quad_acc_output, Annon
Keys in typemap are returnv, vector, N, power_quad_acc_n, power_quad_acc_output, power_quad_acc_input
Looking at tovar power_quad_acc_n
Keys in typemap are returnv, vector, N, power_quad_acc_n, power_quad_acc_output, power_quad_acc_input
Looking at tovar power_quad_acc_input, im
Keys in typemap are returnv, vector, N, power_quad_acc_n, power_quad_acc_output, power_quad_acc_input
Looking at tovar power_quad_acc_input, re
Keys in typemap are returnv, vector, N, power_quad_acc_n, power_quad_acc_output, power_quad_acc_input
Looking at tovar vector, im
Keys in typemap are returnv, vector, N, power_quad_acc_n, power_quad_acc_output, power_quad_acc_input
Looking at tovar vector, re
Keys in typemap are returnv, vector, N, power_quad_acc_n, power_quad_acc_output, power_quad_acc_input
Looking at tovar returnv
Keys in typemap are returnv, vector, N, power_quad_acc_n, power_quad_acc_output, power_quad_acc_input
Looking at tovar power_quad_acc_output, Annon
Keys in typemap are returnv, vector, N, power_quad_acc_n, power_quad_acc_output, power_quad_acc_input
Looking at tovar power_quad_acc_n
Keys in typemap are returnv, vector, N, power_quad_acc_n, power_quad_acc_output, power_quad_acc_input
Looking at tovar power_quad_acc_input, im
Keys in typemap are returnv, vector, N, power_quad_acc_n, power_quad_acc_output, power_quad_acc_input
Looking at tovar power_quad_acc_input, re
Keys in typemap are returnv, vector, N, power_quad_acc_n, power_quad_acc_output, power_quad_acc_input
Looking at tovar vector, im
Keys in typemap are returnv, vector, N, power_quad_acc_n, power_quad_acc_output, power_quad_acc_input
Looking at tovar vector, re
Keys in typemap are returnv, vector, N, power_quad_acc_n, power_quad_acc_output, power_quad_acc_input
Looking at tovar returnv
Keys in typemap are returnv, vector, N, power_quad_acc_n, power_quad_acc_output, power_quad_acc_input
Looking at tovar power_quad_acc_output, Annon
Keys in typemap are returnv, vector, N, power_quad_acc_n, power_quad_acc_output, power_quad_acc_input
Looking at tovar power_quad_acc_n
Keys in typemap are returnv, vector, N, power_quad_acc_n, power_quad_acc_output, power_quad_acc_input
Looking at tovar power_quad_acc_input, im
Keys in typemap are returnv, vector, N, power_quad_acc_n, power_quad_acc_output, power_quad_acc_input
Looking at tovar power_quad_acc_input, re
Keys in typemap are returnv, vector, N, power_quad_acc_n, power_quad_acc_output, power_quad_acc_input
Looking at tovar vector, im
Keys in typemap are returnv, vector, N, power_quad_acc_n, power_quad_acc_output, power_quad_acc_input
Looking at tovar vector, re
Keys in typemap are returnv, vector, N, power_quad_acc_n, power_quad_acc_output, power_quad_acc_input
Looking at tovar returnv
Keys in typemap are returnv, vector, N, power_quad_acc_n, power_quad_acc_output, power_quad_acc_input
Looking at tovar power_quad_acc_output, Annon
Keys in typemap are returnv, vector, N, power_quad_acc_n, power_quad_acc_output, power_quad_acc_input
Looking at tovar power_quad_acc_n
Keys in typemap are returnv, vector, N, power_quad_acc_n, power_quad_acc_output, power_quad_acc_input
Looking at tovar power_quad_acc_input, im
Keys in typemap are returnv, vector, N, power_quad_acc_n, power_quad_acc_output, power_quad_acc_input
Looking at tovar power_quad_acc_input, re
Keys in typemap are returnv, vector, N, power_quad_acc_n, power_quad_acc_output, power_quad_acc_input
Looking at tovar vector, im
Keys in typemap are returnv, vector, N, power_quad_acc_n, power_quad_acc_output, power_quad_acc_input
Looking at tovar vector, re
Keys in typemap are returnv, vector, N, power_quad_acc_n, power_quad_acc_output, power_quad_acc_input
Looking at tovar returnv
Keys in typemap are returnv, vector, N, power_quad_acc_n, power_quad_acc_output, power_quad_acc_input
Looking at tovar power_quad_acc_output, Annon
Keys in typemap are returnv, vector, N, power_quad_acc_n, power_quad_acc_output, power_quad_acc_input
Looking at tovar power_quad_acc_n
Keys in typemap are returnv, vector, N, power_quad_acc_n, power_quad_acc_output, power_quad_acc_input
Looking at tovar power_quad_acc_input, im
Keys in typemap are returnv, vector, N, power_quad_acc_n, power_quad_acc_output, power_quad_acc_input
Looking at tovar power_quad_acc_input, re
Keys in typemap are returnv, vector, N, power_quad_acc_n, power_quad_acc_output, power_quad_acc_input
Looking at tovar vector, im
Keys in typemap are returnv, vector, N, power_quad_acc_n, power_quad_acc_output, power_quad_acc_input
Looking at tovar vector, re
Keys in typemap are returnv, vector, N, power_quad_acc_n, power_quad_acc_output, power_quad_acc_input
Looking at tovar returnv
Keys in typemap are returnv, vector, N, power_quad_acc_n, power_quad_acc_output, power_quad_acc_input
Looking at tovar power_quad_acc_output, Annon
Keys in typemap are returnv, vector, N, power_quad_acc_n, power_quad_acc_output, power_quad_acc_input
Looking at tovar power_quad_acc_n
Keys in typemap are returnv, vector, N, power_quad_acc_n, power_quad_acc_output, power_quad_acc_input
Looking at tovar power_quad_acc_input, im
Keys in typemap are returnv, vector, N, power_quad_acc_n, power_quad_acc_output, power_quad_acc_input
Looking at tovar power_quad_acc_input, re
Keys in typemap are returnv, vector, N, power_quad_acc_n, power_quad_acc_output, power_quad_acc_input
Looking at tovar vector, im
Keys in typemap are returnv, vector, N, power_quad_acc_n, power_quad_acc_output, power_quad_acc_input
Looking at tovar vector, re
Keys in typemap are returnv, vector, N, power_quad_acc_n, power_quad_acc_output, power_quad_acc_input
Looking at tovar returnv
Keys in typemap are returnv, vector, N, power_quad_acc_n, power_quad_acc_output, power_quad_acc_input
Looking at tovar power_quad_acc_output, Annon
Keys in typemap are returnv, vector, N, power_quad_acc_n, power_quad_acc_output, power_quad_acc_input
Looking at tovar power_quad_acc_n
Keys in typemap are returnv, vector, N, power_quad_acc_n, power_quad_acc_output, power_quad_acc_input
Looking at tovar power_quad_acc_input, im
Keys in typemap are returnv, vector, N, power_quad_acc_n, power_quad_acc_output, power_quad_acc_input
Looking at tovar power_quad_acc_input, re
Keys in typemap are returnv, vector, N, power_quad_acc_n, power_quad_acc_output, power_quad_acc_input
Looking at tovar vector, im
Keys in typemap are returnv, vector, N, power_quad_acc_n, power_quad_acc_output, power_quad_acc_input
Looking at tovar vector, re
Keys in typemap are returnv, vector, N, power_quad_acc_n, power_quad_acc_output, power_quad_acc_input
Looking at tovar returnv
Keys in typemap are returnv, vector, N, power_quad_acc_n, power_quad_acc_output, power_quad_acc_input
Looking at tovar power_quad_acc_output, Annon
Keys in typemap are returnv, vector, N, power_quad_acc_n, power_quad_acc_output, power_quad_acc_input
Looking at tovar power_quad_acc_n
Keys in typemap are returnv, vector, N, power_quad_acc_n, power_quad_acc_output, power_quad_acc_input
Looking at tovar power_quad_acc_input, im
Keys in typemap are returnv, vector, N, power_quad_acc_n, power_quad_acc_output, power_quad_acc_input
Looking at tovar power_quad_acc_input, re
Number of skeletons generated is 12
Getting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeNumber of conversion pairs generated is 12
Looking at GIR GIR: Define power_quad_acc_output
Uses: power_quad_acc_n
Defs: power_quad_acc_output.re,power_quad_acc_output.im
Assigns: 

Has unassed use power_quad_acc_n
Looking at GIR GIR: Define power_quad_acc_n
Uses: 
Defs: power_quad_acc_n
Assigns: 

Looking at GIR GIR: power_quad_acc_n = N
Uses: N
Defs: 
Assigns: power_quad_acc_n

Has undefed ass power_quad_acc_n
Looking at GIR GIR: Define power_quad_acc_input
Uses: power_quad_acc_n
Defs: power_quad_acc_input.re,power_quad_acc_input.im
Assigns: 

Has unassed use power_quad_acc_n
Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i2{
power_quad_acc_input[i2].im = vector[i2].im}
Uses: power_quad_acc_n,vector.im
Defs: 
Assigns: power_quad_acc_input.im

Has unassed use power_quad_acc_n
Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i3{
power_quad_acc_input[i3].re = vector[i3].re}
Uses: power_quad_acc_n,vector.re
Defs: 
Assigns: power_quad_acc_input.re

Has unassed use power_quad_acc_n
Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i4{
vector[i4].im = power_quad_acc_output[i4].im}
Uses: power_quad_acc_n,power_quad_acc_output.im
Defs: 
Assigns: vector.im

Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i5{
vector[i5].re = power_quad_acc_output[i5].re}
Uses: power_quad_acc_n,power_quad_acc_output.re
Defs: 
Assigns: vector.re

Looking at GIR GIR: EscapingDefine(UseMalloc) returnv
Uses: 
Defs: returnv
Assigns: 

Looking at GIR GIR: returnv = 1
Uses: 
Defs: 
Assigns: returnv

Looking at GIR GIR: free power_quad_acc_input
Uses: 
Defs: 
Assigns: 

Looking at GIR GIR: free power_quad_acc_output
Uses: 
Defs: 
Assigns: 

Looking at GIR GIR: free power_quad_acc_n
Uses: 
Defs: 
Assigns: 

Looking at GIR GIR: return returnv
Uses: returnv
Defs: 
Assigns: 

Has unassed use returnv
Looking at GIR GIR: Define power_quad_acc_output
Uses: power_quad_acc_n
Defs: power_quad_acc_output.re,power_quad_acc_output.im
Assigns: 

Has unassed use power_quad_acc_n
Looking at GIR GIR: Define power_quad_acc_n
Uses: 
Defs: power_quad_acc_n
Assigns: 

Looking at GIR GIR: power_quad_acc_n = N
Uses: N
Defs: 
Assigns: power_quad_acc_n

Has undefed ass power_quad_acc_n
Looking at GIR GIR: Define power_quad_acc_input
Uses: power_quad_acc_n
Defs: power_quad_acc_input.re,power_quad_acc_input.im
Assigns: 

Has unassed use power_quad_acc_n
Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i7{
power_quad_acc_input[i7].im = vector[i7].im}
Uses: power_quad_acc_n,vector.im
Defs: 
Assigns: power_quad_acc_input.im

Has unassed use power_quad_acc_n
Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i8{
power_quad_acc_input[i8].re = vector[i8].re}
Uses: power_quad_acc_n,vector.re
Defs: 
Assigns: power_quad_acc_input.re

Has unassed use power_quad_acc_n
Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i9{
vector[i9].im = power_quad_acc_output[i9].re}
Uses: power_quad_acc_n,power_quad_acc_output.re
Defs: 
Assigns: vector.im

Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i10{
vector[i10].re = power_quad_acc_output[i10].im}
Uses: power_quad_acc_n,power_quad_acc_output.im
Defs: 
Assigns: vector.re

Looking at GIR GIR: EscapingDefine(UseMalloc) returnv
Uses: 
Defs: returnv
Assigns: 

Looking at GIR GIR: returnv = 1
Uses: 
Defs: 
Assigns: returnv

Looking at GIR GIR: free power_quad_acc_input
Uses: 
Defs: 
Assigns: 

Looking at GIR GIR: free power_quad_acc_output
Uses: 
Defs: 
Assigns: 

Looking at GIR GIR: free power_quad_acc_n
Uses: 
Defs: 
Assigns: 

Looking at GIR GIR: return returnv
Uses: returnv
Defs: 
Assigns: 

Has unassed use returnv
Looking at GIR GIR: Define power_quad_acc_output
Uses: power_quad_acc_n
Defs: power_quad_acc_output.re,power_quad_acc_output.im
Assigns: 

Has unassed use power_quad_acc_n
Looking at GIR GIR: Define power_quad_acc_n
Uses: 
Defs: power_quad_acc_n
Assigns: 

Looking at GIR GIR: power_quad_acc_n = N
Uses: N
Defs: 
Assigns: power_quad_acc_n

Has undefed ass power_quad_acc_n
Looking at GIR GIR: Define power_quad_acc_input
Uses: power_quad_acc_n
Defs: power_quad_acc_input.re,power_quad_acc_input.im
Assigns: 

Has unassed use power_quad_acc_n
Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i12{
power_quad_acc_input[i12].im = vector[i12].im}
Uses: power_quad_acc_n,vector.im
Defs: 
Assigns: power_quad_acc_input.im

Has unassed use power_quad_acc_n
Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i13{
power_quad_acc_input[i13].re = vector[i13].re}
Uses: power_quad_acc_n,vector.re
Defs: 
Assigns: power_quad_acc_input.re

Has unassed use power_quad_acc_n
Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i14{
vector[i14].im = power_quad_acc_output[i14].im}
Uses: power_quad_acc_n,power_quad_acc_output.im
Defs: 
Assigns: vector.im

Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i15{
vector[i15].re = power_quad_acc_output[i15].re}
Uses: power_quad_acc_n,power_quad_acc_output.re
Defs: 
Assigns: vector.re

Looking at GIR GIR: EscapingDefine(UseMalloc) returnv
Uses: 
Defs: returnv
Assigns: 

Looking at GIR GIR: returnv = 0
Uses: 
Defs: 
Assigns: returnv

Looking at GIR GIR: free power_quad_acc_input
Uses: 
Defs: 
Assigns: 

Looking at GIR GIR: free power_quad_acc_output
Uses: 
Defs: 
Assigns: 

Looking at GIR GIR: free power_quad_acc_n
Uses: 
Defs: 
Assigns: 

Looking at GIR GIR: return returnv
Uses: returnv
Defs: 
Assigns: 

Has unassed use returnv
Looking at GIR GIR: Define power_quad_acc_output
Uses: power_quad_acc_n
Defs: power_quad_acc_output.re,power_quad_acc_output.im
Assigns: 

Has unassed use power_quad_acc_n
Looking at GIR GIR: Define power_quad_acc_n
Uses: 
Defs: power_quad_acc_n
Assigns: 

Looking at GIR GIR: power_quad_acc_n = N
Uses: N
Defs: 
Assigns: power_quad_acc_n

Has undefed ass power_quad_acc_n
Looking at GIR GIR: Define power_quad_acc_input
Uses: power_quad_acc_n
Defs: power_quad_acc_input.re,power_quad_acc_input.im
Assigns: 

Has unassed use power_quad_acc_n
Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i17{
power_quad_acc_input[i17].im = vector[i17].im}
Uses: power_quad_acc_n,vector.im
Defs: 
Assigns: power_quad_acc_input.im

Has unassed use power_quad_acc_n
Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i18{
power_quad_acc_input[i18].re = vector[i18].re}
Uses: power_quad_acc_n,vector.re
Defs: 
Assigns: power_quad_acc_input.re

Has unassed use power_quad_acc_n
Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i19{
vector[i19].im = power_quad_acc_output[i19].re}
Uses: power_quad_acc_n,power_quad_acc_output.re
Defs: 
Assigns: vector.im

Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i20{
vector[i20].re = power_quad_acc_output[i20].im}
Uses: power_quad_acc_n,power_quad_acc_output.im
Defs: 
Assigns: vector.re

Looking at GIR GIR: EscapingDefine(UseMalloc) returnv
Uses: 
Defs: returnv
Assigns: 

Looking at GIR GIR: returnv = 0
Uses: 
Defs: 
Assigns: returnv

Looking at GIR GIR: free power_quad_acc_input
Uses: 
Defs: 
Assigns: 

Looking at GIR GIR: free power_quad_acc_output
Uses: 
Defs: 
Assigns: 

Looking at GIR GIR: free power_quad_acc_n
Uses: 
Defs: 
Assigns: 

Looking at GIR GIR: return returnv
Uses: returnv
Defs: 
Assigns: 

Has unassed use returnv
Looking at GIR GIR: Define power_quad_acc_output
Uses: power_quad_acc_n
Defs: power_quad_acc_output.re,power_quad_acc_output.im
Assigns: 

Has unassed use power_quad_acc_n
Looking at GIR GIR: Define power_quad_acc_n
Uses: 
Defs: power_quad_acc_n
Assigns: 

Looking at GIR GIR: power_quad_acc_n = N
Uses: N
Defs: 
Assigns: power_quad_acc_n

Has undefed ass power_quad_acc_n
Looking at GIR GIR: Define power_quad_acc_input
Uses: power_quad_acc_n
Defs: power_quad_acc_input.re,power_quad_acc_input.im
Assigns: 

Has unassed use power_quad_acc_n
Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i22{
power_quad_acc_input[i22].im = vector[i22].im}
Uses: power_quad_acc_n,vector.im
Defs: 
Assigns: power_quad_acc_input.im

Has unassed use power_quad_acc_n
Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i23{
power_quad_acc_input[i23].re = vector[i23].re}
Uses: power_quad_acc_n,vector.re
Defs: 
Assigns: power_quad_acc_input.re

Has unassed use power_quad_acc_n
Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i24{
vector[i24].im = power_quad_acc_output[i24].im}
Uses: power_quad_acc_n,power_quad_acc_output.im
Defs: 
Assigns: vector.im

Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i25{
vector[i25].re = power_quad_acc_output[i25].re}
Uses: power_quad_acc_n,power_quad_acc_output.re
Defs: 
Assigns: vector.re

Looking at GIR GIR: EscapingDefine(UseMalloc) returnv
Uses: 
Defs: returnv
Assigns: 

Looking at GIR GIR: returnv = -1
Uses: 
Defs: 
Assigns: returnv

Looking at GIR GIR: free power_quad_acc_input
Uses: 
Defs: 
Assigns: 

Looking at GIR GIR: free power_quad_acc_output
Uses: 
Defs: 
Assigns: 

Looking at GIR GIR: free power_quad_acc_n
Uses: 
Defs: 
Assigns: 

Looking at GIR GIR: return returnv
Uses: returnv
Defs: 
Assigns: 

Has unassed use returnv
Looking at GIR GIR: Define power_quad_acc_output
Uses: power_quad_acc_n
Defs: power_quad_acc_output.re,power_quad_acc_output.im
Assigns: 

Has unassed use power_quad_acc_n
Looking at GIR GIR: Define power_quad_acc_n
Uses: 
Defs: power_quad_acc_n
Assigns: 

Looking at GIR GIR: power_quad_acc_n = N
Uses: N
Defs: 
Assigns: power_quad_acc_n

Has undefed ass power_quad_acc_n
Looking at GIR GIR: Define power_quad_acc_input
Uses: power_quad_acc_n
Defs: power_quad_acc_input.re,power_quad_acc_input.im
Assigns: 

Has unassed use power_quad_acc_n
Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i27{
power_quad_acc_input[i27].im = vector[i27].im}
Uses: power_quad_acc_n,vector.im
Defs: 
Assigns: power_quad_acc_input.im

Has unassed use power_quad_acc_n
Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i28{
power_quad_acc_input[i28].re = vector[i28].re}
Uses: power_quad_acc_n,vector.re
Defs: 
Assigns: power_quad_acc_input.re

Has unassed use power_quad_acc_n
Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i29{
vector[i29].im = power_quad_acc_output[i29].re}
Uses: power_quad_acc_n,power_quad_acc_output.re
Defs: 
Assigns: vector.im

Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i30{
vector[i30].re = power_quad_acc_output[i30].im}
Uses: power_quad_acc_n,power_quad_acc_output.im
Defs: 
Assigns: vector.re

Looking at GIR GIR: EscapingDefine(UseMalloc) returnv
Uses: 
Defs: returnv
Assigns: 

Looking at GIR GIR: returnv = -1
Uses: 
Defs: 
Assigns: returnv

Looking at GIR GIR: free power_quad_acc_input
Uses: 
Defs: 
Assigns: 

Looking at GIR GIR: free power_quad_acc_output
Uses: 
Defs: 
Assigns: 

Looking at GIR GIR: free power_quad_acc_n
Uses: 
Defs: 
Assigns: 

Looking at GIR GIR: return returnv
Uses: returnv
Defs: 
Assigns: 

Has unassed use returnv
Looking at GIR GIR: Define power_quad_acc_output
Uses: power_quad_acc_n
Defs: power_quad_acc_output.re,power_quad_acc_output.im
Assigns: 

Has unassed use power_quad_acc_n
Looking at GIR GIR: Define power_quad_acc_n
Uses: 
Defs: power_quad_acc_n
Assigns: 

Looking at GIR GIR: power_quad_acc_n = N
Uses: N
Defs: 
Assigns: power_quad_acc_n

Has undefed ass power_quad_acc_n
Looking at GIR GIR: Define power_quad_acc_input
Uses: power_quad_acc_n
Defs: power_quad_acc_input.re,power_quad_acc_input.im
Assigns: 

Has unassed use power_quad_acc_n
Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i32{
power_quad_acc_input[i32].im = vector[i32].re}
Uses: power_quad_acc_n,vector.re
Defs: 
Assigns: power_quad_acc_input.im

Has unassed use power_quad_acc_n
Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i33{
power_quad_acc_input[i33].re = vector[i33].im}
Uses: power_quad_acc_n,vector.im
Defs: 
Assigns: power_quad_acc_input.re

Has unassed use power_quad_acc_n
Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i34{
vector[i34].im = power_quad_acc_output[i34].im}
Uses: power_quad_acc_n,power_quad_acc_output.im
Defs: 
Assigns: vector.im

Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i35{
vector[i35].re = power_quad_acc_output[i35].re}
Uses: power_quad_acc_n,power_quad_acc_output.re
Defs: 
Assigns: vector.re

Looking at GIR GIR: EscapingDefine(UseMalloc) returnv
Uses: 
Defs: returnv
Assigns: 

Looking at GIR GIR: returnv = 1
Uses: 
Defs: 
Assigns: returnv

Looking at GIR GIR: free power_quad_acc_input
Uses: 
Defs: 
Assigns: 

Looking at GIR GIR: free power_quad_acc_output
Uses: 
Defs: 
Assigns: 

Looking at GIR GIR: free power_quad_acc_n
Uses: 
Defs: 
Assigns: 

Looking at GIR GIR: return returnv
Uses: returnv
Defs: 
Assigns: 

Has unassed use returnv
Looking at GIR GIR: Define power_quad_acc_output
Uses: power_quad_acc_n
Defs: power_quad_acc_output.re,power_quad_acc_output.im
Assigns: 

Has unassed use power_quad_acc_n
Looking at GIR GIR: Define power_quad_acc_n
Uses: 
Defs: power_quad_acc_n
Assigns: 

Looking at GIR GIR: power_quad_acc_n = N
Uses: N
Defs: 
Assigns: power_quad_acc_n

Has undefed ass power_quad_acc_n
Looking at GIR GIR: Define power_quad_acc_input
Uses: power_quad_acc_n
Defs: power_quad_acc_input.re,power_quad_acc_input.im
Assigns: 

Has unassed use power_quad_acc_n
Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i37{
power_quad_acc_input[i37].im = vector[i37].re}
Uses: power_quad_acc_n,vector.re
Defs: 
Assigns: power_quad_acc_input.im

Has unassed use power_quad_acc_n
Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i38{
power_quad_acc_input[i38].re = vector[i38].im}
Uses: power_quad_acc_n,vector.im
Defs: 
Assigns: power_quad_acc_input.re

Has unassed use power_quad_acc_n
Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i39{
vector[i39].im = power_quad_acc_output[i39].re}
Uses: power_quad_acc_n,power_quad_acc_output.re
Defs: 
Assigns: vector.im

Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i40{
vector[i40].re = power_quad_acc_output[i40].im}
Uses: power_quad_acc_n,power_quad_acc_output.im
Defs: 
Assigns: vector.re

Looking at GIR GIR: EscapingDefine(UseMalloc) returnv
Uses: 
Defs: returnv
Assigns: 

Looking at GIR GIR: returnv = 1
Uses: 
Defs: 
Assigns: returnv

Looking at GIR GIR: free power_quad_acc_input
Uses: 
Defs: 
Assigns: 

Looking at GIR GIR: free power_quad_acc_output
Uses: 
Defs: 
Assigns: 

Looking at GIR GIR: free power_quad_acc_n
Uses: 
Defs: 
Assigns: 

Looking at GIR GIR: return returnv
Uses: returnv
Defs: 
Assigns: 

Has unassed use returnv
Looking at GIR GIR: Define power_quad_acc_output
Uses: power_quad_acc_n
Defs: power_quad_acc_output.re,power_quad_acc_output.im
Assigns: 

Has unassed use power_quad_acc_n
Looking at GIR GIR: Define power_quad_acc_n
Uses: 
Defs: power_quad_acc_n
Assigns: 

Looking at GIR GIR: power_quad_acc_n = N
Uses: N
Defs: 
Assigns: power_quad_acc_n

Has undefed ass power_quad_acc_n
Looking at GIR GIR: Define power_quad_acc_input
Uses: power_quad_acc_n
Defs: power_quad_acc_input.re,power_quad_acc_input.im
Assigns: 

Has unassed use power_quad_acc_n
Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i42{
power_quad_acc_input[i42].im = vector[i42].re}
Uses: power_quad_acc_n,vector.re
Defs: 
Assigns: power_quad_acc_input.im

Has unassed use power_quad_acc_n
Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i43{
power_quad_acc_input[i43].re = vector[i43].im}
Uses: power_quad_acc_n,vector.im
Defs: 
Assigns: power_quad_acc_input.re

Has unassed use power_quad_acc_n
Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i44{
vector[i44].im = power_quad_acc_output[i44].im}
Uses: power_quad_acc_n,power_quad_acc_output.im
Defs: 
Assigns: vector.im

Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i45{
vector[i45].re = power_quad_acc_output[i45].re}
Uses: power_quad_acc_n,power_quad_acc_output.re
Defs: 
Assigns: vector.re

Looking at GIR GIR: EscapingDefine(UseMalloc) returnv
Uses: 
Defs: returnv
Assigns: 

Looking at GIR GIR: returnv = 0
Uses: 
Defs: 
Assigns: returnv

Looking at GIR GIR: free power_quad_acc_input
Uses: 
Defs: 
Assigns: 

Looking at GIR GIR: free power_quad_acc_output
Uses: 
Defs: 
Assigns: 

Looking at GIR GIR: free power_quad_acc_n
Uses: 
Defs: 
Assigns: 

Looking at GIR GIR: return returnv
Uses: returnv
Defs: 
Assigns: 

Has unassed use returnv
Looking at GIR GIR: Define power_quad_acc_output
Uses: power_quad_acc_n
Defs: power_quad_acc_output.re,power_quad_acc_output.im
Assigns: 

Has unassed use power_quad_acc_n
Looking at GIR GIR: Define power_quad_acc_n
Uses: 
Defs: power_quad_acc_n
Assigns: 

Looking at GIR GIR: power_quad_acc_n = N
Uses: N
Defs: 
Assigns: power_quad_acc_n

Has undefed ass power_quad_acc_n
Looking at GIR GIR: Define power_quad_acc_input
Uses: power_quad_acc_n
Defs: power_quad_acc_input.re,power_quad_acc_input.im
Assigns: 

Has unassed use power_quad_acc_n
Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i47{
power_quad_acc_input[i47].im = vector[i47].re}
Uses: power_quad_acc_n,vector.re
Defs: 
Assigns: power_quad_acc_input.im

Has unassed use power_quad_acc_n
Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i48{
power_quad_acc_input[i48].re = vector[i48].im}
Uses: power_quad_acc_n,vector.im
Defs: 
Assigns: power_quad_acc_input.re

Has unassed use power_quad_acc_n
Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i49{
vector[i49].im = power_quad_acc_output[i49].re}
Uses: power_quad_acc_n,power_quad_acc_output.re
Defs: 
Assigns: vector.im

Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i50{
vector[i50].re = power_quad_acc_output[i50].im}
Uses: power_quad_acc_n,power_quad_acc_output.im
Defs: 
Assigns: vector.re

Looking at GIR GIR: EscapingDefine(UseMalloc) returnv
Uses: 
Defs: returnv
Assigns: 

Looking at GIR GIR: returnv = 0
Uses: 
Defs: 
Assigns: returnv

Looking at GIR GIR: free power_quad_acc_input
Uses: 
Defs: 
Assigns: 

Looking at GIR GIR: free power_quad_acc_output
Uses: 
Defs: 
Assigns: 

Looking at GIR GIR: free power_quad_acc_n
Uses: 
Defs: 
Assigns: 

Looking at GIR GIR: return returnv
Uses: returnv
Defs: 
Assigns: 

Has unassed use returnv
Looking at GIR GIR: Define power_quad_acc_output
Uses: power_quad_acc_n
Defs: power_quad_acc_output.re,power_quad_acc_output.im
Assigns: 

Has unassed use power_quad_acc_n
Looking at GIR GIR: Define power_quad_acc_n
Uses: 
Defs: power_quad_acc_n
Assigns: 

Looking at GIR GIR: power_quad_acc_n = N
Uses: N
Defs: 
Assigns: power_quad_acc_n

Has undefed ass power_quad_acc_n
Looking at GIR GIR: Define power_quad_acc_input
Uses: power_quad_acc_n
Defs: power_quad_acc_input.re,power_quad_acc_input.im
Assigns: 

Has unassed use power_quad_acc_n
Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i52{
power_quad_acc_input[i52].im = vector[i52].re}
Uses: power_quad_acc_n,vector.re
Defs: 
Assigns: power_quad_acc_input.im

Has unassed use power_quad_acc_n
Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i53{
power_quad_acc_input[i53].re = vector[i53].im}
Uses: power_quad_acc_n,vector.im
Defs: 
Assigns: power_quad_acc_input.re

Has unassed use power_quad_acc_n
Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i54{
vector[i54].im = power_quad_acc_output[i54].im}
Uses: power_quad_acc_n,power_quad_acc_output.im
Defs: 
Assigns: vector.im

Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i55{
vector[i55].re = power_quad_acc_output[i55].re}
Uses: power_quad_acc_n,power_quad_acc_output.re
Defs: 
Assigns: vector.re

Looking at GIR GIR: EscapingDefine(UseMalloc) returnv
Uses: 
Defs: returnv
Assigns: 

Looking at GIR GIR: returnv = -1
Uses: 
Defs: 
Assigns: returnv

Looking at GIR GIR: free power_quad_acc_input
Uses: 
Defs: 
Assigns: 

Looking at GIR GIR: free power_quad_acc_output
Uses: 
Defs: 
Assigns: 

Looking at GIR GIR: free power_quad_acc_n
Uses: 
Defs: 
Assigns: 

Looking at GIR GIR: return returnv
Uses: returnv
Defs: 
Assigns: 

Has unassed use returnv
Looking at GIR GIR: Define power_quad_acc_output
Uses: power_quad_acc_n
Defs: power_quad_acc_output.re,power_quad_acc_output.im
Assigns: 

Has unassed use power_quad_acc_n
Looking at GIR GIR: Define power_quad_acc_n
Uses: 
Defs: power_quad_acc_n
Assigns: 

Looking at GIR GIR: power_quad_acc_n = N
Uses: N
Defs: 
Assigns: power_quad_acc_n

Has undefed ass power_quad_acc_n
Looking at GIR GIR: Define power_quad_acc_input
Uses: power_quad_acc_n
Defs: power_quad_acc_input.re,power_quad_acc_input.im
Assigns: 

Has unassed use power_quad_acc_n
Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i57{
power_quad_acc_input[i57].im = vector[i57].re}
Uses: power_quad_acc_n,vector.re
Defs: 
Assigns: power_quad_acc_input.im

Has unassed use power_quad_acc_n
Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i58{
power_quad_acc_input[i58].re = vector[i58].im}
Uses: power_quad_acc_n,vector.im
Defs: 
Assigns: power_quad_acc_input.re

Has unassed use power_quad_acc_n
Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i59{
vector[i59].im = power_quad_acc_output[i59].re}
Uses: power_quad_acc_n,power_quad_acc_output.re
Defs: 
Assigns: vector.im

Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i60{
vector[i60].re = power_quad_acc_output[i60].im}
Uses: power_quad_acc_n,power_quad_acc_output.im
Defs: 
Assigns: vector.re

Looking at GIR GIR: EscapingDefine(UseMalloc) returnv
Uses: 
Defs: returnv
Assigns: 

Looking at GIR GIR: returnv = -1
Uses: 
Defs: 
Assigns: returnv

Looking at GIR GIR: free power_quad_acc_input
Uses: 
Defs: 
Assigns: 

Looking at GIR GIR: free power_quad_acc_output
Uses: 
Defs: 
Assigns: 

Looking at GIR GIR: free power_quad_acc_n
Uses: 
Defs: 
Assigns: 

Looking at GIR GIR: return returnv
Uses: returnv
Defs: 
Assigns: 

Has unassed use returnv
Number of programs from these pairs is 12
Doing sub-struct assignment for member re
Doing sub-struct assignment for member im
Context is 
Dim length is power_quad_acc_n
Doing sub-struct assignment for member re
Doing sub-struct assignment for member im
Context is 
Dim length is power_quad_acc_n
Number of codes generated is 1
Number of codes built is 1
Generating tests for the 1 programs
Number of IO tests generated is 1
Time: 0.00028
AccTime: 0
Real responses generated
Warning: Accelerator failed on input (input file synthethizer_temps/io/1//1.json): accelerator bounds should be specified for better performance. 
For executable synthethizer_temps/1_exec, passed cound is 0 of 1 tests (0 are vacuous: luck pass is false) 
Starting post synthesis (1 programs)
===============================================
Working tests are in the source files for executables 
There were 0 working in total
Required compiler flags to build are: libs/clib/fft_synth_lib.co libs/clib/synthesizer.co -Ilibs -fsanitize=address -lfftw3 -lfftw3f
Done!
WARNING: Set --only-test and --skip-build may lead to inconsistent results
(--only-test renumbers executables)
Loading specifications...
Synthesizing...
Starting synthesis!
Generated the dimensions
Have 3 possible annotated typemaps
Looking at intput type array(facc_2xf32_t: with dims 64), with inpname Z
Looking at intput type facc_2xf32_t, with inpname None
Looking at intput type float32, with inpname f32_1
Generated result types SFloat(f32_1)
Looking at intput type float32, with inpname f32_2
Generated result types SFloat(f32_2)
Generated result types STypes(SFloat(f32_1), SFloat(f32_2))
Generated result types SArray(Z: STypes(SFloat(f32_1), SFloat(f32_2)): with lenvar 64)
Looking at intput type array(complex_type: with dims power_quad_acc_n (=) ), with inpname power_quad_acc_input
Looking at intput type complex_type, with inpname None
Looking at intput type float32, with inpname re
Generated result types SFloat(re)
Looking at intput type float32, with inpname im
Generated result types SFloat(im)
Generated result types STypes(SFloat(re), SFloat(im))
Generated result types SArray(power_quad_acc_input: STypes(SFloat(re), SFloat(im)): with lenvar power_quad_acc_n (=) )
Looking at intput type int32, with inpname power_quad_acc_n
Generated result types SInt(power_quad_acc_n)
Looking at intput type array(complex_type: with dims power_quad_acc_n (=) ), with inpname power_quad_acc_output
Looking at intput type complex_type, with inpname None
Looking at intput type float32, with inpname re
Generated result types SFloat(re)
Looking at intput type float32, with inpname im
Generated result types SFloat(im)
Generated result types STypes(SFloat(re), SFloat(im))
Generated result types SArray(power_quad_acc_output: STypes(SFloat(re), SFloat(im)): with lenvar power_quad_acc_n (=) )
Looking at intput type array(facc_2xf32_t: with dims 64), with inpname Z
Looking at intput type facc_2xf32_t, with inpname None
Looking at intput type float32, with inpname f32_1
Generated result types SFloat(f32_1)
Looking at intput type float32, with inpname f32_2
Generated result types SFloat(f32_2)
Generated result types STypes(SFloat(f32_1), SFloat(f32_2))
Generated result types SArray(Z: STypes(SFloat(f32_1), SFloat(f32_2)): with lenvar 64)
Liveout types are SArray(Z: STypes(SFloat(f32_1), SFloat(f32_2)): with lenvar 64)
Looking at intput type array(complex_type: with dims power_quad_acc_n (=) ), with inpname power_quad_acc_output
Looking at intput type complex_type, with inpname None
Looking at intput type float32, with inpname re
Generated result types SFloat(re)
Looking at intput type float32, with inpname im
Generated result types SFloat(im)
Generated result types STypes(SFloat(re), SFloat(im))
Generated result types SArray(power_quad_acc_output: STypes(SFloat(re), SFloat(im)): with lenvar power_quad_acc_n (=) )
Variable name is SArray(Z: STypes(SFloat(f32_1), SFloat(f32_2)): with lenvar 64) (probability1.) 
Got potential dimvars 64
Variable name is SArray(power_quad_acc_output: STypes(SFloat(re), SFloat(im)): with lenvar power_quad_acc_n (=) ) (probability1.) 
Variable name is SArray(Z: STypes(SFloat(f32_1), SFloat(f32_2)): with lenvar 64) (probability0.5) 
Types are: 
(postbind: SArray(power_quad_acc_output: STypes(SFloat(re), SFloat(im)): with lenvar power_quad_acc_n (=) ) (probability1.) 
SArray(Z: STypes(SFloat(f32_1), SFloat(f32_2)): with lenvar 64) (probability0.5) )
(prebind: SArray(Z: STypes(SFloat(f32_1), SFloat(f32_2)): with lenvar 64) (probability1.) )
Keys in typemap are power_quad_acc_output, Z, power_quad_acc_n, power_quad_acc_input
power_quad_acc_output, Z, power_quad_acc_n, power_quad_acc_input
power_quad_acc_output, Z, power_quad_acc_n, power_quad_acc_input
power_quad_acc_output, Z, power_quad_acc_n, power_quad_acc_input
Looking at intput type array(facc_2xf32_t: with dims 128), with inpname Z
Looking at intput type facc_2xf32_t, with inpname None
Looking at intput type float32, with inpname f32_1
Generated result types SFloat(f32_1)
Looking at intput type float32, with inpname f32_2
Generated result types SFloat(f32_2)
Generated result types STypes(SFloat(f32_1), SFloat(f32_2))
Generated result types SArray(Z: STypes(SFloat(f32_1), SFloat(f32_2)): with lenvar 128)
Looking at intput type array(complex_type: with dims power_quad_acc_n (=) ), with inpname power_quad_acc_input
Looking at intput type complex_type, with inpname None
Looking at intput type float32, with inpname re
Generated result types SFloat(re)
Looking at intput type float32, with inpname im
Generated result types SFloat(im)
Generated result types STypes(SFloat(re), SFloat(im))
Generated result types SArray(power_quad_acc_input: STypes(SFloat(re), SFloat(im)): with lenvar power_quad_acc_n (=) )
Looking at intput type int32, with inpname power_quad_acc_n
Generated result types SInt(power_quad_acc_n)
Looking at intput type array(complex_type: with dims power_quad_acc_n (=) ), with inpname power_quad_acc_output
Looking at intput type complex_type, with inpname None
Looking at intput type float32, with inpname re
Generated result types SFloat(re)
Looking at intput type float32, with inpname im
Generated result types SFloat(im)
Generated result types STypes(SFloat(re), SFloat(im))
Generated result types SArray(power_quad_acc_output: STypes(SFloat(re), SFloat(im)): with lenvar power_quad_acc_n (=) )
Looking at intput type array(facc_2xf32_t: with dims 128), with inpname Z
Looking at intput type facc_2xf32_t, with inpname None
Looking at intput type float32, with inpname f32_1
Generated result types SFloat(f32_1)
Looking at intput type float32, with inpname f32_2
Generated result types SFloat(f32_2)
Generated result types STypes(SFloat(f32_1), SFloat(f32_2))
Generated result types SArray(Z: STypes(SFloat(f32_1), SFloat(f32_2)): with lenvar 128)
Liveout types are SArray(Z: STypes(SFloat(f32_1), SFloat(f32_2)): with lenvar 128)
Looking at intput type array(complex_type: with dims power_quad_acc_n (=) ), with inpname power_quad_acc_output
Looking at intput type complex_type, with inpname None
Looking at intput type float32, with inpname re
Generated result types SFloat(re)
Looking at intput type float32, with inpname im
Generated result types SFloat(im)
Generated result types STypes(SFloat(re), SFloat(im))
Generated result types SArray(power_quad_acc_output: STypes(SFloat(re), SFloat(im)): with lenvar power_quad_acc_n (=) )
Variable name is SArray(Z: STypes(SFloat(f32_1), SFloat(f32_2)): with lenvar 128) (probability1.) 
Got potential dimvars 128
Variable name is SArray(power_quad_acc_output: STypes(SFloat(re), SFloat(im)): with lenvar power_quad_acc_n (=) ) (probability1.) 
Variable name is SArray(Z: STypes(SFloat(f32_1), SFloat(f32_2)): with lenvar 128) (probability0.5) 
Types are: 
(postbind: SArray(power_quad_acc_output: STypes(SFloat(re), SFloat(im)): with lenvar power_quad_acc_n (=) ) (probability1.) 
SArray(Z: STypes(SFloat(f32_1), SFloat(f32_2)): with lenvar 128) (probability0.5) )
(prebind: SArray(Z: STypes(SFloat(f32_1), SFloat(f32_2)): with lenvar 128) (probability1.) )
Keys in typemap are power_quad_acc_output, Z, power_quad_acc_n, power_quad_acc_input
power_quad_acc_output, Z, power_quad_acc_n, power_quad_acc_input
power_quad_acc_output, Z, power_quad_acc_n, power_quad_acc_input
power_quad_acc_output, Z, power_quad_acc_n, power_quad_acc_input
power_quad_acc_output, Z, power_quad_acc_n, power_quad_acc_input
power_quad_acc_output, Z, power_quad_acc_n, power_quad_acc_input
power_quad_acc_output, Z, power_quad_acc_n, power_quad_acc_input
power_quad_acc_output, Z, power_quad_acc_n, power_quad_acc_input
Looking at intput type array(float32: with dims 128), with inpname Z
Looking at intput type float32, with inpname None
Generated result types SFloat(Annon)
Generated result types SArray(Z: SFloat(Annon): with lenvar 128)
Looking at intput type array(complex_type: with dims power_quad_acc_n (=) ), with inpname power_quad_acc_input
Looking at intput type complex_type, with inpname None
Looking at intput type float32, with inpname re
Generated result types SFloat(re)
Looking at intput type float32, with inpname im
Generated result types SFloat(im)
Generated result types STypes(SFloat(re), SFloat(im))
Generated result types SArray(power_quad_acc_input: STypes(SFloat(re), SFloat(im)): with lenvar power_quad_acc_n (=) )
Looking at intput type int32, with inpname power_quad_acc_n
Generated result types SInt(power_quad_acc_n)
Looking at intput type array(complex_type: with dims power_quad_acc_n (=) ), with inpname power_quad_acc_output
Looking at intput type complex_type, with inpname None
Looking at intput type float32, with inpname re
Generated result types SFloat(re)
Looking at intput type float32, with inpname im
Generated result types SFloat(im)
Generated result types STypes(SFloat(re), SFloat(im))
Generated result types SArray(power_quad_acc_output: STypes(SFloat(re), SFloat(im)): with lenvar power_quad_acc_n (=) )
Looking at intput type array(float32: with dims 128), with inpname Z
Looking at intput type float32, with inpname None
Generated result types SFloat(Annon)
Generated result types SArray(Z: SFloat(Annon): with lenvar 128)
Liveout types are SArray(Z: SFloat(Annon): with lenvar 128)
Looking at intput type array(complex_type: with dims power_quad_acc_n (=) ), with inpname power_quad_acc_output
Looking at intput type complex_type, with inpname None
Looking at intput type float32, with inpname re
Generated result types SFloat(re)
Looking at intput type float32, with inpname im
Generated result types SFloat(im)
Generated result types STypes(SFloat(re), SFloat(im))
Generated result types SArray(power_quad_acc_output: STypes(SFloat(re), SFloat(im)): with lenvar power_quad_acc_n (=) )
Variable name is SArray(Z: SFloat(Annon): with lenvar 128) (probability1.) 
Got potential dimvars 128
Variable name is SArray(power_quad_acc_output: STypes(SFloat(re), SFloat(im)): with lenvar power_quad_acc_n (=) ) (probability1.) 
Variable name is SArray(Z: SFloat(Annon): with lenvar 128) (probability0.5) 
Types are: 
(postbind: SArray(power_quad_acc_output: STypes(SFloat(re), SFloat(im)): with lenvar power_quad_acc_n (=) ) (probability1.) 
SArray(Z: SFloat(Annon): with lenvar 128) (probability0.5) )
(prebind: SArray(Z: SFloat(Annon): with lenvar 128) (probability1.) )
Keys in typemap are 
Keys in typemap are power_quad_acc_output, Z, power_quad_acc_n, power_quad_acc_input
Looking at tovar Z, f32_2
Keys in typemap are power_quad_acc_output, Z, power_quad_acc_n, power_quad_acc_input
Looking at tovar Z, f32_1
Keys in typemap are power_quad_acc_output, Z, power_quad_acc_n, power_quad_acc_input
Looking at tovar power_quad_acc_output, Annon
Keys in typemap are power_quad_acc_output, Z, power_quad_acc_n, power_quad_acc_input
Looking at tovar power_quad_acc_n
Keys in typemap are power_quad_acc_output, Z, power_quad_acc_n, power_quad_acc_input
Looking at tovar power_quad_acc_input, im
Keys in typemap are power_quad_acc_output, Z, power_quad_acc_n, power_quad_acc_input
Looking at tovar power_quad_acc_input, re
Keys in typemap are power_quad_acc_output, Z, power_quad_acc_n, power_quad_acc_input
Looking at tovar Z, f32_2
Keys in typemap are power_quad_acc_output, Z, power_quad_acc_n, power_quad_acc_input
Looking at tovar Z, f32_1
Keys in typemap are power_quad_acc_output, Z, power_quad_acc_n, power_quad_acc_input
Looking at tovar power_quad_acc_output, Annon
Keys in typemap are power_quad_acc_output, Z, power_quad_acc_n, power_quad_acc_input
Looking at tovar power_quad_acc_n
Keys in typemap are power_quad_acc_output, Z, power_quad_acc_n, power_quad_acc_input
Looking at tovar power_quad_acc_input, im
Keys in typemap are power_quad_acc_output, Z, power_quad_acc_n, power_quad_acc_input
Looking at tovar power_quad_acc_input, re
Keys in typemap are power_quad_acc_output, Z, power_quad_acc_n, power_quad_acc_input
Looking at tovar Z, f32_2
Keys in typemap are power_quad_acc_output, Z, power_quad_acc_n, power_quad_acc_input
Looking at tovar Z, f32_1
Keys in typemap are power_quad_acc_output, Z, power_quad_acc_n, power_quad_acc_input
Looking at tovar power_quad_acc_output, Annon
Keys in typemap are power_quad_acc_output, Z, power_quad_acc_n, power_quad_acc_input
Looking at tovar power_quad_acc_n
Keys in typemap are power_quad_acc_output, Z, power_quad_acc_n, power_quad_acc_input
Looking at tovar power_quad_acc_input, im
Keys in typemap are power_quad_acc_output, Z, power_quad_acc_n, power_quad_acc_input
Looking at tovar power_quad_acc_input, re
Keys in typemap are power_quad_acc_output, Z, power_quad_acc_n, power_quad_acc_input
Looking at tovar Z, f32_2
Keys in typemap are power_quad_acc_output, Z, power_quad_acc_n, power_quad_acc_input
Looking at tovar Z, f32_1
Keys in typemap are power_quad_acc_output, Z, power_quad_acc_n, power_quad_acc_input
Looking at tovar power_quad_acc_output, Annon
Keys in typemap are power_quad_acc_output, Z, power_quad_acc_n, power_quad_acc_input
Looking at tovar power_quad_acc_n
Keys in typemap are power_quad_acc_output, Z, power_quad_acc_n, power_quad_acc_input
Looking at tovar power_quad_acc_input, im
Keys in typemap are power_quad_acc_output, Z, power_quad_acc_n, power_quad_acc_input
Looking at tovar power_quad_acc_input, re
Keys in typemap are power_quad_acc_output, Z, power_quad_acc_n, power_quad_acc_input
Looking at tovar Z, f32_2
Keys in typemap are power_quad_acc_output, Z, power_quad_acc_n, power_quad_acc_input
Looking at tovar Z, f32_1
Keys in typemap are power_quad_acc_output, Z, power_quad_acc_n, power_quad_acc_input
Looking at tovar power_quad_acc_output, Annon
Keys in typemap are power_quad_acc_output, Z, power_quad_acc_n, power_quad_acc_input
Looking at tovar power_quad_acc_n
Keys in typemap are power_quad_acc_output, Z, power_quad_acc_n, power_quad_acc_input
Looking at tovar power_quad_acc_input, im
Keys in typemap are power_quad_acc_output, Z, power_quad_acc_n, power_quad_acc_input
Looking at tovar power_quad_acc_input, re
Keys in typemap are power_quad_acc_output, Z, power_quad_acc_n, power_quad_acc_input
Looking at tovar Z, f32_2
Keys in typemap are power_quad_acc_output, Z, power_quad_acc_n, power_quad_acc_input
Looking at tovar Z, f32_1
Keys in typemap are power_quad_acc_output, Z, power_quad_acc_n, power_quad_acc_input
Looking at tovar power_quad_acc_output, Annon
Keys in typemap are power_quad_acc_output, Z, power_quad_acc_n, power_quad_acc_input
Looking at tovar power_quad_acc_n
Keys in typemap are power_quad_acc_output, Z, power_quad_acc_n, power_quad_acc_input
Looking at tovar power_quad_acc_input, im
Keys in typemap are power_quad_acc_output, Z, power_quad_acc_n, power_quad_acc_input
Looking at tovar power_quad_acc_input, re
Keys in typemap are power_quad_acc_output, Z, power_quad_acc_n, power_quad_acc_input
Looking at tovar Z, f32_2
Keys in typemap are power_quad_acc_output, Z, power_quad_acc_n, power_quad_acc_input
Looking at tovar Z, f32_1
Keys in typemap are power_quad_acc_output, Z, power_quad_acc_n, power_quad_acc_input
Looking at tovar power_quad_acc_output, Annon
Keys in typemap are power_quad_acc_output, Z, power_quad_acc_n, power_quad_acc_input
Looking at tovar power_quad_acc_n
Keys in typemap are power_quad_acc_output, Z, power_quad_acc_n, power_quad_acc_input
Looking at tovar power_quad_acc_input, im
Keys in typemap are power_quad_acc_output, Z, power_quad_acc_n, power_quad_acc_input
Looking at tovar power_quad_acc_input, re
Keys in typemap are power_quad_acc_output, Z, power_quad_acc_n, power_quad_acc_input
Looking at tovar Z, f32_2
Keys in typemap are power_quad_acc_output, Z, power_quad_acc_n, power_quad_acc_input
Looking at tovar Z, f32_1
Keys in typemap are power_quad_acc_output, Z, power_quad_acc_n, power_quad_acc_input
Looking at tovar power_quad_acc_output, Annon
Keys in typemap are power_quad_acc_output, Z, power_quad_acc_n, power_quad_acc_input
Looking at tovar power_quad_acc_n
Keys in typemap are power_quad_acc_output, Z, power_quad_acc_n, power_quad_acc_input
Looking at tovar power_quad_acc_input, im
Keys in typemap are power_quad_acc_output, Z, power_quad_acc_n, power_quad_acc_input
Looking at tovar power_quad_acc_input, re
Keys in typemap are power_quad_acc_output, Z, power_quad_acc_n, power_quad_acc_input
Looking at tovar Z, f32_2
Keys in typemap are power_quad_acc_output, Z, power_quad_acc_n, power_quad_acc_input
Looking at tovar Z, f32_1
Keys in typemap are power_quad_acc_output, Z, power_quad_acc_n, power_quad_acc_input
Looking at tovar power_quad_acc_output, Annon
Keys in typemap are power_quad_acc_output, Z, power_quad_acc_n, power_quad_acc_input
Looking at tovar power_quad_acc_n
Keys in typemap are power_quad_acc_output, Z, power_quad_acc_n, power_quad_acc_input
Looking at tovar power_quad_acc_input, im
Keys in typemap are power_quad_acc_output, Z, power_quad_acc_n, power_quad_acc_input
Looking at tovar power_quad_acc_input, re
Keys in typemap are power_quad_acc_output, Z, power_quad_acc_n, power_quad_acc_input
Looking at tovar Z, f32_2
Keys in typemap are power_quad_acc_output, Z, power_quad_acc_n, power_quad_acc_input
Looking at tovar Z, f32_1
Keys in typemap are power_quad_acc_output, Z, power_quad_acc_n, power_quad_acc_input
Looking at tovar power_quad_acc_output, Annon
Keys in typemap are power_quad_acc_output, Z, power_quad_acc_n, power_quad_acc_input
Looking at tovar power_quad_acc_n
Keys in typemap are power_quad_acc_output, Z, power_quad_acc_n, power_quad_acc_input
Looking at tovar power_quad_acc_input, im
Keys in typemap are power_quad_acc_output, Z, power_quad_acc_n, power_quad_acc_input
Looking at tovar power_quad_acc_input, re
Keys in typemap are power_quad_acc_output, Z, power_quad_acc_n, power_quad_acc_input
Looking at tovar Z, f32_2
Keys in typemap are power_quad_acc_output, Z, power_quad_acc_n, power_quad_acc_input
Looking at tovar Z, f32_1
Keys in typemap are power_quad_acc_output, Z, power_quad_acc_n, power_quad_acc_input
Looking at tovar power_quad_acc_output, Annon
Keys in typemap are power_quad_acc_output, Z, power_quad_acc_n, power_quad_acc_input
Looking at tovar power_quad_acc_n
Keys in typemap are power_quad_acc_output, Z, power_quad_acc_n, power_quad_acc_input
Looking at tovar power_quad_acc_input, im
Keys in typemap are power_quad_acc_output, Z, power_quad_acc_n, power_quad_acc_input
Looking at tovar power_quad_acc_input, re
Keys in typemap are power_quad_acc_output, Z, power_quad_acc_n, power_quad_acc_input
Looking at tovar Z, f32_2
Keys in typemap are power_quad_acc_output, Z, power_quad_acc_n, power_quad_acc_input
Looking at tovar Z, f32_1
Keys in typemap are power_quad_acc_output, Z, power_quad_acc_n, power_quad_acc_input
Looking at tovar power_quad_acc_output, Annon
Keys in typemap are power_quad_acc_output, Z, power_quad_acc_n, power_quad_acc_input
Looking at tovar power_quad_acc_n
Keys in typemap are power_quad_acc_output, Z, power_quad_acc_n, power_quad_acc_input
Looking at tovar power_quad_acc_input, im
Keys in typemap are power_quad_acc_output, Z, power_quad_acc_n, power_quad_acc_input
Looking at tovar power_quad_acc_input, re
Number of skeletons generated is 12
Getting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeNumber of conversion pairs generated is 12
Looking at GIR GIR: Define power_quad_acc_output
Uses: power_quad_acc_n
Defs: power_quad_acc_output.re,power_quad_acc_output.im
Assigns: 

Has unassed use power_quad_acc_n
Looking at GIR GIR: Define power_quad_acc_n
Uses: 
Defs: power_quad_acc_n
Assigns: 

Looking at GIR GIR: power_quad_acc_n = 64
Uses: 
Defs: 
Assigns: power_quad_acc_n

Has undefed ass power_quad_acc_n
Looking at GIR GIR: Define power_quad_acc_input
Uses: power_quad_acc_n
Defs: power_quad_acc_input.re,power_quad_acc_input.im
Assigns: 

Has unassed use power_quad_acc_n
Looking at GIR GIR: LoopUpTo 64 indvar i2{
power_quad_acc_input[i2].im = Z[i2].f32_2}
Uses: Z.f32_2
Defs: 
Assigns: power_quad_acc_input.im

Has undefed ass power_quad_acc_input.im
Looking at GIR GIR: LoopUpTo 64 indvar i3{
power_quad_acc_input[i3].re = Z[i3].f32_1}
Uses: Z.f32_1
Defs: 
Assigns: power_quad_acc_input.re

Has undefed ass power_quad_acc_input.re
Looking at GIR GIR: LoopUpTo 64 indvar i4{
Z[i4].f32_2 = power_quad_acc_output[i4].im}
Uses: power_quad_acc_output.im
Defs: 
Assigns: Z.f32_2

Looking at GIR GIR: LoopUpTo 64 indvar i5{
Z[i5].f32_1 = power_quad_acc_output[i5].re}
Uses: power_quad_acc_output.re
Defs: 
Assigns: Z.f32_1

Looking at GIR GIR: free power_quad_acc_input
Uses: 
Defs: 
Assigns: 

Looking at GIR GIR: free power_quad_acc_output
Uses: 
Defs: 
Assigns: 

Looking at GIR GIR: free power_quad_acc_n
Uses: 
Defs: 
Assigns: 

Looking at GIR GIR: Define power_quad_acc_output
Uses: power_quad_acc_n
Defs: power_quad_acc_output.re,power_quad_acc_output.im
Assigns: 

Has unassed use power_quad_acc_n
Looking at GIR GIR: Define power_quad_acc_n
Uses: 
Defs: power_quad_acc_n
Assigns: 

Looking at GIR GIR: power_quad_acc_n = 64
Uses: 
Defs: 
Assigns: power_quad_acc_n

Has undefed ass power_quad_acc_n
Looking at GIR GIR: Define power_quad_acc_input
Uses: power_quad_acc_n
Defs: power_quad_acc_input.re,power_quad_acc_input.im
Assigns: 

Has unassed use power_quad_acc_n
Looking at GIR GIR: LoopUpTo 64 indvar i7{
power_quad_acc_input[i7].im = Z[i7].f32_2}
Uses: Z.f32_2
Defs: 
Assigns: power_quad_acc_input.im

Has undefed ass power_quad_acc_input.im
Looking at GIR GIR: LoopUpTo 64 indvar i8{
power_quad_acc_input[i8].re = Z[i8].f32_1}
Uses: Z.f32_1
Defs: 
Assigns: power_quad_acc_input.re

Has undefed ass power_quad_acc_input.re
Looking at GIR GIR: LoopUpTo 64 indvar i9{
Z[i9].f32_2 = power_quad_acc_output[i9].re}
Uses: power_quad_acc_output.re
Defs: 
Assigns: Z.f32_2

Looking at GIR GIR: LoopUpTo 64 indvar i10{
Z[i10].f32_1 = power_quad_acc_output[i10].im}
Uses: power_quad_acc_output.im
Defs: 
Assigns: Z.f32_1

Looking at GIR GIR: free power_quad_acc_input
Uses: 
Defs: 
Assigns: 

Looking at GIR GIR: free power_quad_acc_output
Uses: 
Defs: 
Assigns: 

Looking at GIR GIR: free power_quad_acc_n
Uses: 
Defs: 
Assigns: 

Looking at GIR GIR: Define power_quad_acc_output
Uses: power_quad_acc_n
Defs: power_quad_acc_output.re,power_quad_acc_output.im
Assigns: 

Has unassed use power_quad_acc_n
Looking at GIR GIR: Define power_quad_acc_n
Uses: 
Defs: power_quad_acc_n
Assigns: 

Looking at GIR GIR: power_quad_acc_n = 64
Uses: 
Defs: 
Assigns: power_quad_acc_n

Has undefed ass power_quad_acc_n
Looking at GIR GIR: Define power_quad_acc_input
Uses: power_quad_acc_n
Defs: power_quad_acc_input.re,power_quad_acc_input.im
Assigns: 

Has unassed use power_quad_acc_n
Looking at GIR GIR: LoopUpTo 64 indvar i12{
power_quad_acc_input[i12].im = Z[i12].f32_1}
Uses: Z.f32_1
Defs: 
Assigns: power_quad_acc_input.im

Has undefed ass power_quad_acc_input.im
Looking at GIR GIR: LoopUpTo 64 indvar i13{
power_quad_acc_input[i13].re = Z[i13].f32_2}
Uses: Z.f32_2
Defs: 
Assigns: power_quad_acc_input.re

Has undefed ass power_quad_acc_input.re
Looking at GIR GIR: LoopUpTo 64 indvar i14{
Z[i14].f32_2 = power_quad_acc_output[i14].im}
Uses: power_quad_acc_output.im
Defs: 
Assigns: Z.f32_2

Looking at GIR GIR: LoopUpTo 64 indvar i15{
Z[i15].f32_1 = power_quad_acc_output[i15].re}
Uses: power_quad_acc_output.re
Defs: 
Assigns: Z.f32_1

Looking at GIR GIR: free power_quad_acc_input
Uses: 
Defs: 
Assigns: 

Looking at GIR GIR: free power_quad_acc_output
Uses: 
Defs: 
Assigns: 

Looking at GIR GIR: free power_quad_acc_n
Uses: 
Defs: 
Assigns: 

Looking at GIR GIR: Define power_quad_acc_output
Uses: power_quad_acc_n
Defs: power_quad_acc_output.re,power_quad_acc_output.im
Assigns: 

Has unassed use power_quad_acc_n
Looking at GIR GIR: Define power_quad_acc_n
Uses: 
Defs: power_quad_acc_n
Assigns: 

Looking at GIR GIR: power_quad_acc_n = 64
Uses: 
Defs: 
Assigns: power_quad_acc_n

Has undefed ass power_quad_acc_n
Looking at GIR GIR: Define power_quad_acc_input
Uses: power_quad_acc_n
Defs: power_quad_acc_input.re,power_quad_acc_input.im
Assigns: 

Has unassed use power_quad_acc_n
Looking at GIR GIR: LoopUpTo 64 indvar i17{
power_quad_acc_input[i17].im = Z[i17].f32_1}
Uses: Z.f32_1
Defs: 
Assigns: power_quad_acc_input.im

Has undefed ass power_quad_acc_input.im
Looking at GIR GIR: LoopUpTo 64 indvar i18{
power_quad_acc_input[i18].re = Z[i18].f32_2}
Uses: Z.f32_2
Defs: 
Assigns: power_quad_acc_input.re

Has undefed ass power_quad_acc_input.re
Looking at GIR GIR: LoopUpTo 64 indvar i19{
Z[i19].f32_2 = power_quad_acc_output[i19].re}
Uses: power_quad_acc_output.re
Defs: 
Assigns: Z.f32_2

Looking at GIR GIR: LoopUpTo 64 indvar i20{
Z[i20].f32_1 = power_quad_acc_output[i20].im}
Uses: power_quad_acc_output.im
Defs: 
Assigns: Z.f32_1

Looking at GIR GIR: free power_quad_acc_input
Uses: 
Defs: 
Assigns: 

Looking at GIR GIR: free power_quad_acc_output
Uses: 
Defs: 
Assigns: 

Looking at GIR GIR: free power_quad_acc_n
Uses: 
Defs: 
Assigns: 

Looking at GIR GIR: Define power_quad_acc_output
Uses: power_quad_acc_n
Defs: power_quad_acc_output.re,power_quad_acc_output.im
Assigns: 

Has unassed use power_quad_acc_n
Looking at GIR GIR: Define power_quad_acc_n
Uses: 
Defs: power_quad_acc_n
Assigns: 

Looking at GIR GIR: power_quad_acc_n = DivideByX_conversion1(128)
Uses: 
Defs: 
Assigns: power_quad_acc_n

Has undefed ass power_quad_acc_n
Looking at GIR GIR: Define power_quad_acc_input
Uses: power_quad_acc_n
Defs: power_quad_acc_input.re,power_quad_acc_input.im
Assigns: 

Has unassed use power_quad_acc_n
Looking at GIR GIR: LoopUpTo 128 indvar i22{
power_quad_acc_input[i22].im = Z[i22].f32_2}
Uses: Z.f32_2
Defs: 
Assigns: power_quad_acc_input.im

Has undefed ass power_quad_acc_input.im
Looking at GIR GIR: LoopUpTo 128 indvar i23{
power_quad_acc_input[i23].re = Z[i23].f32_1}
Uses: Z.f32_1
Defs: 
Assigns: power_quad_acc_input.re

Has undefed ass power_quad_acc_input.re
Looking at GIR GIR: LoopUpTo 128 indvar i24{
Z[i24].f32_2 = power_quad_acc_output[i24].im}
Uses: power_quad_acc_output.im
Defs: 
Assigns: Z.f32_2

Looking at GIR GIR: LoopUpTo 128 indvar i25{
Z[i25].f32_1 = power_quad_acc_output[i25].re}
Uses: power_quad_acc_output.re
Defs: 
Assigns: Z.f32_1

Looking at GIR GIR: free power_quad_acc_input
Uses: 
Defs: 
Assigns: 

Looking at GIR GIR: free power_quad_acc_output
Uses: 
Defs: 
Assigns: 

Looking at GIR GIR: free power_quad_acc_n
Uses: 
Defs: 
Assigns: 

Looking at GIR GIR: Define power_quad_acc_output
Uses: power_quad_acc_n
Defs: power_quad_acc_output.re,power_quad_acc_output.im
Assigns: 

Has unassed use power_quad_acc_n
Looking at GIR GIR: Define power_quad_acc_n
Uses: 
Defs: power_quad_acc_n
Assigns: 

Looking at GIR GIR: power_quad_acc_n = DivideByX_conversion2(128)
Uses: 
Defs: 
Assigns: power_quad_acc_n

Has undefed ass power_quad_acc_n
Looking at GIR GIR: Define power_quad_acc_input
Uses: power_quad_acc_n
Defs: power_quad_acc_input.re,power_quad_acc_input.im
Assigns: 

Has unassed use power_quad_acc_n
Looking at GIR GIR: LoopUpTo 128 indvar i27{
power_quad_acc_input[i27].im = Z[i27].f32_2}
Uses: Z.f32_2
Defs: 
Assigns: power_quad_acc_input.im

Has undefed ass power_quad_acc_input.im
Looking at GIR GIR: LoopUpTo 128 indvar i28{
power_quad_acc_input[i28].re = Z[i28].f32_1}
Uses: Z.f32_1
Defs: 
Assigns: power_quad_acc_input.re

Has undefed ass power_quad_acc_input.re
Looking at GIR GIR: LoopUpTo 128 indvar i29{
Z[i29].f32_2 = power_quad_acc_output[i29].re}
Uses: power_quad_acc_output.re
Defs: 
Assigns: Z.f32_2

Looking at GIR GIR: LoopUpTo 128 indvar i30{
Z[i30].f32_1 = power_quad_acc_output[i30].im}
Uses: power_quad_acc_output.im
Defs: 
Assigns: Z.f32_1

Looking at GIR GIR: free power_quad_acc_input
Uses: 
Defs: 
Assigns: 

Looking at GIR GIR: free power_quad_acc_output
Uses: 
Defs: 
Assigns: 

Looking at GIR GIR: free power_quad_acc_n
Uses: 
Defs: 
Assigns: 

Looking at GIR GIR: Define power_quad_acc_output
Uses: power_quad_acc_n
Defs: power_quad_acc_output.re,power_quad_acc_output.im
Assigns: 

Has unassed use power_quad_acc_n
Looking at GIR GIR: Define power_quad_acc_n
Uses: 
Defs: power_quad_acc_n
Assigns: 

Looking at GIR GIR: power_quad_acc_n = 128
Uses: 
Defs: 
Assigns: power_quad_acc_n

Has undefed ass power_quad_acc_n
Looking at GIR GIR: Define power_quad_acc_input
Uses: power_quad_acc_n
Defs: power_quad_acc_input.re,power_quad_acc_input.im
Assigns: 

Has unassed use power_quad_acc_n
Looking at GIR GIR: LoopUpTo 128 indvar i32{
power_quad_acc_input[i32].im = Z[i32].f32_2}
Uses: Z.f32_2
Defs: 
Assigns: power_quad_acc_input.im

Has undefed ass power_quad_acc_input.im
Looking at GIR GIR: LoopUpTo 128 indvar i33{
power_quad_acc_input[i33].re = Z[i33].f32_1}
Uses: Z.f32_1
Defs: 
Assigns: power_quad_acc_input.re

Has undefed ass power_quad_acc_input.re
Looking at GIR GIR: LoopUpTo 128 indvar i34{
Z[i34].f32_2 = power_quad_acc_output[i34].im}
Uses: power_quad_acc_output.im
Defs: 
Assigns: Z.f32_2

Looking at GIR GIR: LoopUpTo 128 indvar i35{
Z[i35].f32_1 = power_quad_acc_output[i35].re}
Uses: power_quad_acc_output.re
Defs: 
Assigns: Z.f32_1

Looking at GIR GIR: free power_quad_acc_input
Uses: 
Defs: 
Assigns: 

Looking at GIR GIR: free power_quad_acc_output
Uses: 
Defs: 
Assigns: 

Looking at GIR GIR: free power_quad_acc_n
Uses: 
Defs: 
Assigns: 

Looking at GIR GIR: Define power_quad_acc_output
Uses: power_quad_acc_n
Defs: power_quad_acc_output.re,power_quad_acc_output.im
Assigns: 

Has unassed use power_quad_acc_n
Looking at GIR GIR: Define power_quad_acc_n
Uses: 
Defs: power_quad_acc_n
Assigns: 

Looking at GIR GIR: power_quad_acc_n = 128
Uses: 
Defs: 
Assigns: power_quad_acc_n

Has undefed ass power_quad_acc_n
Looking at GIR GIR: Define power_quad_acc_input
Uses: power_quad_acc_n
Defs: power_quad_acc_input.re,power_quad_acc_input.im
Assigns: 

Has unassed use power_quad_acc_n
Looking at GIR GIR: LoopUpTo 128 indvar i37{
power_quad_acc_input[i37].im = Z[i37].f32_2}
Uses: Z.f32_2
Defs: 
Assigns: power_quad_acc_input.im

Has undefed ass power_quad_acc_input.im
Looking at GIR GIR: LoopUpTo 128 indvar i38{
power_quad_acc_input[i38].re = Z[i38].f32_1}
Uses: Z.f32_1
Defs: 
Assigns: power_quad_acc_input.re

Has undefed ass power_quad_acc_input.re
Looking at GIR GIR: LoopUpTo 128 indvar i39{
Z[i39].f32_2 = power_quad_acc_output[i39].re}
Uses: power_quad_acc_output.re
Defs: 
Assigns: Z.f32_2

Looking at GIR GIR: LoopUpTo 128 indvar i40{
Z[i40].f32_1 = power_quad_acc_output[i40].im}
Uses: power_quad_acc_output.im
Defs: 
Assigns: Z.f32_1

Looking at GIR GIR: free power_quad_acc_input
Uses: 
Defs: 
Assigns: 

Looking at GIR GIR: free power_quad_acc_output
Uses: 
Defs: 
Assigns: 

Looking at GIR GIR: free power_quad_acc_n
Uses: 
Defs: 
Assigns: 

Looking at GIR GIR: Define power_quad_acc_output
Uses: power_quad_acc_n
Defs: power_quad_acc_output.re,power_quad_acc_output.im
Assigns: 

Has unassed use power_quad_acc_n
Looking at GIR GIR: Define power_quad_acc_n
Uses: 
Defs: power_quad_acc_n
Assigns: 

Looking at GIR GIR: power_quad_acc_n = DivideByX_conversion3(128)
Uses: 
Defs: 
Assigns: power_quad_acc_n

Has undefed ass power_quad_acc_n
Looking at GIR GIR: Define power_quad_acc_input
Uses: power_quad_acc_n
Defs: power_quad_acc_input.re,power_quad_acc_input.im
Assigns: 

Has unassed use power_quad_acc_n
Looking at GIR GIR: LoopUpTo 128 indvar i42{
power_quad_acc_input[i42].im = Z[i42].f32_1}
Uses: Z.f32_1
Defs: 
Assigns: power_quad_acc_input.im

Has undefed ass power_quad_acc_input.im
Looking at GIR GIR: LoopUpTo 128 indvar i43{
power_quad_acc_input[i43].re = Z[i43].f32_2}
Uses: Z.f32_2
Defs: 
Assigns: power_quad_acc_input.re

Has undefed ass power_quad_acc_input.re
Looking at GIR GIR: LoopUpTo 128 indvar i44{
Z[i44].f32_2 = power_quad_acc_output[i44].im}
Uses: power_quad_acc_output.im
Defs: 
Assigns: Z.f32_2

Looking at GIR GIR: LoopUpTo 128 indvar i45{
Z[i45].f32_1 = power_quad_acc_output[i45].re}
Uses: power_quad_acc_output.re
Defs: 
Assigns: Z.f32_1

Looking at GIR GIR: free power_quad_acc_input
Uses: 
Defs: 
Assigns: 

Looking at GIR GIR: free power_quad_acc_output
Uses: 
Defs: 
Assigns: 

Looking at GIR GIR: free power_quad_acc_n
Uses: 
Defs: 
Assigns: 

Looking at GIR GIR: Define power_quad_acc_output
Uses: power_quad_acc_n
Defs: power_quad_acc_output.re,power_quad_acc_output.im
Assigns: 

Has unassed use power_quad_acc_n
Looking at GIR GIR: Define power_quad_acc_n
Uses: 
Defs: power_quad_acc_n
Assigns: 

Looking at GIR GIR: power_quad_acc_n = DivideByX_conversion4(128)
Uses: 
Defs: 
Assigns: power_quad_acc_n

Has undefed ass power_quad_acc_n
Looking at GIR GIR: Define power_quad_acc_input
Uses: power_quad_acc_n
Defs: power_quad_acc_input.re,power_quad_acc_input.im
Assigns: 

Has unassed use power_quad_acc_n
Looking at GIR GIR: LoopUpTo 128 indvar i47{
power_quad_acc_input[i47].im = Z[i47].f32_1}
Uses: Z.f32_1
Defs: 
Assigns: power_quad_acc_input.im

Has undefed ass power_quad_acc_input.im
Looking at GIR GIR: LoopUpTo 128 indvar i48{
power_quad_acc_input[i48].re = Z[i48].f32_2}
Uses: Z.f32_2
Defs: 
Assigns: power_quad_acc_input.re

Has undefed ass power_quad_acc_input.re
Looking at GIR GIR: LoopUpTo 128 indvar i49{
Z[i49].f32_2 = power_quad_acc_output[i49].re}
Uses: power_quad_acc_output.re
Defs: 
Assigns: Z.f32_2

Looking at GIR GIR: LoopUpTo 128 indvar i50{
Z[i50].f32_1 = power_quad_acc_output[i50].im}
Uses: power_quad_acc_output.im
Defs: 
Assigns: Z.f32_1

Looking at GIR GIR: free power_quad_acc_input
Uses: 
Defs: 
Assigns: 

Looking at GIR GIR: free power_quad_acc_output
Uses: 
Defs: 
Assigns: 

Looking at GIR GIR: free power_quad_acc_n
Uses: 
Defs: 
Assigns: 

Looking at GIR GIR: Define power_quad_acc_output
Uses: power_quad_acc_n
Defs: power_quad_acc_output.re,power_quad_acc_output.im
Assigns: 

Has unassed use power_quad_acc_n
Looking at GIR GIR: Define power_quad_acc_n
Uses: 
Defs: power_quad_acc_n
Assigns: 

Looking at GIR GIR: power_quad_acc_n = 128
Uses: 
Defs: 
Assigns: power_quad_acc_n

Has undefed ass power_quad_acc_n
Looking at GIR GIR: Define power_quad_acc_input
Uses: power_quad_acc_n
Defs: power_quad_acc_input.re,power_quad_acc_input.im
Assigns: 

Has unassed use power_quad_acc_n
Looking at GIR GIR: LoopUpTo 128 indvar i52{
power_quad_acc_input[i52].im = Z[i52].f32_1}
Uses: Z.f32_1
Defs: 
Assigns: power_quad_acc_input.im

Has undefed ass power_quad_acc_input.im
Looking at GIR GIR: LoopUpTo 128 indvar i53{
power_quad_acc_input[i53].re = Z[i53].f32_2}
Uses: Z.f32_2
Defs: 
Assigns: power_quad_acc_input.re

Has undefed ass power_quad_acc_input.re
Looking at GIR GIR: LoopUpTo 128 indvar i54{
Z[i54].f32_2 = power_quad_acc_output[i54].im}
Uses: power_quad_acc_output.im
Defs: 
Assigns: Z.f32_2

Looking at GIR GIR: LoopUpTo 128 indvar i55{
Z[i55].f32_1 = power_quad_acc_output[i55].re}
Uses: power_quad_acc_output.re
Defs: 
Assigns: Z.f32_1

Looking at GIR GIR: free power_quad_acc_input
Uses: 
Defs: 
Assigns: 

Looking at GIR GIR: free power_quad_acc_output
Uses: 
Defs: 
Assigns: 

Looking at GIR GIR: free power_quad_acc_n
Uses: 
Defs: 
Assigns: 

Looking at GIR GIR: Define power_quad_acc_output
Uses: power_quad_acc_n
Defs: power_quad_acc_output.re,power_quad_acc_output.im
Assigns: 

Has unassed use power_quad_acc_n
Looking at GIR GIR: Define power_quad_acc_n
Uses: 
Defs: power_quad_acc_n
Assigns: 

Looking at GIR GIR: power_quad_acc_n = 128
Uses: 
Defs: 
Assigns: power_quad_acc_n

Has undefed ass power_quad_acc_n
Looking at GIR GIR: Define power_quad_acc_input
Uses: power_quad_acc_n
Defs: power_quad_acc_input.re,power_quad_acc_input.im
Assigns: 

Has unassed use power_quad_acc_n
Looking at GIR GIR: LoopUpTo 128 indvar i57{
power_quad_acc_input[i57].im = Z[i57].f32_1}
Uses: Z.f32_1
Defs: 
Assigns: power_quad_acc_input.im

Has undefed ass power_quad_acc_input.im
Looking at GIR GIR: LoopUpTo 128 indvar i58{
power_quad_acc_input[i58].re = Z[i58].f32_2}
Uses: Z.f32_2
Defs: 
Assigns: power_quad_acc_input.re

Has undefed ass power_quad_acc_input.re
Looking at GIR GIR: LoopUpTo 128 indvar i59{
Z[i59].f32_2 = power_quad_acc_output[i59].re}
Uses: power_quad_acc_output.re
Defs: 
Assigns: Z.f32_2

Looking at GIR GIR: LoopUpTo 128 indvar i60{
Z[i60].f32_1 = power_quad_acc_output[i60].im}
Uses: power_quad_acc_output.im
Defs: 
Assigns: Z.f32_1

Looking at GIR GIR: free power_quad_acc_input
Uses: 
Defs: 
Assigns: 

Looking at GIR GIR: free power_quad_acc_output
Uses: 
Defs: 
Assigns: 

Looking at GIR GIR: free power_quad_acc_n
Uses: 
Defs: 
Assigns: 

Number of programs from these pairs is 12
Doing sub-struct assignment for member re
Doing sub-struct assignment for member im
Context is 
Dim length is power_quad_acc_n
Doing sub-struct assignment for member re
Doing sub-struct assignment for member im
Context is 
Dim length is power_quad_acc_n
Number of codes generated is 1
Number of codes built is 1
Generating tests for the 1 programs
Number of IO tests generated is 1
Time: 3e-06
AccTime: 0
Real responses generated
Warning: Accelerator failed on input (input file synthethizer_temps/io/1//1.json): accelerator bounds should be specified for better performance. 
For executable synthethizer_temps/1_exec, passed cound is 0 of 1 tests (0 are vacuous: luck pass is false) 
Starting post synthesis (1 programs)
===============================================
Working tests are in the source files for executables 
There were 0 working in total
Required compiler flags to build are: libs/clib/fft_synth_lib.co libs/clib/synthesizer.co -Ilibs -fsanitize=address -lfftw3 -lfftw3f
Done!
WARNING: Set --only-test and --skip-build may lead to inconsistent results
(--only-test renumbers executables)
Loading specifications...
Synthesizing...
Starting synthesis!
Generated the dimensions
Have 1 possible annotated typemaps
Looking at intput type array(complex_t: with dims n (=) ), with inpname x
Looking at intput type complex_t, with inpname None
Looking at intput type float32, with inpname real
Generated result types SFloat(real)
Looking at intput type float32, with inpname imag
Generated result types SFloat(imag)
Generated result types STypes(SFloat(real), SFloat(imag))
Generated result types SArray(x: STypes(SFloat(real), SFloat(imag)): with lenvar n (=) )
Looking at intput type int32, with inpname n
Generated result types SInt(n)
Looking at intput type array(complex_type: with dims power_quad_acc_n (=) ), with inpname power_quad_acc_input
Looking at intput type complex_type, with inpname None
Looking at intput type float32, with inpname re
Generated result types SFloat(re)
Looking at intput type float32, with inpname im
Generated result types SFloat(im)
Generated result types STypes(SFloat(re), SFloat(im))
Generated result types SArray(power_quad_acc_input: STypes(SFloat(re), SFloat(im)): with lenvar power_quad_acc_n (=) )
Looking at intput type int32, with inpname power_quad_acc_n
Generated result types SInt(power_quad_acc_n)
Looking at intput type array(complex_type: with dims power_quad_acc_n (=) ), with inpname power_quad_acc_output
Looking at intput type complex_type, with inpname None
Looking at intput type float32, with inpname re
Generated result types SFloat(re)
Looking at intput type float32, with inpname im
Generated result types SFloat(im)
Generated result types STypes(SFloat(re), SFloat(im))
Generated result types SArray(power_quad_acc_output: STypes(SFloat(re), SFloat(im)): with lenvar power_quad_acc_n (=) )
Looking at intput type array(complex_t: with dims n (=) ), with inpname x
Looking at intput type complex_t, with inpname None
Looking at intput type float32, with inpname real
Generated result types SFloat(real)
Looking at intput type float32, with inpname imag
Generated result types SFloat(imag)
Generated result types STypes(SFloat(real), SFloat(imag))
Generated result types SArray(x: STypes(SFloat(real), SFloat(imag)): with lenvar n (=) )
Liveout types are SArray(x: STypes(SFloat(real), SFloat(imag)): with lenvar n (=) )
Looking at intput type array(complex_type: with dims power_quad_acc_n (=) ), with inpname power_quad_acc_output
Looking at intput type complex_type, with inpname None
Looking at intput type float32, with inpname re
Generated result types SFloat(re)
Looking at intput type float32, with inpname im
Generated result types SFloat(im)
Generated result types STypes(SFloat(re), SFloat(im))
Generated result types SArray(power_quad_acc_output: STypes(SFloat(re), SFloat(im)): with lenvar power_quad_acc_n (=) )
Variable name is SArray(x: STypes(SFloat(real), SFloat(imag)): with lenvar n (=) ) (probability1.) 
Variable name is SInt(n) (probability1.) 
Got potential dimvars n (=) 
Variable name is SArray(power_quad_acc_output: STypes(SFloat(re), SFloat(im)): with lenvar power_quad_acc_n (=) ) (probability1.) 
Variable name is SArray(x: STypes(SFloat(real), SFloat(imag)): with lenvar n (=) ) (probability0.5) 
Variable name is SInt(n) (probability0.5) 
Types are: 
(postbind: SArray(power_quad_acc_output: STypes(SFloat(re), SFloat(im)): with lenvar power_quad_acc_n (=) ) (probability1.) 
SArray(x: STypes(SFloat(real), SFloat(imag)): with lenvar n (=) ) (probability0.5) 
SInt(n) (probability0.5) )
(prebind: SArray(x: STypes(SFloat(real), SFloat(imag)): with lenvar n (=) ) (probability1.) 
SInt(n) (probability1.) )
Keys in typemap are power_quad_acc_n, n, x, power_quad_acc_output, power_quad_acc_input
power_quad_acc_n, n, x, power_quad_acc_output, power_quad_acc_input
power_quad_acc_n, n, x, power_quad_acc_output, power_quad_acc_input
power_quad_acc_n, n, x, power_quad_acc_output, power_quad_acc_input
Keys in typemap are power_quad_acc_n, n, x, power_quad_acc_output, power_quad_acc_input
Looking at tovar x, real
Keys in typemap are power_quad_acc_n, n, x, power_quad_acc_output, power_quad_acc_input
Looking at tovar x, imag
Keys in typemap are power_quad_acc_n, n, x, power_quad_acc_output, power_quad_acc_input
Looking at tovar power_quad_acc_output, Annon
Keys in typemap are power_quad_acc_n, n, x, power_quad_acc_output, power_quad_acc_input
Looking at tovar power_quad_acc_n
Keys in typemap are power_quad_acc_n, n, x, power_quad_acc_output, power_quad_acc_input
Looking at tovar power_quad_acc_input, im
Keys in typemap are power_quad_acc_n, n, x, power_quad_acc_output, power_quad_acc_input
Looking at tovar power_quad_acc_input, re
Keys in typemap are power_quad_acc_n, n, x, power_quad_acc_output, power_quad_acc_input
Looking at tovar x, real
Keys in typemap are power_quad_acc_n, n, x, power_quad_acc_output, power_quad_acc_input
Looking at tovar x, imag
Keys in typemap are power_quad_acc_n, n, x, power_quad_acc_output, power_quad_acc_input
Looking at tovar power_quad_acc_output, Annon
Keys in typemap are power_quad_acc_n, n, x, power_quad_acc_output, power_quad_acc_input
Looking at tovar power_quad_acc_n
Keys in typemap are power_quad_acc_n, n, x, power_quad_acc_output, power_quad_acc_input
Looking at tovar power_quad_acc_input, im
Keys in typemap are power_quad_acc_n, n, x, power_quad_acc_output, power_quad_acc_input
Looking at tovar power_quad_acc_input, re
Keys in typemap are power_quad_acc_n, n, x, power_quad_acc_output, power_quad_acc_input
Looking at tovar x, real
Keys in typemap are power_quad_acc_n, n, x, power_quad_acc_output, power_quad_acc_input
Looking at tovar x, imag
Keys in typemap are power_quad_acc_n, n, x, power_quad_acc_output, power_quad_acc_input
Looking at tovar power_quad_acc_output, Annon
Keys in typemap are power_quad_acc_n, n, x, power_quad_acc_output, power_quad_acc_input
Looking at tovar power_quad_acc_n
Keys in typemap are power_quad_acc_n, n, x, power_quad_acc_output, power_quad_acc_input
Looking at tovar power_quad_acc_input, im
Keys in typemap are power_quad_acc_n, n, x, power_quad_acc_output, power_quad_acc_input
Looking at tovar power_quad_acc_input, re
Keys in typemap are power_quad_acc_n, n, x, power_quad_acc_output, power_quad_acc_input
Looking at tovar x, real
Keys in typemap are power_quad_acc_n, n, x, power_quad_acc_output, power_quad_acc_input
Looking at tovar x, imag
Keys in typemap are power_quad_acc_n, n, x, power_quad_acc_output, power_quad_acc_input
Looking at tovar power_quad_acc_output, Annon
Keys in typemap are power_quad_acc_n, n, x, power_quad_acc_output, power_quad_acc_input
Looking at tovar power_quad_acc_n
Keys in typemap are power_quad_acc_n, n, x, power_quad_acc_output, power_quad_acc_input
Looking at tovar power_quad_acc_input, im
Keys in typemap are power_quad_acc_n, n, x, power_quad_acc_output, power_quad_acc_input
Looking at tovar power_quad_acc_input, re
Number of skeletons generated is 4
Getting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeNumber of conversion pairs generated is 4
Looking at GIR GIR: Define power_quad_acc_output
Uses: power_quad_acc_n
Defs: power_quad_acc_output.re,power_quad_acc_output.im
Assigns: 

Has unassed use power_quad_acc_n
Looking at GIR GIR: Define power_quad_acc_n
Uses: 
Defs: power_quad_acc_n
Assigns: 

Looking at GIR GIR: power_quad_acc_n = n
Uses: n
Defs: 
Assigns: power_quad_acc_n

Has undefed ass power_quad_acc_n
Looking at GIR GIR: Define power_quad_acc_input
Uses: power_quad_acc_n
Defs: power_quad_acc_input.re,power_quad_acc_input.im
Assigns: 

Has unassed use power_quad_acc_n
Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i2{
power_quad_acc_input[i2].im = x[i2].imag}
Uses: power_quad_acc_n,x.imag
Defs: 
Assigns: power_quad_acc_input.im

Has unassed use power_quad_acc_n
Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i3{
power_quad_acc_input[i3].re = x[i3].real}
Uses: power_quad_acc_n,x.real
Defs: 
Assigns: power_quad_acc_input.re

Has unassed use power_quad_acc_n
Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i4{
x[i4].real = power_quad_acc_output[i4].im}
Uses: power_quad_acc_n,power_quad_acc_output.im
Defs: 
Assigns: x.real

Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i5{
x[i5].imag = power_quad_acc_output[i5].re}
Uses: power_quad_acc_n,power_quad_acc_output.re
Defs: 
Assigns: x.imag

Looking at GIR GIR: free power_quad_acc_input
Uses: 
Defs: 
Assigns: 

Looking at GIR GIR: free power_quad_acc_output
Uses: 
Defs: 
Assigns: 

Looking at GIR GIR: free power_quad_acc_n
Uses: 
Defs: 
Assigns: 

Looking at GIR GIR: Define power_quad_acc_output
Uses: power_quad_acc_n
Defs: power_quad_acc_output.re,power_quad_acc_output.im
Assigns: 

Has unassed use power_quad_acc_n
Looking at GIR GIR: Define power_quad_acc_n
Uses: 
Defs: power_quad_acc_n
Assigns: 

Looking at GIR GIR: power_quad_acc_n = n
Uses: n
Defs: 
Assigns: power_quad_acc_n

Has undefed ass power_quad_acc_n
Looking at GIR GIR: Define power_quad_acc_input
Uses: power_quad_acc_n
Defs: power_quad_acc_input.re,power_quad_acc_input.im
Assigns: 

Has unassed use power_quad_acc_n
Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i7{
power_quad_acc_input[i7].im = x[i7].imag}
Uses: power_quad_acc_n,x.imag
Defs: 
Assigns: power_quad_acc_input.im

Has unassed use power_quad_acc_n
Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i8{
power_quad_acc_input[i8].re = x[i8].real}
Uses: power_quad_acc_n,x.real
Defs: 
Assigns: power_quad_acc_input.re

Has unassed use power_quad_acc_n
Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i9{
x[i9].real = power_quad_acc_output[i9].re}
Uses: power_quad_acc_n,power_quad_acc_output.re
Defs: 
Assigns: x.real

Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i10{
x[i10].imag = power_quad_acc_output[i10].im}
Uses: power_quad_acc_n,power_quad_acc_output.im
Defs: 
Assigns: x.imag

Looking at GIR GIR: free power_quad_acc_input
Uses: 
Defs: 
Assigns: 

Looking at GIR GIR: free power_quad_acc_output
Uses: 
Defs: 
Assigns: 

Looking at GIR GIR: free power_quad_acc_n
Uses: 
Defs: 
Assigns: 

Looking at GIR GIR: Define power_quad_acc_output
Uses: power_quad_acc_n
Defs: power_quad_acc_output.re,power_quad_acc_output.im
Assigns: 

Has unassed use power_quad_acc_n
Looking at GIR GIR: Define power_quad_acc_n
Uses: 
Defs: power_quad_acc_n
Assigns: 

Looking at GIR GIR: power_quad_acc_n = n
Uses: n
Defs: 
Assigns: power_quad_acc_n

Has undefed ass power_quad_acc_n
Looking at GIR GIR: Define power_quad_acc_input
Uses: power_quad_acc_n
Defs: power_quad_acc_input.re,power_quad_acc_input.im
Assigns: 

Has unassed use power_quad_acc_n
Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i12{
power_quad_acc_input[i12].im = x[i12].real}
Uses: power_quad_acc_n,x.real
Defs: 
Assigns: power_quad_acc_input.im

Has unassed use power_quad_acc_n
Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i13{
power_quad_acc_input[i13].re = x[i13].imag}
Uses: power_quad_acc_n,x.imag
Defs: 
Assigns: power_quad_acc_input.re

Has unassed use power_quad_acc_n
Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i14{
x[i14].real = power_quad_acc_output[i14].im}
Uses: power_quad_acc_n,power_quad_acc_output.im
Defs: 
Assigns: x.real

Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i15{
x[i15].imag = power_quad_acc_output[i15].re}
Uses: power_quad_acc_n,power_quad_acc_output.re
Defs: 
Assigns: x.imag

Looking at GIR GIR: free power_quad_acc_input
Uses: 
Defs: 
Assigns: 

Looking at GIR GIR: free power_quad_acc_output
Uses: 
Defs: 
Assigns: 

Looking at GIR GIR: free power_quad_acc_n
Uses: 
Defs: 
Assigns: 

Looking at GIR GIR: Define power_quad_acc_output
Uses: power_quad_acc_n
Defs: power_quad_acc_output.re,power_quad_acc_output.im
Assigns: 

Has unassed use power_quad_acc_n
Looking at GIR GIR: Define power_quad_acc_n
Uses: 
Defs: power_quad_acc_n
Assigns: 

Looking at GIR GIR: power_quad_acc_n = n
Uses: n
Defs: 
Assigns: power_quad_acc_n

Has undefed ass power_quad_acc_n
Looking at GIR GIR: Define power_quad_acc_input
Uses: power_quad_acc_n
Defs: power_quad_acc_input.re,power_quad_acc_input.im
Assigns: 

Has unassed use power_quad_acc_n
Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i17{
power_quad_acc_input[i17].im = x[i17].real}
Uses: power_quad_acc_n,x.real
Defs: 
Assigns: power_quad_acc_input.im

Has unassed use power_quad_acc_n
Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i18{
power_quad_acc_input[i18].re = x[i18].imag}
Uses: power_quad_acc_n,x.imag
Defs: 
Assigns: power_quad_acc_input.re

Has unassed use power_quad_acc_n
Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i19{
x[i19].real = power_quad_acc_output[i19].re}
Uses: power_quad_acc_n,power_quad_acc_output.re
Defs: 
Assigns: x.real

Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i20{
x[i20].imag = power_quad_acc_output[i20].im}
Uses: power_quad_acc_n,power_quad_acc_output.im
Defs: 
Assigns: x.imag

Looking at GIR GIR: free power_quad_acc_input
Uses: 
Defs: 
Assigns: 

Looking at GIR GIR: free power_quad_acc_output
Uses: 
Defs: 
Assigns: 

Looking at GIR GIR: free power_quad_acc_n
Uses: 
Defs: 
Assigns: 

Number of programs from these pairs is 4
Doing sub-struct assignment for member re
Doing sub-struct assignment for member im
Context is 
Dim length is power_quad_acc_n
Doing sub-struct assignment for member re
Doing sub-struct assignment for member im
Context is 
Dim length is power_quad_acc_n
Number of codes generated is 1
Number of codes built is 1
Generating tests for the 1 programs
Number of IO tests generated is 1
Time: 2.4e-05
AccTime: 0
Real responses generated
Warning: Accelerator failed on input (input file synthethizer_temps/io/1//1.json): accelerator bounds should be specified for better performance. 
For executable synthethizer_temps/1_exec, passed cound is 0 of 1 tests (0 are vacuous: luck pass is false) 
Starting post synthesis (1 programs)
===============================================
Working tests are in the source files for executables 
There were 0 working in total
Required compiler flags to build are: libs/clib/fft_synth_lib.co libs/clib/synthesizer.co -Ilibs -fsanitize=address -lfftw3 -lfftw3f
Done!
WARNING: Set --only-test and --skip-build may lead to inconsistent results
(--only-test renumbers executables)
Loading specifications...
WARNING: Set --only-test and --skip-build may lead to inconsistent results
(--only-test renumbers executables)
Loading specifications...
Synthesizing...
Starting synthesis!
Generated the dimensions
Have 1 possible annotated typemaps
Looking at intput type array(cmplx: with dims n (=) ), with inpname input
Looking at intput type cmplx, with inpname None
Looking at intput type float32, with inpname real
Generated result types SFloat(real)
Looking at intput type float32, with inpname imag
Generated result types SFloat(imag)
Generated result types STypes(SFloat(real), SFloat(imag))
Generated result types SArray(input: STypes(SFloat(real), SFloat(imag)): with lenvar n (=) )
Looking at intput type int32, with inpname n
Generated result types SInt(n)
Looking at intput type array(complex_type: with dims power_quad_acc_n (=) ), with inpname power_quad_acc_input
Looking at intput type complex_type, with inpname None
Looking at intput type float32, with inpname re
Generated result types SFloat(re)
Looking at intput type float32, with inpname im
Generated result types SFloat(im)
Generated result types STypes(SFloat(re), SFloat(im))
Generated result types SArray(power_quad_acc_input: STypes(SFloat(re), SFloat(im)): with lenvar power_quad_acc_n (=) )
Looking at intput type int32, with inpname power_quad_acc_n
Generated result types SInt(power_quad_acc_n)
Looking at intput type array(complex_type: with dims power_quad_acc_n (=) ), with inpname power_quad_acc_output
Looking at intput type complex_type, with inpname None
Looking at intput type float32, with inpname re
Generated result types SFloat(re)
Looking at intput type float32, with inpname im
Generated result types SFloat(im)
Generated result types STypes(SFloat(re), SFloat(im))
Generated result types SArray(power_quad_acc_output: STypes(SFloat(re), SFloat(im)): with lenvar power_quad_acc_n (=) )
Looking at intput type array(cmplx: with dims n (=) ), with inpname output
Looking at intput type cmplx, with inpname None
Looking at intput type float32, with inpname real
Generated result types SFloat(real)
Looking at intput type float32, with inpname imag
Generated result types SFloat(imag)
Generated result types STypes(SFloat(real), SFloat(imag))
Generated result types SArray(output: STypes(SFloat(real), SFloat(imag)): with lenvar n (=) )
Liveout types are SArray(output: STypes(SFloat(real), SFloat(imag)): with lenvar n (=) )
Looking at intput type array(complex_type: with dims power_quad_acc_n (=) ), with inpname power_quad_acc_output
Looking at intput type complex_type, with inpname None
Looking at intput type float32, with inpname re
Generated result types SFloat(re)
Looking at intput type float32, with inpname im
Generated result types SFloat(im)
Generated result types STypes(SFloat(re), SFloat(im))
Generated result types SArray(power_quad_acc_output: STypes(SFloat(re), SFloat(im)): with lenvar power_quad_acc_n (=) )
Variable name is SArray(input: STypes(SFloat(real), SFloat(imag)): with lenvar n (=) ) (probability1.) 
Variable name is SInt(n) (probability1.) 
Got potential dimvars n (=) 
Variable name is SArray(power_quad_acc_output: STypes(SFloat(re), SFloat(im)): with lenvar power_quad_acc_n (=) ) (probability1.) 
Variable name is SArray(input: STypes(SFloat(real), SFloat(imag)): with lenvar n (=) ) (probability0.5) 
Variable name is SInt(n) (probability0.5) 
Types are: 
(postbind: SArray(power_quad_acc_output: STypes(SFloat(re), SFloat(im)): with lenvar power_quad_acc_n (=) ) (probability1.) 
SArray(input: STypes(SFloat(real), SFloat(imag)): with lenvar n (=) ) (probability0.5) 
SInt(n) (probability0.5) )
(prebind: SArray(input: STypes(SFloat(real), SFloat(imag)): with lenvar n (=) ) (probability1.) 
SInt(n) (probability1.) )
Keys in typemap are output, power_quad_acc_n, n, power_quad_acc_output, power_quad_acc_input, input
output, power_quad_acc_n, n, power_quad_acc_output, power_quad_acc_input, input
output, power_quad_acc_n, n, power_quad_acc_output, power_quad_acc_input, input
output, power_quad_acc_n, n, power_quad_acc_output, power_quad_acc_input, input
Keys in typemap are output, power_quad_acc_n, n, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar output, imag
Keys in typemap are output, power_quad_acc_n, n, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar output, real
Keys in typemap are output, power_quad_acc_n, n, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_output, Annon
Keys in typemap are output, power_quad_acc_n, n, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_n
Keys in typemap are output, power_quad_acc_n, n, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_input, im
Keys in typemap are output, power_quad_acc_n, n, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_input, re
Keys in typemap are output, power_quad_acc_n, n, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar output, imag
Keys in typemap are output, power_quad_acc_n, n, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar output, real
Keys in typemap are output, power_quad_acc_n, n, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_output, Annon
Keys in typemap are output, power_quad_acc_n, n, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_n
Keys in typemap are output, power_quad_acc_n, n, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_input, im
Keys in typemap are output, power_quad_acc_n, n, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_input, re
Keys in typemap are output, power_quad_acc_n, n, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar output, imag
Keys in typemap are output, power_quad_acc_n, n, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar output, real
Keys in typemap are output, power_quad_acc_n, n, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_output, Annon
Keys in typemap are output, power_quad_acc_n, n, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_n
Keys in typemap are output, power_quad_acc_n, n, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_input, im
Keys in typemap are output, power_quad_acc_n, n, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_input, re
Keys in typemap are output, power_quad_acc_n, n, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar output, imag
Keys in typemap are output, power_quad_acc_n, n, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar output, real
Keys in typemap are output, power_quad_acc_n, n, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_output, Annon
Keys in typemap are output, power_quad_acc_n, n, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_n
Keys in typemap are output, power_quad_acc_n, n, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_input, im
Keys in typemap are output, power_quad_acc_n, n, power_quad_acc_output, power_quad_acc_input, input
Looking at tovar power_quad_acc_input, re
Number of skeletons generated is 4
Getting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeNumber of conversion pairs generated is 4
Looking at GIR GIR: Define power_quad_acc_output
Uses: power_quad_acc_n
Defs: power_quad_acc_output.re,power_quad_acc_output.im
Assigns: 

Has unassed use power_quad_acc_n
Looking at GIR GIR: Define power_quad_acc_n
Uses: 
Defs: power_quad_acc_n
Assigns: 

Looking at GIR GIR: power_quad_acc_n = n
Uses: n
Defs: 
Assigns: power_quad_acc_n

Has undefed ass power_quad_acc_n
Looking at GIR GIR: Define power_quad_acc_input
Uses: power_quad_acc_n
Defs: power_quad_acc_input.re,power_quad_acc_input.im
Assigns: 

Has unassed use power_quad_acc_n
Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i2{
power_quad_acc_input[i2].im = input[i2].imag}
Uses: power_quad_acc_n,input.imag
Defs: 
Assigns: power_quad_acc_input.im

Has unassed use power_quad_acc_n
Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i3{
power_quad_acc_input[i3].re = input[i3].real}
Uses: power_quad_acc_n,input.real
Defs: 
Assigns: power_quad_acc_input.re

Has unassed use power_quad_acc_n
Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i4{
output[i4].imag = power_quad_acc_output[i4].im}
Uses: power_quad_acc_n,power_quad_acc_output.im
Defs: 
Assigns: output.imag

Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i5{
output[i5].real = power_quad_acc_output[i5].re}
Uses: power_quad_acc_n,power_quad_acc_output.re
Defs: 
Assigns: output.real

Looking at GIR GIR: free power_quad_acc_input
Uses: 
Defs: 
Assigns: 

Looking at GIR GIR: free power_quad_acc_output
Uses: 
Defs: 
Assigns: 

Looking at GIR GIR: free power_quad_acc_n
Uses: 
Defs: 
Assigns: 

Looking at GIR GIR: Define power_quad_acc_output
Uses: power_quad_acc_n
Defs: power_quad_acc_output.re,power_quad_acc_output.im
Assigns: 

Has unassed use power_quad_acc_n
Looking at GIR GIR: Define power_quad_acc_n
Uses: 
Defs: power_quad_acc_n
Assigns: 

Looking at GIR GIR: power_quad_acc_n = n
Uses: n
Defs: 
Assigns: power_quad_acc_n

Has undefed ass power_quad_acc_n
Looking at GIR GIR: Define power_quad_acc_input
Uses: power_quad_acc_n
Defs: power_quad_acc_input.re,power_quad_acc_input.im
Assigns: 

Has unassed use power_quad_acc_n
Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i7{
power_quad_acc_input[i7].im = input[i7].imag}
Uses: power_quad_acc_n,input.imag
Defs: 
Assigns: power_quad_acc_input.im

Has unassed use power_quad_acc_n
Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i8{
power_quad_acc_input[i8].re = input[i8].real}
Uses: power_quad_acc_n,input.real
Defs: 
Assigns: power_quad_acc_input.re

Has unassed use power_quad_acc_n
Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i9{
output[i9].imag = power_quad_acc_output[i9].re}
Uses: power_quad_acc_n,power_quad_acc_output.re
Defs: 
Assigns: output.imag

Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i10{
output[i10].real = power_quad_acc_output[i10].im}
Uses: power_quad_acc_n,power_quad_acc_output.im
Defs: 
Assigns: output.real

Looking at GIR GIR: free power_quad_acc_input
Uses: 
Defs: 
Assigns: 

Looking at GIR GIR: free power_quad_acc_output
Uses: 
Defs: 
Assigns: 

Looking at GIR GIR: free power_quad_acc_n
Uses: 
Defs: 
Assigns: 

Looking at GIR GIR: Define power_quad_acc_output
Uses: power_quad_acc_n
Defs: power_quad_acc_output.re,power_quad_acc_output.im
Assigns: 

Has unassed use power_quad_acc_n
Looking at GIR GIR: Define power_quad_acc_n
Uses: 
Defs: power_quad_acc_n
Assigns: 

Looking at GIR GIR: power_quad_acc_n = n
Uses: n
Defs: 
Assigns: power_quad_acc_n

Has undefed ass power_quad_acc_n
Looking at GIR GIR: Define power_quad_acc_input
Uses: power_quad_acc_n
Defs: power_quad_acc_input.re,power_quad_acc_input.im
Assigns: 

Has unassed use power_quad_acc_n
Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i12{
power_quad_acc_input[i12].im = input[i12].real}
Uses: power_quad_acc_n,input.real
Defs: 
Assigns: power_quad_acc_input.im

Has unassed use power_quad_acc_n
Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i13{
power_quad_acc_input[i13].re = input[i13].imag}
Uses: power_quad_acc_n,input.imag
Defs: 
Assigns: power_quad_acc_input.re

Has unassed use power_quad_acc_n
Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i14{
output[i14].imag = power_quad_acc_output[i14].im}
Uses: power_quad_acc_n,power_quad_acc_output.im
Defs: 
Assigns: output.imag

Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i15{
output[i15].real = power_quad_acc_output[i15].re}
Uses: power_quad_acc_n,power_quad_acc_output.re
Defs: 
Assigns: output.real

Looking at GIR GIR: free power_quad_acc_input
Uses: 
Defs: 
Assigns: 

Looking at GIR GIR: free power_quad_acc_output
Uses: 
Defs: 
Assigns: 

Looking at GIR GIR: free power_quad_acc_n
Uses: 
Defs: 
Assigns: 

Looking at GIR GIR: Define power_quad_acc_output
Uses: power_quad_acc_n
Defs: power_quad_acc_output.re,power_quad_acc_output.im
Assigns: 

Has unassed use power_quad_acc_n
Looking at GIR GIR: Define power_quad_acc_n
Uses: 
Defs: power_quad_acc_n
Assigns: 

Looking at GIR GIR: power_quad_acc_n = n
Uses: n
Defs: 
Assigns: power_quad_acc_n

Has undefed ass power_quad_acc_n
Looking at GIR GIR: Define power_quad_acc_input
Uses: power_quad_acc_n
Defs: power_quad_acc_input.re,power_quad_acc_input.im
Assigns: 

Has unassed use power_quad_acc_n
Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i17{
power_quad_acc_input[i17].im = input[i17].real}
Uses: power_quad_acc_n,input.real
Defs: 
Assigns: power_quad_acc_input.im

Has unassed use power_quad_acc_n
Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i18{
power_quad_acc_input[i18].re = input[i18].imag}
Uses: power_quad_acc_n,input.imag
Defs: 
Assigns: power_quad_acc_input.re

Has unassed use power_quad_acc_n
Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i19{
output[i19].imag = power_quad_acc_output[i19].re}
Uses: power_quad_acc_n,power_quad_acc_output.re
Defs: 
Assigns: output.imag

Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i20{
output[i20].real = power_quad_acc_output[i20].im}
Uses: power_quad_acc_n,power_quad_acc_output.im
Defs: 
Assigns: output.real

Looking at GIR GIR: free power_quad_acc_input
Uses: 
Defs: 
Assigns: 

Looking at GIR GIR: free power_quad_acc_output
Uses: 
Defs: 
Assigns: 

Looking at GIR GIR: free power_quad_acc_n
Uses: 
Defs: 
Assigns: 

Number of programs from these pairs is 4
Doing sub-struct assignment for member re
Doing sub-struct assignment for member im
Context is 
Dim length is power_quad_acc_n
Doing sub-struct assignment for member re
Doing sub-struct assignment for member im
Context is 
Dim length is power_quad_acc_n
Doing sub-struct assignment for member real
Doing sub-struct assignment for member imag
Context is 
Dim length is n
Number of codes generated is 1
Number of codes built is 1
Generating tests for the 1 programs
Number of IO tests generated is 1
Time: 3.9e-05
AccTime: 0
Real responses generated
Warning: Accelerator failed on input (input file synthethizer_temps/io/1//1.json): accelerator bounds should be specified for better performance. 
For executable synthethizer_temps/1_exec, passed cound is 0 of 1 tests (0 are vacuous: luck pass is false) 
Starting post synthesis (1 programs)
===============================================
Working tests are in the source files for executables 
There were 0 working in total
Required compiler flags to build are: libs/clib/fft_synth_lib.co libs/clib/synthesizer.co -Ilibs -fsanitize=address -lfftw3 -lfftw3f
Done!
WARNING: Set --only-test and --skip-build may lead to inconsistent results
(--only-test renumbers executables)
Loading specifications...
Synthesizing...
Starting synthesis!
Generated the dimensions
Have 2 possible annotated typemaps
Looking at intput type array(COMPLEX: with dims N (=) ), with inpname Y
Looking at intput type COMPLEX, with inpname None
Looking at intput type float32, with inpname real
Generated result types SFloat(real)
Looking at intput type float32, with inpname imag
Generated result types SFloat(imag)
Generated result types STypes(SFloat(real), SFloat(imag))
Generated result types SArray(Y: STypes(SFloat(real), SFloat(imag)): with lenvar N (=) )
Looking at intput type int32, with inpname N
Generated result types SInt(N)
Looking at intput type array(complex_type: with dims power_quad_acc_n (=) ), with inpname power_quad_acc_input
Looking at intput type complex_type, with inpname None
Looking at intput type float32, with inpname re
Generated result types SFloat(re)
Looking at intput type float32, with inpname im
Generated result types SFloat(im)
Generated result types STypes(SFloat(re), SFloat(im))
Generated result types SArray(power_quad_acc_input: STypes(SFloat(re), SFloat(im)): with lenvar power_quad_acc_n (=) )
Looking at intput type int32, with inpname power_quad_acc_n
Generated result types SInt(power_quad_acc_n)
Looking at intput type array(complex_type: with dims power_quad_acc_n (=) ), with inpname power_quad_acc_output
Looking at intput type complex_type, with inpname None
Looking at intput type float32, with inpname re
Generated result types SFloat(re)
Looking at intput type float32, with inpname im
Generated result types SFloat(im)
Generated result types STypes(SFloat(re), SFloat(im))
Generated result types SArray(power_quad_acc_output: STypes(SFloat(re), SFloat(im)): with lenvar power_quad_acc_n (=) )
Looking at intput type array(COMPLEX: with dims N (=) ), with inpname Y
Looking at intput type COMPLEX, with inpname None
Looking at intput type float32, with inpname real
Generated result types SFloat(real)
Looking at intput type float32, with inpname imag
Generated result types SFloat(imag)
Generated result types STypes(SFloat(real), SFloat(imag))
Generated result types SArray(Y: STypes(SFloat(real), SFloat(imag)): with lenvar N (=) )
Liveout types are SArray(Y: STypes(SFloat(real), SFloat(imag)): with lenvar N (=) )
Looking at intput type array(complex_type: with dims power_quad_acc_n (=) ), with inpname power_quad_acc_output
Looking at intput type complex_type, with inpname None
Looking at intput type float32, with inpname re
Generated result types SFloat(re)
Looking at intput type float32, with inpname im
Generated result types SFloat(im)
Generated result types STypes(SFloat(re), SFloat(im))
Generated result types SArray(power_quad_acc_output: STypes(SFloat(re), SFloat(im)): with lenvar power_quad_acc_n (=) )
Variable name is SArray(Y: STypes(SFloat(real), SFloat(imag)): with lenvar N (=) ) (probability1.) 
Variable name is SInt(N) (probability1.) 
Got potential dimvars N (=) 
Variable name is SArray(power_quad_acc_output: STypes(SFloat(re), SFloat(im)): with lenvar power_quad_acc_n (=) ) (probability1.) 
Variable name is SArray(Y: STypes(SFloat(real), SFloat(imag)): with lenvar N (=) ) (probability0.5) 
Variable name is SInt(N) (probability0.5) 
Types are: 
(postbind: SArray(power_quad_acc_output: STypes(SFloat(re), SFloat(im)): with lenvar power_quad_acc_n (=) ) (probability1.) 
SArray(Y: STypes(SFloat(real), SFloat(imag)): with lenvar N (=) ) (probability0.5) 
SInt(N) (probability0.5) )
(prebind: SArray(Y: STypes(SFloat(real), SFloat(imag)): with lenvar N (=) ) (probability1.) 
SInt(N) (probability1.) )
Keys in typemap are Y, N, power_quad_acc_n, power_quad_acc_output, power_quad_acc_input
Y, N, power_quad_acc_n, power_quad_acc_output, power_quad_acc_input
Y, N, power_quad_acc_n, power_quad_acc_output, power_quad_acc_input
Y, N, power_quad_acc_n, power_quad_acc_output, power_quad_acc_input
Looking at intput type array(COMPLEX: with dims N (^2) ), with inpname Y
Looking at intput type COMPLEX, with inpname None
Looking at intput type float32, with inpname real
Generated result types SFloat(real)
Looking at intput type float32, with inpname imag
Generated result types SFloat(imag)
Generated result types STypes(SFloat(real), SFloat(imag))
Generated result types SArray(Y: STypes(SFloat(real), SFloat(imag)): with lenvar N (^2) )
Looking at intput type int32, with inpname N
Generated result types SInt(N)
Looking at intput type array(complex_type: with dims power_quad_acc_n (=) ), with inpname power_quad_acc_input
Looking at intput type complex_type, with inpname None
Looking at intput type float32, with inpname re
Generated result types SFloat(re)
Looking at intput type float32, with inpname im
Generated result types SFloat(im)
Generated result types STypes(SFloat(re), SFloat(im))
Generated result types SArray(power_quad_acc_input: STypes(SFloat(re), SFloat(im)): with lenvar power_quad_acc_n (=) )
Looking at intput type int32, with inpname power_quad_acc_n
Generated result types SInt(power_quad_acc_n)
Looking at intput type array(complex_type: with dims power_quad_acc_n (=) ), with inpname power_quad_acc_output
Looking at intput type complex_type, with inpname None
Looking at intput type float32, with inpname re
Generated result types SFloat(re)
Looking at intput type float32, with inpname im
Generated result types SFloat(im)
Generated result types STypes(SFloat(re), SFloat(im))
Generated result types SArray(power_quad_acc_output: STypes(SFloat(re), SFloat(im)): with lenvar power_quad_acc_n (=) )
Looking at intput type array(COMPLEX: with dims N (^2) ), with inpname Y
Looking at intput type COMPLEX, with inpname None
Looking at intput type float32, with inpname real
Generated result types SFloat(real)
Looking at intput type float32, with inpname imag
Generated result types SFloat(imag)
Generated result types STypes(SFloat(real), SFloat(imag))
Generated result types SArray(Y: STypes(SFloat(real), SFloat(imag)): with lenvar N (^2) )
Liveout types are SArray(Y: STypes(SFloat(real), SFloat(imag)): with lenvar N (^2) )
Looking at intput type array(complex_type: with dims power_quad_acc_n (=) ), with inpname power_quad_acc_output
Looking at intput type complex_type, with inpname None
Looking at intput type float32, with inpname re
Generated result types SFloat(re)
Looking at intput type float32, with inpname im
Generated result types SFloat(im)
Generated result types STypes(SFloat(re), SFloat(im))
Generated result types SArray(power_quad_acc_output: STypes(SFloat(re), SFloat(im)): with lenvar power_quad_acc_n (=) )
Variable name is SArray(Y: STypes(SFloat(real), SFloat(imag)): with lenvar N (^2) ) (probability1.) 
Variable name is SInt(N) (probability1.) 
Got potential dimvars N (^2) 
Variable name is SArray(power_quad_acc_output: STypes(SFloat(re), SFloat(im)): with lenvar power_quad_acc_n (=) ) (probability1.) 
Variable name is SArray(Y: STypes(SFloat(real), SFloat(imag)): with lenvar N (^2) ) (probability0.5) 
Variable name is SInt(N) (probability0.5) 
Types are: 
(postbind: SArray(power_quad_acc_output: STypes(SFloat(re), SFloat(im)): with lenvar power_quad_acc_n (=) ) (probability1.) 
SArray(Y: STypes(SFloat(real), SFloat(imag)): with lenvar N (^2) ) (probability0.5) 
SInt(N) (probability0.5) )
(prebind: SArray(Y: STypes(SFloat(real), SFloat(imag)): with lenvar N (^2) ) (probability1.) 
SInt(N) (probability1.) )
Keys in typemap are 
Keys in typemap are Y, N, power_quad_acc_n, power_quad_acc_output, power_quad_acc_input
Looking at tovar Y, real
Keys in typemap are Y, N, power_quad_acc_n, power_quad_acc_output, power_quad_acc_input
Looking at tovar Y, imag
Keys in typemap are Y, N, power_quad_acc_n, power_quad_acc_output, power_quad_acc_input
Looking at tovar power_quad_acc_output, Annon
Keys in typemap are Y, N, power_quad_acc_n, power_quad_acc_output, power_quad_acc_input
Looking at tovar power_quad_acc_n
Keys in typemap are Y, N, power_quad_acc_n, power_quad_acc_output, power_quad_acc_input
Looking at tovar power_quad_acc_input, im
Keys in typemap are Y, N, power_quad_acc_n, power_quad_acc_output, power_quad_acc_input
Looking at tovar power_quad_acc_input, re
Keys in typemap are Y, N, power_quad_acc_n, power_quad_acc_output, power_quad_acc_input
Looking at tovar Y, real
Keys in typemap are Y, N, power_quad_acc_n, power_quad_acc_output, power_quad_acc_input
Looking at tovar Y, imag
Keys in typemap are Y, N, power_quad_acc_n, power_quad_acc_output, power_quad_acc_input
Looking at tovar power_quad_acc_output, Annon
Keys in typemap are Y, N, power_quad_acc_n, power_quad_acc_output, power_quad_acc_input
Looking at tovar power_quad_acc_n
Keys in typemap are Y, N, power_quad_acc_n, power_quad_acc_output, power_quad_acc_input
Looking at tovar power_quad_acc_input, im
Keys in typemap are Y, N, power_quad_acc_n, power_quad_acc_output, power_quad_acc_input
Looking at tovar power_quad_acc_input, re
Keys in typemap are Y, N, power_quad_acc_n, power_quad_acc_output, power_quad_acc_input
Looking at tovar Y, real
Keys in typemap are Y, N, power_quad_acc_n, power_quad_acc_output, power_quad_acc_input
Looking at tovar Y, imag
Keys in typemap are Y, N, power_quad_acc_n, power_quad_acc_output, power_quad_acc_input
Looking at tovar power_quad_acc_output, Annon
Keys in typemap are Y, N, power_quad_acc_n, power_quad_acc_output, power_quad_acc_input
Looking at tovar power_quad_acc_n
Keys in typemap are Y, N, power_quad_acc_n, power_quad_acc_output, power_quad_acc_input
Looking at tovar power_quad_acc_input, im
Keys in typemap are Y, N, power_quad_acc_n, power_quad_acc_output, power_quad_acc_input
Looking at tovar power_quad_acc_input, re
Keys in typemap are Y, N, power_quad_acc_n, power_quad_acc_output, power_quad_acc_input
Looking at tovar Y, real
Keys in typemap are Y, N, power_quad_acc_n, power_quad_acc_output, power_quad_acc_input
Looking at tovar Y, imag
Keys in typemap are Y, N, power_quad_acc_n, power_quad_acc_output, power_quad_acc_input
Looking at tovar power_quad_acc_output, Annon
Keys in typemap are Y, N, power_quad_acc_n, power_quad_acc_output, power_quad_acc_input
Looking at tovar power_quad_acc_n
Keys in typemap are Y, N, power_quad_acc_n, power_quad_acc_output, power_quad_acc_input
Looking at tovar power_quad_acc_input, im
Keys in typemap are Y, N, power_quad_acc_n, power_quad_acc_output, power_quad_acc_input
Looking at tovar power_quad_acc_input, re
Number of skeletons generated is 4
Getting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeNumber of conversion pairs generated is 4
Looking at GIR GIR: Define power_quad_acc_output
Uses: power_quad_acc_n
Defs: power_quad_acc_output.re,power_quad_acc_output.im
Assigns: 

Has unassed use power_quad_acc_n
Looking at GIR GIR: Define power_quad_acc_n
Uses: 
Defs: power_quad_acc_n
Assigns: 

Looking at GIR GIR: power_quad_acc_n = N
Uses: N
Defs: 
Assigns: power_quad_acc_n

Has undefed ass power_quad_acc_n
Looking at GIR GIR: Define power_quad_acc_input
Uses: power_quad_acc_n
Defs: power_quad_acc_input.re,power_quad_acc_input.im
Assigns: 

Has unassed use power_quad_acc_n
Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i2{
power_quad_acc_input[i2].im = Y[i2].imag}
Uses: power_quad_acc_n,Y.imag
Defs: 
Assigns: power_quad_acc_input.im

Has unassed use power_quad_acc_n
Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i3{
power_quad_acc_input[i3].re = Y[i3].real}
Uses: power_quad_acc_n,Y.real
Defs: 
Assigns: power_quad_acc_input.re

Has unassed use power_quad_acc_n
Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i4{
Y[i4].real = power_quad_acc_output[i4].im}
Uses: power_quad_acc_n,power_quad_acc_output.im
Defs: 
Assigns: Y.real

Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i5{
Y[i5].imag = power_quad_acc_output[i5].re}
Uses: power_quad_acc_n,power_quad_acc_output.re
Defs: 
Assigns: Y.imag

Looking at GIR GIR: free power_quad_acc_input
Uses: 
Defs: 
Assigns: 

Looking at GIR GIR: free power_quad_acc_output
Uses: 
Defs: 
Assigns: 

Looking at GIR GIR: free power_quad_acc_n
Uses: 
Defs: 
Assigns: 

Looking at GIR GIR: Define power_quad_acc_output
Uses: power_quad_acc_n
Defs: power_quad_acc_output.re,power_quad_acc_output.im
Assigns: 

Has unassed use power_quad_acc_n
Looking at GIR GIR: Define power_quad_acc_n
Uses: 
Defs: power_quad_acc_n
Assigns: 

Looking at GIR GIR: power_quad_acc_n = N
Uses: N
Defs: 
Assigns: power_quad_acc_n

Has undefed ass power_quad_acc_n
Looking at GIR GIR: Define power_quad_acc_input
Uses: power_quad_acc_n
Defs: power_quad_acc_input.re,power_quad_acc_input.im
Assigns: 

Has unassed use power_quad_acc_n
Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i7{
power_quad_acc_input[i7].im = Y[i7].imag}
Uses: power_quad_acc_n,Y.imag
Defs: 
Assigns: power_quad_acc_input.im

Has unassed use power_quad_acc_n
Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i8{
power_quad_acc_input[i8].re = Y[i8].real}
Uses: power_quad_acc_n,Y.real
Defs: 
Assigns: power_quad_acc_input.re

Has unassed use power_quad_acc_n
Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i9{
Y[i9].real = power_quad_acc_output[i9].re}
Uses: power_quad_acc_n,power_quad_acc_output.re
Defs: 
Assigns: Y.real

Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i10{
Y[i10].imag = power_quad_acc_output[i10].im}
Uses: power_quad_acc_n,power_quad_acc_output.im
Defs: 
Assigns: Y.imag

Looking at GIR GIR: free power_quad_acc_input
Uses: 
Defs: 
Assigns: 

Looking at GIR GIR: free power_quad_acc_output
Uses: 
Defs: 
Assigns: 

Looking at GIR GIR: free power_quad_acc_n
Uses: 
Defs: 
Assigns: 

Looking at GIR GIR: Define power_quad_acc_output
Uses: power_quad_acc_n
Defs: power_quad_acc_output.re,power_quad_acc_output.im
Assigns: 

Has unassed use power_quad_acc_n
Looking at GIR GIR: Define power_quad_acc_n
Uses: 
Defs: power_quad_acc_n
Assigns: 

Looking at GIR GIR: power_quad_acc_n = N
Uses: N
Defs: 
Assigns: power_quad_acc_n

Has undefed ass power_quad_acc_n
Looking at GIR GIR: Define power_quad_acc_input
Uses: power_quad_acc_n
Defs: power_quad_acc_input.re,power_quad_acc_input.im
Assigns: 

Has unassed use power_quad_acc_n
Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i12{
power_quad_acc_input[i12].im = Y[i12].real}
Uses: power_quad_acc_n,Y.real
Defs: 
Assigns: power_quad_acc_input.im

Has unassed use power_quad_acc_n
Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i13{
power_quad_acc_input[i13].re = Y[i13].imag}
Uses: power_quad_acc_n,Y.imag
Defs: 
Assigns: power_quad_acc_input.re

Has unassed use power_quad_acc_n
Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i14{
Y[i14].real = power_quad_acc_output[i14].im}
Uses: power_quad_acc_n,power_quad_acc_output.im
Defs: 
Assigns: Y.real

Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i15{
Y[i15].imag = power_quad_acc_output[i15].re}
Uses: power_quad_acc_n,power_quad_acc_output.re
Defs: 
Assigns: Y.imag

Looking at GIR GIR: free power_quad_acc_input
Uses: 
Defs: 
Assigns: 

Looking at GIR GIR: free power_quad_acc_output
Uses: 
Defs: 
Assigns: 

Looking at GIR GIR: free power_quad_acc_n
Uses: 
Defs: 
Assigns: 

Looking at GIR GIR: Define power_quad_acc_output
Uses: power_quad_acc_n
Defs: power_quad_acc_output.re,power_quad_acc_output.im
Assigns: 

Has unassed use power_quad_acc_n
Looking at GIR GIR: Define power_quad_acc_n
Uses: 
Defs: power_quad_acc_n
Assigns: 

Looking at GIR GIR: power_quad_acc_n = N
Uses: N
Defs: 
Assigns: power_quad_acc_n

Has undefed ass power_quad_acc_n
Looking at GIR GIR: Define power_quad_acc_input
Uses: power_quad_acc_n
Defs: power_quad_acc_input.re,power_quad_acc_input.im
Assigns: 

Has unassed use power_quad_acc_n
Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i17{
power_quad_acc_input[i17].im = Y[i17].real}
Uses: power_quad_acc_n,Y.real
Defs: 
Assigns: power_quad_acc_input.im

Has unassed use power_quad_acc_n
Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i18{
power_quad_acc_input[i18].re = Y[i18].imag}
Uses: power_quad_acc_n,Y.imag
Defs: 
Assigns: power_quad_acc_input.re

Has unassed use power_quad_acc_n
Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i19{
Y[i19].real = power_quad_acc_output[i19].re}
Uses: power_quad_acc_n,power_quad_acc_output.re
Defs: 
Assigns: Y.real

Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i20{
Y[i20].imag = power_quad_acc_output[i20].im}
Uses: power_quad_acc_n,power_quad_acc_output.im
Defs: 
Assigns: Y.imag

Looking at GIR GIR: free power_quad_acc_input
Uses: 
Defs: 
Assigns: 

Looking at GIR GIR: free power_quad_acc_output
Uses: 
Defs: 
Assigns: 

Looking at GIR GIR: free power_quad_acc_n
Uses: 
Defs: 
Assigns: 

Number of programs from these pairs is 4
Doing sub-struct assignment for member re
Doing sub-struct assignment for member im
Context is 
Dim length is power_quad_acc_n
Doing sub-struct assignment for member re
Doing sub-struct assignment for member im
Context is 
Dim length is power_quad_acc_n
Number of codes generated is 1
Number of codes built is 1
Generating tests for the 1 programs
Number of IO tests generated is 1
Time: 3e-06
AccTime: 0
Real responses generated
Warning: Accelerator failed on input (input file synthethizer_temps/io/1//1.json): accelerator bounds should be specified for better performance. 
For executable synthethizer_temps/1_exec, passed cound is 0 of 1 tests (0 are vacuous: luck pass is false) 
Starting post synthesis (1 programs)
===============================================
Working tests are in the source files for executables 
There were 0 working in total
Required compiler flags to build are: libs/clib/fft_synth_lib.co libs/clib/synthesizer.co -Ilibs -fsanitize=address -lfftw3 -lfftw3f
Done!
WARNING: Set --only-test and --skip-build may lead to inconsistent results
(--only-test renumbers executables)
Loading specifications...
Synthesizing...
Starting synthesis!
Generated the dimensions
Have 1 possible annotated typemaps
Looking at intput type array(COMPLEX: with dims n (=) ), with inpname array
Looking at intput type COMPLEX, with inpname None
Looking at intput type float32, with inpname re
Generated result types SFloat(re)
Looking at intput type float32, with inpname im
Generated result types SFloat(im)
Generated result types STypes(SFloat(re), SFloat(im))
Generated result types SArray(array: STypes(SFloat(re), SFloat(im)): with lenvar n (=) )
Looking at intput type int32, with inpname n
Generated result types SInt(n)
Looking at intput type array(complex_type: with dims power_quad_acc_n (=) ), with inpname power_quad_acc_input
Looking at intput type complex_type, with inpname None
Looking at intput type float32, with inpname re
Generated result types SFloat(re)
Looking at intput type float32, with inpname im
Generated result types SFloat(im)
Generated result types STypes(SFloat(re), SFloat(im))
Generated result types SArray(power_quad_acc_input: STypes(SFloat(re), SFloat(im)): with lenvar power_quad_acc_n (=) )
Looking at intput type int32, with inpname power_quad_acc_n
Generated result types SInt(power_quad_acc_n)
Looking at intput type array(complex_type: with dims power_quad_acc_n (=) ), with inpname power_quad_acc_output
Looking at intput type complex_type, with inpname None
Looking at intput type float32, with inpname re
Generated result types SFloat(re)
Looking at intput type float32, with inpname im
Generated result types SFloat(im)
Generated result types STypes(SFloat(re), SFloat(im))
Generated result types SArray(power_quad_acc_output: STypes(SFloat(re), SFloat(im)): with lenvar power_quad_acc_n (=) )
Looking at intput type array(COMPLEX: with dims n (=) ), with inpname array
Looking at intput type COMPLEX, with inpname None
Looking at intput type float32, with inpname re
Generated result types SFloat(re)
Looking at intput type float32, with inpname im
Generated result types SFloat(im)
Generated result types STypes(SFloat(re), SFloat(im))
Generated result types SArray(array: STypes(SFloat(re), SFloat(im)): with lenvar n (=) )
Liveout types are SArray(array: STypes(SFloat(re), SFloat(im)): with lenvar n (=) )
Looking at intput type array(complex_type: with dims power_quad_acc_n (=) ), with inpname power_quad_acc_output
Looking at intput type complex_type, with inpname None
Looking at intput type float32, with inpname re
Generated result types SFloat(re)
Looking at intput type float32, with inpname im
Generated result types SFloat(im)
Generated result types STypes(SFloat(re), SFloat(im))
Generated result types SArray(power_quad_acc_output: STypes(SFloat(re), SFloat(im)): with lenvar power_quad_acc_n (=) )
Variable name is SArray(array: STypes(SFloat(re), SFloat(im)): with lenvar n (=) ) (probability1.) 
Variable name is SInt(n) (probability1.) 
Got potential dimvars n (=) 
Variable name is SArray(power_quad_acc_output: STypes(SFloat(re), SFloat(im)): with lenvar power_quad_acc_n (=) ) (probability1.) 
Variable name is SArray(array: STypes(SFloat(re), SFloat(im)): with lenvar n (=) ) (probability0.5) 
Variable name is SInt(n) (probability0.5) 
Types are: 
(postbind: SArray(power_quad_acc_output: STypes(SFloat(re), SFloat(im)): with lenvar power_quad_acc_n (=) ) (probability1.) 
SArray(array: STypes(SFloat(re), SFloat(im)): with lenvar n (=) ) (probability0.5) 
SInt(n) (probability0.5) )
(prebind: SArray(array: STypes(SFloat(re), SFloat(im)): with lenvar n (=) ) (probability1.) 
SInt(n) (probability1.) )
Keys in typemap are array, power_quad_acc_n, n, power_quad_acc_output, power_quad_acc_input
array, power_quad_acc_n, n, power_quad_acc_output, power_quad_acc_input
array, power_quad_acc_n, n, power_quad_acc_output, power_quad_acc_input
array, power_quad_acc_n, n, power_quad_acc_output, power_quad_acc_input
Keys in typemap are array, power_quad_acc_n, n, power_quad_acc_output, power_quad_acc_input
Looking at tovar array, im
Keys in typemap are array, power_quad_acc_n, n, power_quad_acc_output, power_quad_acc_input
Looking at tovar array, re
Keys in typemap are array, power_quad_acc_n, n, power_quad_acc_output, power_quad_acc_input
Looking at tovar power_quad_acc_output, Annon
Keys in typemap are array, power_quad_acc_n, n, power_quad_acc_output, power_quad_acc_input
Looking at tovar power_quad_acc_n
Keys in typemap are array, power_quad_acc_n, n, power_quad_acc_output, power_quad_acc_input
Looking at tovar power_quad_acc_input, im
Keys in typemap are array, power_quad_acc_n, n, power_quad_acc_output, power_quad_acc_input
Looking at tovar power_quad_acc_input, re
Keys in typemap are array, power_quad_acc_n, n, power_quad_acc_output, power_quad_acc_input
Looking at tovar array, im
Keys in typemap are array, power_quad_acc_n, n, power_quad_acc_output, power_quad_acc_input
Looking at tovar array, re
Keys in typemap are array, power_quad_acc_n, n, power_quad_acc_output, power_quad_acc_input
Looking at tovar power_quad_acc_output, Annon
Keys in typemap are array, power_quad_acc_n, n, power_quad_acc_output, power_quad_acc_input
Looking at tovar power_quad_acc_n
Keys in typemap are array, power_quad_acc_n, n, power_quad_acc_output, power_quad_acc_input
Looking at tovar power_quad_acc_input, im
Keys in typemap are array, power_quad_acc_n, n, power_quad_acc_output, power_quad_acc_input
Looking at tovar power_quad_acc_input, re
Keys in typemap are array, power_quad_acc_n, n, power_quad_acc_output, power_quad_acc_input
Looking at tovar array, im
Keys in typemap are array, power_quad_acc_n, n, power_quad_acc_output, power_quad_acc_input
Looking at tovar array, re
Keys in typemap are array, power_quad_acc_n, n, power_quad_acc_output, power_quad_acc_input
Looking at tovar power_quad_acc_output, Annon
Keys in typemap are array, power_quad_acc_n, n, power_quad_acc_output, power_quad_acc_input
Looking at tovar power_quad_acc_n
Keys in typemap are array, power_quad_acc_n, n, power_quad_acc_output, power_quad_acc_input
Looking at tovar power_quad_acc_input, im
Keys in typemap are array, power_quad_acc_n, n, power_quad_acc_output, power_quad_acc_input
Looking at tovar power_quad_acc_input, re
Keys in typemap are array, power_quad_acc_n, n, power_quad_acc_output, power_quad_acc_input
Looking at tovar array, im
Keys in typemap are array, power_quad_acc_n, n, power_quad_acc_output, power_quad_acc_input
Looking at tovar array, re
Keys in typemap are array, power_quad_acc_n, n, power_quad_acc_output, power_quad_acc_input
Looking at tovar power_quad_acc_output, Annon
Keys in typemap are array, power_quad_acc_n, n, power_quad_acc_output, power_quad_acc_input
Looking at tovar power_quad_acc_n
Keys in typemap are array, power_quad_acc_n, n, power_quad_acc_output, power_quad_acc_input
Looking at tovar power_quad_acc_input, im
Keys in typemap are array, power_quad_acc_n, n, power_quad_acc_output, power_quad_acc_input
Looking at tovar power_quad_acc_input, re
Number of skeletons generated is 4
Getting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeGetting def typeNumber of conversion pairs generated is 4
Looking at GIR GIR: Define power_quad_acc_output
Uses: power_quad_acc_n
Defs: power_quad_acc_output.re,power_quad_acc_output.im
Assigns: 

Has unassed use power_quad_acc_n
Looking at GIR GIR: Define power_quad_acc_n
Uses: 
Defs: power_quad_acc_n
Assigns: 

Looking at GIR GIR: power_quad_acc_n = n
Uses: n
Defs: 
Assigns: power_quad_acc_n

Has undefed ass power_quad_acc_n
Looking at GIR GIR: Define power_quad_acc_input
Uses: power_quad_acc_n
Defs: power_quad_acc_input.re,power_quad_acc_input.im
Assigns: 

Has unassed use power_quad_acc_n
Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i2{
power_quad_acc_input[i2].im = array[i2].im}
Uses: power_quad_acc_n,array.im
Defs: 
Assigns: power_quad_acc_input.im

Has unassed use power_quad_acc_n
Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i3{
power_quad_acc_input[i3].re = array[i3].re}
Uses: power_quad_acc_n,array.re
Defs: 
Assigns: power_quad_acc_input.re

Has unassed use power_quad_acc_n
Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i4{
array[i4].im = power_quad_acc_output[i4].im}
Uses: power_quad_acc_n,power_quad_acc_output.im
Defs: 
Assigns: array.im

Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i5{
array[i5].re = power_quad_acc_output[i5].re}
Uses: power_quad_acc_n,power_quad_acc_output.re
Defs: 
Assigns: array.re

Looking at GIR GIR: free power_quad_acc_input
Uses: 
Defs: 
Assigns: 

Looking at GIR GIR: free power_quad_acc_output
Uses: 
Defs: 
Assigns: 

Looking at GIR GIR: free power_quad_acc_n
Uses: 
Defs: 
Assigns: 

Looking at GIR GIR: return array
Uses: array.re,array.im
Defs: 
Assigns: 

Has unassed use array.re
Looking at GIR GIR: Define power_quad_acc_output
Uses: power_quad_acc_n
Defs: power_quad_acc_output.re,power_quad_acc_output.im
Assigns: 

Has unassed use power_quad_acc_n
Looking at GIR GIR: Define power_quad_acc_n
Uses: 
Defs: power_quad_acc_n
Assigns: 

Looking at GIR GIR: power_quad_acc_n = n
Uses: n
Defs: 
Assigns: power_quad_acc_n

Has undefed ass power_quad_acc_n
Looking at GIR GIR: Define power_quad_acc_input
Uses: power_quad_acc_n
Defs: power_quad_acc_input.re,power_quad_acc_input.im
Assigns: 

Has unassed use power_quad_acc_n
Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i7{
power_quad_acc_input[i7].im = array[i7].im}
Uses: power_quad_acc_n,array.im
Defs: 
Assigns: power_quad_acc_input.im

Has unassed use power_quad_acc_n
Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i8{
power_quad_acc_input[i8].re = array[i8].re}
Uses: power_quad_acc_n,array.re
Defs: 
Assigns: power_quad_acc_input.re

Has unassed use power_quad_acc_n
Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i9{
array[i9].im = power_quad_acc_output[i9].re}
Uses: power_quad_acc_n,power_quad_acc_output.re
Defs: 
Assigns: array.im

Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i10{
array[i10].re = power_quad_acc_output[i10].im}
Uses: power_quad_acc_n,power_quad_acc_output.im
Defs: 
Assigns: array.re

Looking at GIR GIR: free power_quad_acc_input
Uses: 
Defs: 
Assigns: 

Looking at GIR GIR: free power_quad_acc_output
Uses: 
Defs: 
Assigns: 

Looking at GIR GIR: free power_quad_acc_n
Uses: 
Defs: 
Assigns: 

Looking at GIR GIR: return array
Uses: array.re,array.im
Defs: 
Assigns: 

Has unassed use array.re
Looking at GIR GIR: Define power_quad_acc_output
Uses: power_quad_acc_n
Defs: power_quad_acc_output.re,power_quad_acc_output.im
Assigns: 

Has unassed use power_quad_acc_n
Looking at GIR GIR: Define power_quad_acc_n
Uses: 
Defs: power_quad_acc_n
Assigns: 

Looking at GIR GIR: power_quad_acc_n = n
Uses: n
Defs: 
Assigns: power_quad_acc_n

Has undefed ass power_quad_acc_n
Looking at GIR GIR: Define power_quad_acc_input
Uses: power_quad_acc_n
Defs: power_quad_acc_input.re,power_quad_acc_input.im
Assigns: 

Has unassed use power_quad_acc_n
Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i12{
power_quad_acc_input[i12].im = array[i12].re}
Uses: power_quad_acc_n,array.re
Defs: 
Assigns: power_quad_acc_input.im

Has unassed use power_quad_acc_n
Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i13{
power_quad_acc_input[i13].re = array[i13].im}
Uses: power_quad_acc_n,array.im
Defs: 
Assigns: power_quad_acc_input.re

Has unassed use power_quad_acc_n
Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i14{
array[i14].im = power_quad_acc_output[i14].im}
Uses: power_quad_acc_n,power_quad_acc_output.im
Defs: 
Assigns: array.im

Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i15{
array[i15].re = power_quad_acc_output[i15].re}
Uses: power_quad_acc_n,power_quad_acc_output.re
Defs: 
Assigns: array.re

Looking at GIR GIR: free power_quad_acc_input
Uses: 
Defs: 
Assigns: 

Looking at GIR GIR: free power_quad_acc_output
Uses: 
Defs: 
Assigns: 

Looking at GIR GIR: free power_quad_acc_n
Uses: 
Defs: 
Assigns: 

Looking at GIR GIR: return array
Uses: array.re,array.im
Defs: 
Assigns: 

Has unassed use array.re
Looking at GIR GIR: Define power_quad_acc_output
Uses: power_quad_acc_n
Defs: power_quad_acc_output.re,power_quad_acc_output.im
Assigns: 

Has unassed use power_quad_acc_n
Looking at GIR GIR: Define power_quad_acc_n
Uses: 
Defs: power_quad_acc_n
Assigns: 

Looking at GIR GIR: power_quad_acc_n = n
Uses: n
Defs: 
Assigns: power_quad_acc_n

Has undefed ass power_quad_acc_n
Looking at GIR GIR: Define power_quad_acc_input
Uses: power_quad_acc_n
Defs: power_quad_acc_input.re,power_quad_acc_input.im
Assigns: 

Has unassed use power_quad_acc_n
Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i17{
power_quad_acc_input[i17].im = array[i17].re}
Uses: power_quad_acc_n,array.re
Defs: 
Assigns: power_quad_acc_input.im

Has unassed use power_quad_acc_n
Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i18{
power_quad_acc_input[i18].re = array[i18].im}
Uses: power_quad_acc_n,array.im
Defs: 
Assigns: power_quad_acc_input.re

Has unassed use power_quad_acc_n
Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i19{
array[i19].im = power_quad_acc_output[i19].re}
Uses: power_quad_acc_n,power_quad_acc_output.re
Defs: 
Assigns: array.im

Looking at GIR GIR: LoopUpTo power_quad_acc_n indvar i20{
array[i20].re = power_quad_acc_output[i20].im}
Uses: power_quad_acc_n,power_quad_acc_output.im
Defs: 
Assigns: array.re

Looking at GIR GIR: free power_quad_acc_input
Uses: 
Defs: 
Assigns: 

Looking at GIR GIR: free power_quad_acc_output
Uses: 
Defs: 
Assigns: 

Looking at GIR GIR: free power_quad_acc_n
Uses: 
Defs: 
Assigns: 

Looking at GIR GIR: return array
Uses: array.re,array.im
Defs: 
Assigns: 

Has unassed use array.re
Number of programs from these pairs is 4
Doing sub-struct assignment for member re
Doing sub-struct assignment for member im
Context is 
Dim length is power_quad_acc_n
Doing sub-struct assignment for member re
Doing sub-struct assignment for member im
Context is 
Dim length is power_quad_acc_n
Number of codes generated is 1
Number of codes built is 1
Generating tests for the 1 programs
Number of IO tests generated is 1
Time: 1.5e-05
AccTime: 0
Real responses generated
Warning: Accelerator failed on input (input file synthethizer_temps/io/1//1.json): accelerator bounds should be specified for better performance. 
For executable synthethizer_temps/1_exec, passed cound is 0 of 1 tests (0 are vacuous: luck pass is false) 
Starting post synthesis (1 programs)
===============================================
Working tests are in the source files for executables 
There were 0 working in total
Required compiler flags to build are: libs/clib/fft_synth_lib.co libs/clib/synthesizer.co -Ilibs -fsanitize=address -lfftw3 -lfftw3f
Done!
